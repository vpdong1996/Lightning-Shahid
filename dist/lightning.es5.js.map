{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mts","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class StageUtils {\r\n\r\n    static mergeNumbers(v1, v2, p) {\r\n        return v1 * p + v2 * (1 - p);\r\n    };\r\n\r\n    static rgb(r, g, b) {\r\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\r\n    };\r\n\r\n    static rgba(r, g, b, a) {\r\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\r\n    };\r\n\r\n    static getRgbString(color) {\r\n        let r = ((color / 65536) | 0) % 256;\r\n        let g = ((color / 256) | 0) % 256;\r\n        let b = color % 256;\r\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n    };\r\n\r\n    static getRgbaString(color) {\r\n        let r = ((color / 65536) | 0) % 256;\r\n        let g = ((color / 256) | 0) % 256;\r\n        let b = color % 256;\r\n        let a = ((color / 16777216) | 0) / 255;\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\r\n    };\r\n\r\n    static getRgbaStringFromArray(color) {\r\n        let r = Math.floor(color[0] * 255);\r\n        let g = Math.floor(color[1] * 255);\r\n        let b = Math.floor(color[2] * 255);\r\n        let a = Math.floor(color[3] * 255) / 255;\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\r\n    };\r\n\r\n    static getRgbaComponentsNormalized(argb) {\r\n        let r = ((argb / 65536) | 0) % 256;\r\n        let g = ((argb / 256) | 0) % 256;\r\n        let b = argb % 256;\r\n        let a = ((argb / 16777216) | 0);\r\n        return [r / 255, g / 255, b / 255, a / 255];\r\n    };\r\n\r\n    static getRgbComponentsNormalized(argb) {\r\n        let r = ((argb / 65536) | 0) % 256;\r\n        let g = ((argb / 256) | 0) % 256;\r\n        let b = argb % 256;\r\n        return [r / 255, g / 255, b / 255];\r\n    };\r\n\r\n    static getRgbaComponents(argb) {\r\n        let r = ((argb / 65536) | 0) % 256;\r\n        let g = ((argb / 256) | 0) % 256;\r\n        let b = argb % 256;\r\n        let a = ((argb / 16777216) | 0);\r\n        return [r, g, b, a];\r\n    };\r\n\r\n    static getArgbNumber(rgba) {\r\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\r\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\r\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\r\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\r\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\r\n        if (v < 0) {\r\n            v = 0xFFFFFFFF + v + 1;\r\n        }\r\n        return v;\r\n    };\r\n\r\n    static mergeColors(c1, c2, p) {\r\n        let r1 = ((c1 / 65536) | 0) % 256;\r\n        let g1 = ((c1 / 256) | 0) % 256;\r\n        let b1 = c1 % 256;\r\n        let a1 = ((c1 / 16777216) | 0);\r\n\r\n        let r2 = ((c2 / 65536) | 0) % 256;\r\n        let g2 = ((c2 / 256) | 0) % 256;\r\n        let b2 = c2 % 256;\r\n        let a2 = ((c2 / 16777216) | 0);\r\n\r\n        let r = r1 * p + r2 * (1 - p);\r\n        let g = g1 * p + g2 * (1 - p);\r\n        let b = b1 * p + b2 * (1 - p);\r\n        let a = a1 * p + a2 * (1 - p);\r\n\r\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\r\n    };\r\n\r\n    static mergeMultiColors(c, p) {\r\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\r\n        let n = c.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let r1 = ((c[i] / 65536) | 0) % 256;\r\n            let g1 = ((c[i] / 256) | 0) % 256;\r\n            let b1 = c[i] % 256;\r\n            let a1 = ((c[i] / 16777216) | 0);\r\n            r += r1 * p[i];\r\n            g += g1 * p[i];\r\n            b += b1 * p[i];\r\n            a += a1 * p[i];\r\n            t += p[i];\r\n        }\r\n\r\n        t = 1 / t;\r\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\r\n    };\r\n\r\n    static mergeMultiColorsEqual(c) {\r\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\r\n        let n = c.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let r1 = ((c[i] / 65536) | 0) % 256;\r\n            let g1 = ((c[i] / 256) | 0) % 256;\r\n            let b1 = c[i] % 256;\r\n            let a1 = ((c[i] / 16777216) | 0);\r\n            r += r1;\r\n            g += g1;\r\n            b += b1;\r\n            a += a1;\r\n            t += 1.0;\r\n        }\r\n\r\n        t = 1 / t;\r\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\r\n    };\r\n\r\n    static mergeColorAlpha(c, alpha) {\r\n        let a = ((c / 16777216 | 0) * alpha) | 0;\r\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\r\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\r\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\r\n            (a << 24);\r\n    };\r\n\r\n    static rad(deg) {\r\n        return deg * (Math.PI / 180);\r\n    };\r\n\r\n    static getTimingBezier(a, b, c, d) {\r\n        let xc = 3.0 * a;\r\n        let xb = 3.0 * (c - a) - xc;\r\n        let xa = 1.0 - xc - xb;\r\n        let yc = 3.0 * b;\r\n        let yb = 3.0 * (d - b) - yc;\r\n        let ya = 1.0 - yc - yb;\r\n\r\n        return function (time) {\r\n            if (time >= 1.0) {\r\n                return 1;\r\n            }\r\n            if (time <= 0) {\r\n                return 0;\r\n            }\r\n\r\n            let t = 0.5, cbx, cbxd, dx;\r\n\r\n            for (let it = 0; it < 20; it++) {\r\n                cbx = t * (t * (t * xa + xb) + xc);\r\n                dx = time - cbx;\r\n                if (dx > -1e-8 && dx < 1e-8) {\r\n                    return t * (t * (t * ya + yb) + yc);\r\n                }\r\n\r\n                // Cubic bezier derivative.\r\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\r\n\r\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\r\n                    // Problematic. Fall back to binary search method.\r\n                    break;\r\n                }\r\n\r\n                t += dx / cbxd;\r\n            }\r\n\r\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\r\n            let minT = 0;\r\n            let maxT = 1;\r\n            for (let it = 0; it < 20; it++) {\r\n                t = 0.5 * (minT + maxT);\r\n\r\n                cbx = t * (t * (t * xa + xb) + xc);\r\n\r\n                dx = time - cbx;\r\n                if (dx > -1e-8 && dx < 1e-8) {\r\n                    // Solution found!\r\n                    return t * (t * (t * ya + yb) + yc);\r\n                }\r\n\r\n                if (dx < 0) {\r\n                    maxT = t;\r\n                } else {\r\n                    minT = t;\r\n                }\r\n            }\r\n\r\n        };\r\n    };\r\n\r\n    static getTimingFunction(str) {\r\n        switch (str) {\r\n            case \"linear\":\r\n                return function (time) {\r\n                    return time\r\n                };\r\n            case \"ease\":\r\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\r\n            case \"ease-in\":\r\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\r\n            case \"ease-out\":\r\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\r\n            case \"ease-in-out\":\r\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\r\n            case \"step-start\":\r\n                return function () {\r\n                    return 1\r\n                };\r\n            case \"step-end\":\r\n                return function (time) {\r\n                    return time === 1 ? 1 : 0;\r\n                };\r\n            default:\r\n                let s = \"cubic-bezier(\";\r\n                if (str && str.indexOf(s) === 0) {\r\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\r\n                    if (parts.length !== 4) {\r\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\r\n\r\n                        // Fallback: use linear.\r\n                        return function (time) {\r\n                            return time\r\n                        };\r\n                    }\r\n                    let a = parseFloat(parts[0]);\r\n                    let b = parseFloat(parts[1]);\r\n                    let c = parseFloat(parts[2]);\r\n                    let d = parseFloat(parts[3]);\r\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\r\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\r\n                        // Fallback: use linear.\r\n                        return function (time) {\r\n                            return time\r\n                        };\r\n                    }\r\n\r\n                    return StageUtils.getTimingBezier(a, b, c, d);\r\n                } else {\r\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\r\n                    // Fallback: use linear.\r\n                    return function (time) {\r\n                        return time\r\n                    };\r\n                }\r\n        }\r\n    };\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class Utils {\r\n\r\n    static isFunction(value) {\r\n        return typeof value === 'function';\r\n    }\r\n\r\n    static isNumber(value) {\r\n        return typeof value === 'number';\r\n    }\r\n\r\n    static isInteger(value) {\r\n        return (typeof value === 'number' && (value % 1) === 0);\r\n    }\r\n\r\n    static isBoolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n\r\n    static isString(value) {\r\n        return typeof value === 'string';\r\n    }\r\n\r\n    static clone(v) {\r\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\r\n            return Utils.getDeepClone(v);\r\n        } else {\r\n            // Copy by value.\r\n            return v;\r\n        }\r\n    }\r\n\r\n    static cloneObjShallow(obj) {\r\n        let keys = Object.keys(obj);\r\n        let clone = {}\r\n        for (let i = 0; i < keys.length; i++) {\r\n            clone[keys[i]] = obj[keys[i]];\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    static merge(obj1, obj2) {\r\n        let keys = Object.keys(obj2);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            obj1[keys[i]] = obj2[keys[i]];\r\n        }\r\n        return obj1;\r\n    }\r\n\r\n    static isObject(value) {\r\n        let type = typeof value;\r\n        return !!value && (type === 'object' || type === 'function');\r\n    }\r\n\r\n    static isPlainObject(value) {\r\n        let type = typeof value;\r\n        return !!value && (type === 'object');\r\n    }\r\n\r\n    static isObjectLiteral(value){\r\n        return typeof value === 'object' && value && value.constructor === Object;\r\n    }\r\n\r\n    static getArrayIndex(index, arr) {\r\n        return Utils.getModuloIndex(index, arr.length);\r\n    }\r\n\r\n    static getModuloIndex(index, len) {\r\n        if (len === 0) return index;\r\n        while (index < 0) {\r\n            index += Math.ceil(-index / len) * len;\r\n        }\r\n        index = index % len;\r\n        return index;\r\n    }\r\n\r\n    static getDeepClone(obj) {\r\n        let i, c;\r\n        if (Utils.isFunction(obj)) {\r\n            // Copy functions by reference.\r\n            return obj;\r\n        }\r\n        if (Array.isArray(obj)) {\r\n            c = [];\r\n            let keys = Object.keys(obj);\r\n            for (i = 0; i < keys.length; i++) {\r\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\r\n            }\r\n            return c;\r\n        } else if (Utils.isObject(obj)) {\r\n            c = {}\r\n            let keys = Object.keys(obj);\r\n            for (i = 0; i < keys.length; i++) {\r\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\r\n            }\r\n            return c;\r\n        } else {\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    static equalValues(v1, v2) {\r\n        if ((typeof v1) !== (typeof v2)) return false;\r\n        if (Utils.isObjectLiteral(v1)) {\r\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\r\n        } else if (Array.isArray(v1)) {\r\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\r\n        } else {\r\n            return v1 === v2;\r\n        }\r\n    }\r\n\r\n    static equalObjectLiterals(obj1, obj2) {\r\n        let keys1 = Object.keys(obj1);\r\n        let keys2 = Object.keys(obj2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0, n = keys1.length; i < n; i++) {\r\n            const k1 = keys1[i];\r\n            const k2 = keys2[i];\r\n            if (k1 !== k2) {\r\n                return false;\r\n            }\r\n\r\n            const v1 = obj1[k1];\r\n            const v2 = obj2[k2];\r\n\r\n            if (!Utils.equalValues(v1, v2)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static equalArrays(v1, v2) {\r\n        if (v1.length !== v2.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0, n = v1.length; i < n; i++) {\r\n            if (!this.equalValues(v1[i], v2[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static setToArray(s) {\r\n        let result = [];\r\n        s.forEach(function (value) {\r\n            result.push(value);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    static iteratorToArray(iterator) {\r\n        let result = [];\r\n        let iteratorResult = iterator.next();\r\n        while (!iteratorResult.done) {\r\n            result.push(iteratorResult.value);\r\n            iteratorResult = iterator.next();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static isUcChar(charcode) {\r\n        return charcode >= 65 && charcode <= 90;\r\n    }\r\n\r\n}\r\n\r\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\r\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\r\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\r\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\r\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\r\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class Base {\r\n\r\n    static defaultSetter(obj, name, value) {\r\n        obj[name] = value;\r\n    }\r\n\r\n    static patchObject(obj, settings) {\r\n        if (!Utils.isObjectLiteral(settings)) {\r\n            console.error(\"[Lightning] Settings must be object literal\");\r\n        } else {\r\n            let names = Object.keys(settings);\r\n            for (let i = 0, n = names.length; i < n; i++) {\r\n                let name = names[i];\r\n\r\n                this.patchObjectProperty(obj, name, settings[name]);\r\n            }\r\n        }\r\n    }\r\n\r\n    static patchObjectProperty(obj, name, value) {\r\n        let setter = obj.setSetting || Base.defaultSetter;\r\n\r\n        if (name.charAt(0) === \"_\") {\r\n            // Disallow patching private variables.\r\n            if (name !== \"__create\") {\r\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\r\n            }\r\n        } else if (name !== \"type\") {\r\n            // Type is a reserved keyword to specify the class type on creation.\r\n            if (Utils.isFunction(value) && value.__local) {\r\n                // Local function (Base.local(s => s.something))\r\n                value = value.__local(obj);\r\n            }\r\n\r\n            setter(obj, name, value);\r\n        }\r\n    }\r\n\r\n    static local(func) {\r\n        // This function can be used as an object setting, which is called with the target object.\r\n        func.__local = true;\r\n    }\r\n\r\n\r\n}\r\n\r\nimport Utils from \"./Utils.mjs\";\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class SpacingCalculator {\r\n\r\n    static getSpacing(mode, numberOfItems, remainingSpace) {\r\n        const itemGaps = (numberOfItems - 1);\r\n        let spacePerGap;\r\n\r\n        let spacingBefore, spacingBetween;\r\n\r\n        switch(mode) {\r\n            case \"flex-start\":\r\n                spacingBefore = 0;\r\n                spacingBetween = 0;\r\n                break;\r\n            case \"flex-end\":\r\n                spacingBefore = remainingSpace;\r\n                spacingBetween = 0;\r\n                break;\r\n            case \"center\":\r\n                spacingBefore = remainingSpace / 2;\r\n                spacingBetween = 0;\r\n                break;\r\n            case \"space-between\":\r\n                spacingBefore = 0;\r\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\r\n                break;\r\n            case \"space-around\":\r\n                if (remainingSpace < 0) {\r\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\r\n                } else {\r\n                    spacePerGap = remainingSpace / (itemGaps + 1);\r\n                    spacingBefore = 0.5 * spacePerGap;\r\n                    spacingBetween = spacePerGap;\r\n                }\r\n                break;\r\n            case \"space-evenly\":\r\n                if (remainingSpace < 0) {\r\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\r\n                } else {\r\n                    spacePerGap = remainingSpace / (itemGaps + 2);\r\n                    spacingBefore = spacePerGap;\r\n                    spacingBetween = spacePerGap;\r\n                }\r\n                break;\r\n            case \"stretch\":\r\n                spacingBefore = 0;\r\n                spacingBetween = 0;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown mode: \" + mode);\r\n        }\r\n\r\n        return {spacingBefore, spacingBetween}\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\r\n\r\nexport default class ContentAligner {\r\n\r\n    constructor(layout) {\r\n        this._layout = layout;\r\n        this._totalCrossAxisSize = 0;\r\n    }\r\n\r\n    get _lines() {\r\n        return this._layout._lines;\r\n    }\r\n\r\n    init() {\r\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\r\n    }\r\n\r\n    align() {\r\n        const crossAxisSize = this._layout.crossAxisSize;\r\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\r\n\r\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\r\n\r\n        const lines = this._lines;\r\n\r\n        const mode = this._layout._flexContainer.alignContent;\r\n        let growSize = 0;\r\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\r\n            growSize = remainingSpace / lines.length;\r\n        }\r\n\r\n        let currentPos = spacingBefore;\r\n        for (let i = 0, n = lines.length; i < n; i++) {\r\n            const crossAxisLayoutOffset = currentPos;\r\n            const aligner = lines[i].createItemAligner();\r\n\r\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\r\n\r\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\r\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\r\n\r\n            aligner.align();\r\n\r\n            if (aligner.recursiveResizeOccured) {\r\n                lines[i].setItemPositions();\r\n            }\r\n\r\n            currentPos += finalCrossAxisLayoutSize;\r\n            currentPos += spacingBetween;\r\n        }\r\n    }\r\n\r\n    get totalCrossAxisSize() {\r\n        return this._totalCrossAxisSize;\r\n    }\r\n\r\n    _getTotalCrossAxisSize() {\r\n        const lines = this._lines;\r\n        let total = 0;\r\n        for (let i = 0, n = lines.length; i < n; i++) {\r\n            const line = lines[i];\r\n            total += line.crossAxisLayoutSize;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    _getSpacing(remainingSpace) {\r\n        const mode = this._layout._flexContainer.alignContent;\r\n        const numberOfItems = this._lines.length;\r\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class FlexUtils {\r\n\r\n    static getParentAxisSizeWithPadding(item, horizontal) {\r\n        const target = item.target;\r\n        const parent = target.getParent();\r\n        if (!parent) {\r\n            return 0;\r\n        } else {\r\n            const flexParent = item.flexParent;\r\n            if (flexParent) {\r\n                // Use pending layout size.\r\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\r\n            } else {\r\n                // Use 'absolute' size.\r\n                return horizontal ? parent.w : parent.h;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getRelAxisSize(item, horizontal) {\r\n        if (horizontal) {\r\n            if (item.funcW) {\r\n                if (this._allowRelAxisSizeFunction(item, true)) {\r\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\r\n                } else {\r\n                    return 0;\r\n                }\r\n            } else {\r\n                return item.originalWidth;\r\n            }\r\n        } else {\r\n            if (item.funcH) {\r\n                if (this._allowRelAxisSizeFunction(item, false)) {\r\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\r\n                } else {\r\n                    return 0;\r\n                }\r\n            } else {\r\n                return item.originalHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    static _allowRelAxisSizeFunction(item, horizontal) {\r\n        const flexParent = item.flexParent;\r\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\r\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static isZeroAxisSize(item, horizontal) {\r\n        if (horizontal) {\r\n            return !item.originalWidth && !item.funcW;\r\n        } else {\r\n            return !item.originalHeight && !item.funcH;\r\n        }\r\n    }\r\n\r\n    static getAxisLayoutPos(item, horizontal) {\r\n        return horizontal ? item.x : item.y;\r\n    }\r\n\r\n    static getAxisLayoutSize(item, horizontal) {\r\n        return horizontal ? item.w : item.h;\r\n    }\r\n\r\n    static setAxisLayoutPos(item, horizontal, pos) {\r\n        if (horizontal) {\r\n            item.x = pos;\r\n        } else {\r\n            item.y = pos;\r\n        }\r\n    }\r\n\r\n    static setAxisLayoutSize(item, horizontal, size) {\r\n        if (horizontal) {\r\n            item.w = size;\r\n        } else {\r\n            item.h = size;\r\n        }\r\n    }\r\n\r\n    static getAxisMinSize(item, horizontal) {\r\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\r\n\r\n        let flexItemMinSize = 0;\r\n        if (item.isFlexItemEnabled()) {\r\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\r\n        }\r\n\r\n        const hasLimitedMinSize = (flexItemMinSize > 0);\r\n        if (hasLimitedMinSize) {\r\n            minSize = Math.max(minSize, flexItemMinSize);\r\n        }\r\n        return minSize;\r\n    }\r\n\r\n    static getPlainAxisMinSize(item, horizontal) {\r\n        if (item.isFlexEnabled()) {\r\n            return item._flex._layout.getAxisMinSize(horizontal);\r\n        } else {\r\n            const isShrinkable = (item.flexItem.shrink !== 0);\r\n            if (isShrinkable) {\r\n                return 0;\r\n            } else {\r\n                return this.getRelAxisSize(item, horizontal);\r\n            }\r\n        }\r\n    }\r\n\r\n    static resizeAxis(item, horizontal, size) {\r\n        if (item.isFlexEnabled()) {\r\n            const isMainAxis = (item._flex._horizontal === horizontal);\r\n            if (isMainAxis) {\r\n                item._flex._layout.resizeMainAxis(size);\r\n            } else {\r\n                item._flex._layout.resizeCrossAxis(size);\r\n            }\r\n        } else {\r\n            this.setAxisLayoutSize(item, horizontal, size);\r\n        }\r\n    }\r\n\r\n\r\n    static getPaddingOffset(item, horizontal) {\r\n        if (item.isFlexEnabled()) {\r\n            const flex = item._flex;\r\n            if (horizontal) {\r\n                return flex.paddingLeft;\r\n            } else {\r\n                return flex.paddingTop;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static getTotalPadding(item, horizontal) {\r\n        if (item.isFlexEnabled()) {\r\n            const flex = item._flex;\r\n            if (horizontal) {\r\n                return flex.paddingRight + flex.paddingLeft;\r\n            } else {\r\n                return flex.paddingTop + flex.paddingBottom;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static getMarginOffset(item, horizontal) {\r\n        const flexItem = item.flexItem;\r\n        if (flexItem) {\r\n            if (horizontal) {\r\n                return flexItem.marginLeft;\r\n            } else {\r\n                return flexItem.marginTop;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static getTotalMargin(item, horizontal) {\r\n        const flexItem = item.flexItem;\r\n        if (flexItem) {\r\n            if (horizontal) {\r\n                return flexItem.marginRight + flexItem.marginLeft;\r\n            } else {\r\n                return flexItem.marginTop + flexItem.marginBottom;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class SizeShrinker {\r\n\r\n    constructor(line) {\r\n        this._line = line;\r\n        this._amountRemaining = 0;\r\n        this._shrunkSize = 0;\r\n    }\r\n\r\n    shrink(amount) {\r\n        this._shrunkSize = 0;\r\n\r\n        this._amountRemaining = amount;\r\n        let totalShrinkAmount = this._getTotalShrinkAmount();\r\n        if (totalShrinkAmount) {\r\n            const items = this._line.items;\r\n            do {\r\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\r\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n                    const item = items[i];\r\n                    const flexItem = item.flexItem;\r\n                    const shrinkAmount = flexItem.shrink;\r\n                    const isShrinkableItem = (shrinkAmount > 0);\r\n                    if (isShrinkableItem) {\r\n                        let shrink = shrinkAmount * amountPerShrink;\r\n                        const minSize = flexItem._getMainAxisMinSize();\r\n                        const size = flexItem._getMainAxisLayoutSize();\r\n                        if (size > minSize) {\r\n                            const maxShrink = size - minSize;\r\n                            const isFullyShrunk = (shrink >= maxShrink);\r\n                            if (isFullyShrunk) {\r\n                                shrink = maxShrink;\r\n\r\n                                // Destribute remaining amount over the other flex items.\r\n                                totalShrinkAmount -= shrinkAmount;\r\n                            }\r\n\r\n                            const finalSize = size - shrink;\r\n                            flexItem._resizeMainAxis(finalSize);\r\n\r\n                            this._shrunkSize += shrink;\r\n                            this._amountRemaining -= shrink;\r\n\r\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\r\n        }\r\n    }\r\n\r\n    _getTotalShrinkAmount() {\r\n        let total = 0;\r\n        const items = this._line.items;\r\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n            const item = items[i];\r\n            const flexItem = item.flexItem;\r\n\r\n            if (flexItem.shrink) {\r\n                const minSize = flexItem._getMainAxisMinSize();\r\n                const size = flexItem._getMainAxisLayoutSize();\r\n\r\n                // Exclude those already fully shrunk.\r\n                if (size > minSize) {\r\n                    total += flexItem.shrink;\r\n                }\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getShrunkSize() {\r\n        return this._shrunkSize;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class SizeGrower {\r\n\r\n    constructor(line) {\r\n        this._line = line;\r\n        this._amountRemaining = 0;\r\n        this._grownSize = 0;\r\n    }\r\n\r\n    grow(amount) {\r\n        this._grownSize = 0;\r\n\r\n        this._amountRemaining = amount;\r\n        let totalGrowAmount = this._getTotalGrowAmount();\r\n        if (totalGrowAmount) {\r\n            const items = this._line.items;\r\n            do {\r\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\r\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n                    const item = items[i];\r\n                    const flexItem = item.flexItem;\r\n                    const growAmount = flexItem.grow;\r\n                    const isGrowableItem = (growAmount > 0);\r\n                    if (isGrowableItem) {\r\n                        let grow = growAmount * amountPerGrow;\r\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\r\n                        const size = flexItem._getMainAxisLayoutSize();\r\n                        if (maxSize > 0) {\r\n                            if (size >= maxSize) {\r\n                                // Already fully grown.\r\n                                grow = 0;\r\n                            } else {\r\n                                const maxGrow = maxSize - size;\r\n                                const isFullyGrown = (grow >= maxGrow);\r\n                                if (isFullyGrown) {\r\n                                    grow = maxGrow;\r\n\r\n                                    // Destribute remaining amount over the other flex items.\r\n                                    totalGrowAmount -= growAmount;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (grow > 0) {\r\n                            const finalSize = size + grow;\r\n                            flexItem._resizeMainAxis(finalSize);\r\n\r\n                            this._grownSize += grow;\r\n                            this._amountRemaining -= grow;\r\n\r\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\r\n        }\r\n    }\r\n\r\n    _getTotalGrowAmount() {\r\n        let total = 0;\r\n        const items = this._line.items;\r\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n            const item = items[i];\r\n            const flexItem = item.flexItem;\r\n\r\n            if (flexItem.grow) {\r\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\r\n                const size = flexItem._getMainAxisLayoutSize();\r\n\r\n                // Exclude those already fully grown.\r\n                if (maxSize === 0 || size < maxSize) {\r\n                    total += flexItem.grow;\r\n                }\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getGrownSize() {\r\n        return this._grownSize;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\r\n\r\nexport default class ItemPositioner {\r\n\r\n    constructor(lineLayout) {\r\n        this._line = lineLayout;\r\n    }\r\n\r\n    get _layout() {\r\n        return this._line._layout;\r\n    }\r\n\r\n    position() {\r\n        const {spacingBefore, spacingBetween} = this._getSpacing();\r\n\r\n        let currentPos = spacingBefore;\r\n\r\n        const items = this._line.items;\r\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n            const item = items[i];\r\n\r\n            item.flexItem._setMainAxisLayoutPos(currentPos);\r\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\r\n            currentPos += spacingBetween;\r\n        }\r\n    }\r\n\r\n    _getSpacing() {\r\n        const remainingSpace = this._line._availableSpace;\r\n        let mode = this._layout._flexContainer.justifyContent;\r\n        const numberOfItems = this._line.numberOfItems;\r\n\r\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class ItemAligner {\r\n\r\n    constructor(line) {\r\n        this._line = line;\r\n        this._crossAxisLayoutSize = 0;\r\n        this._crossAxisLayoutOffset = 0;\r\n        this._alignItemsSetting = null;\r\n        this._recursiveResizeOccured = false;\r\n        this._isCrossAxisFitToContents = false;\r\n    }\r\n\r\n    get _layout() {\r\n        return this._line._layout;\r\n    }\r\n\r\n    get _flexContainer() {\r\n        return this._layout._flexContainer;\r\n    }\r\n\r\n    setCrossAxisLayoutSize(size) {\r\n        this._crossAxisLayoutSize = size;\r\n    }\r\n\r\n    setCrossAxisLayoutOffset(offset) {\r\n        this._crossAxisLayoutOffset = offset;\r\n    }\r\n\r\n    align() {\r\n        this._alignItemsSetting = this._flexContainer.alignItems;\r\n\r\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\r\n\r\n        this._recursiveResizeOccured = false;\r\n        const items = this._line.items;\r\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\r\n            const item = items[i];\r\n            this._alignItem(item);\r\n        }\r\n    }\r\n\r\n    get recursiveResizeOccured() {\r\n        return this._recursiveResizeOccured;\r\n    }\r\n\r\n    _alignItem(item) {\r\n        const flexItem = item.flexItem;\r\n        let align = flexItem.alignSelf || this._alignItemsSetting;\r\n\r\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\r\n            align = \"flex-start\";\r\n        }\r\n\r\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\r\n            if (flexItem._hasRelCrossAxisSize()) {\r\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\r\n                flexItem._resetCrossAxisLayoutSize();\r\n            }\r\n        }\r\n\r\n        switch(align) {\r\n            case \"flex-start\":\r\n                this._alignItemFlexStart(flexItem);\r\n                break;\r\n            case \"flex-end\":\r\n                this._alignItemFlexEnd(flexItem);\r\n                break;\r\n            case \"center\":\r\n                this._alignItemFlexCenter(flexItem);\r\n                break;\r\n            case \"stretch\":\r\n                this._alignItemStretch(flexItem);\r\n                break;\r\n        }\r\n    }\r\n\r\n    _alignItemFlexStart(flexItem) {\r\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\r\n    }\r\n\r\n    _alignItemFlexEnd(flexItem) {\r\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\r\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\r\n    }\r\n\r\n    _alignItemFlexCenter(flexItem) {\r\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\r\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\r\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\r\n    }\r\n\r\n    _alignItemStretch(flexItem) {\r\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\r\n\r\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\r\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\r\n\r\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\r\n        if (crossAxisMinSizeSetting > 0) {\r\n            size = Math.max(size, crossAxisMinSizeSetting);\r\n        }\r\n\r\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\r\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\r\n        if (crossAxisMaxSizeSettingEnabled) {\r\n            size = Math.min(size, crossAxisMaxSizeSetting);\r\n        }\r\n\r\n        flexItem._resizeCrossAxis(size);\r\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\r\n\r\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\r\n        if (recursiveResize) {\r\n            // Recursive resize can happen when this flex item has the opposite direction than the container\r\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\r\n            // item may decrease. If it does so, we must re-justify-content the complete line.\r\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\r\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\r\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\r\n            // as slow layout or endless loops.\r\n            this._recursiveResizeOccured = true;\r\n        }\r\n    }\r\n\r\n    _preventStretch(flexItem) {\r\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\r\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\r\n        return hasFixedCrossAxisSize && !forceStretch;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SizeShrinker from \"./SizeShrinker.mjs\";\r\nimport SizeGrower from \"./SizeGrower.mjs\";\r\nimport ItemPositioner from \"./ItemPositioner.mjs\";\r\nimport ItemAligner from \"./ItemAligner.mjs\";\r\n\r\nexport default class LineLayout {\r\n\r\n    constructor(layout, startIndex, endIndex, availableSpace) {\r\n        this._layout = layout;\r\n        this.items = layout.items;\r\n        this.startIndex = startIndex;\r\n        this.endIndex = endIndex;\r\n        this._availableSpace = availableSpace;\r\n    }\r\n\r\n    performLayout() {\r\n        this._setItemSizes();\r\n        this.setItemPositions();\r\n        this._calcLayoutInfo();\r\n    }\r\n\r\n    _setItemSizes() {\r\n        if (this._availableSpace > 0) {\r\n            this._growItemSizes(this._availableSpace);\r\n        } else if (this._availableSpace < 0) {\r\n            this._shrinkItemSizes(-this._availableSpace);\r\n        }\r\n    }\r\n\r\n    _growItemSizes(amount) {\r\n        const grower = new SizeGrower(this);\r\n        grower.grow(amount);\r\n        this._availableSpace -= grower.getGrownSize();\r\n    }\r\n\r\n    _shrinkItemSizes(amount) {\r\n        const shrinker = new SizeShrinker(this);\r\n        shrinker.shrink(amount);\r\n        this._availableSpace += shrinker.getShrunkSize();\r\n    }\r\n\r\n    setItemPositions() {\r\n        const positioner = new ItemPositioner(this);\r\n        positioner.position();\r\n    }\r\n\r\n    createItemAligner() {\r\n        return new ItemAligner(this);\r\n    }\r\n\r\n    _calcLayoutInfo() {\r\n        this._calcCrossAxisMaxLayoutSize();\r\n    }\r\n\r\n    getMainAxisMinSize() {\r\n        let mainAxisMinSize = 0;\r\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\r\n            const item = this.items[i];\r\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\r\n        }\r\n        return mainAxisMinSize;\r\n    }\r\n    \r\n    get numberOfItems() {\r\n        return this.endIndex - this.startIndex + 1;\r\n    }\r\n\r\n    get crossAxisLayoutSize() {\r\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\r\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\r\n        if (shouldFitToContents) {\r\n            return this._crossAxisMaxLayoutSize;\r\n        } else {\r\n            return this._layout.crossAxisSize;\r\n        }\r\n    }\r\n\r\n    _calcCrossAxisMaxLayoutSize() {\r\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\r\n    }\r\n\r\n    _getCrossAxisMaxLayoutSize() {\r\n        let crossAxisMaxSize = 0;\r\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\r\n            const item = this.items[i];\r\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\r\n        }\r\n        return crossAxisMaxSize;\r\n    }\r\n\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport LineLayout from \"./line/LineLayout.mjs\";\r\n\r\n/**\r\n * Distributes items over layout lines.\r\n */\r\nexport default class LineLayouter {\r\n\r\n    constructor(layout) {\r\n        this._layout = layout;\r\n        this._mainAxisMinSize = -1;\r\n        this._crossAxisMinSize = -1;\r\n        this._mainAxisContentSize = 0;\r\n    }\r\n\r\n    get lines() {\r\n        return this._lines;\r\n    }\r\n\r\n    get mainAxisMinSize() {\r\n        if (this._mainAxisMinSize === -1) {\r\n            this._mainAxisMinSize = this._getMainAxisMinSize();\r\n        }\r\n        return this._mainAxisMinSize;\r\n    }\r\n\r\n    get crossAxisMinSize() {\r\n        if (this._crossAxisMinSize === -1) {\r\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\r\n        }\r\n        return this._crossAxisMinSize;\r\n    }\r\n\r\n    get mainAxisContentSize() {\r\n        return this._mainAxisContentSize;\r\n    }\r\n\r\n    layoutLines() {\r\n        this._setup();\r\n        const items = this._layout.items;\r\n        const wrap = this._layout.isWrapping();\r\n\r\n        let startIndex = 0;\r\n        let i;\r\n        const n = items.length;\r\n        for (i = 0; i < n; i++) {\r\n            const item = items[i];\r\n\r\n            this._layoutFlexItem(item);\r\n\r\n            // Get predicted main axis size.\r\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\r\n\r\n            if (wrap && (i > startIndex)) {\r\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\r\n                if (isOverflowing) {\r\n                    this._layoutLine(startIndex, i - 1);\r\n                    this._curMainAxisPos = 0;\r\n                    startIndex = i;\r\n                }\r\n            }\r\n\r\n            this._addToMainAxisPos(itemMainAxisSize);\r\n        }\r\n\r\n        if (startIndex < i) {\r\n            this._layoutLine(startIndex, i - 1);\r\n        }\r\n    }\r\n\r\n    _layoutFlexItem(item) {\r\n        if (item.isFlexEnabled()) {\r\n            item.flexLayout.updateTreeLayout();\r\n        } else {\r\n            item.flexItem._resetLayoutSize();\r\n        }\r\n    }\r\n\r\n    _setup() {\r\n        this._mainAxisSize = this._layout.mainAxisSize;\r\n        this._curMainAxisPos = 0;\r\n        this._maxMainAxisPos = 0;\r\n        this._lines = [];\r\n\r\n        this._mainAxisMinSize = -1;\r\n        this._crossAxisMinSize = -1;\r\n        this._mainAxisContentSize = 0;\r\n    }\r\n\r\n    _addToMainAxisPos(itemMainAxisSize) {\r\n        this._curMainAxisPos += itemMainAxisSize;\r\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\r\n            this._maxMainAxisPos = this._curMainAxisPos;\r\n        }\r\n    }\r\n\r\n    _layoutLine(startIndex, endIndex) {\r\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\r\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\r\n        line.performLayout();\r\n        this._lines.push(line);\r\n\r\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\r\n            this._mainAxisContentSize = this._curMainAxisPos;\r\n        }\r\n    }\r\n\r\n    _getAvailableMainAxisLayoutSpace() {\r\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\r\n            return 0;\r\n        } else {\r\n            return this._mainAxisSize - this._curMainAxisPos;\r\n        }\r\n    }\r\n\r\n    _getCrossAxisMinSize() {\r\n        let crossAxisMinSize = 0;\r\n        const items = this._layout.items;\r\n        for (let i = 0, n = items.length; i < n; i++) {\r\n            const item = items[i];\r\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\r\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\r\n        }\r\n        return crossAxisMinSize;\r\n    }\r\n\r\n    _getMainAxisMinSize() {\r\n        if (this._lines.length === 1) {\r\n            return this._lines[0].getMainAxisMinSize();\r\n        } else {\r\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\r\n            return this._layout.mainAxisSize;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport FlexUtils from \"../FlexUtils.mjs\";\r\n\r\nexport default class ItemCoordinatesUpdater {\r\n\r\n    constructor(layout) {\r\n        this._layout = layout;\r\n        this._isReverse = this._flexContainer._reverse;\r\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\r\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\r\n    }\r\n\r\n    get _flexContainer() {\r\n        return this._layout._flexContainer;\r\n    }\r\n\r\n    finalize() {\r\n        const parentFlex = this._layout.getParentFlexContainer();\r\n        if (parentFlex) {\r\n            // We must update it from the parent to set padding offsets and reverse position.\r\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\r\n            updater._finalizeItemAndChildren(this._flexContainer.item);\r\n        } else {\r\n            this._finalizeRoot();\r\n            this._finalizeItems();\r\n        }\r\n    }\r\n\r\n    _finalizeRoot() {\r\n        const item = this._flexContainer.item;\r\n        let x = FlexUtils.getAxisLayoutPos(item, true);\r\n        let y = FlexUtils.getAxisLayoutPos(item, false);\r\n        let w = FlexUtils.getAxisLayoutSize(item, true);\r\n        let h = FlexUtils.getAxisLayoutSize(item, false);\r\n\r\n        w += this._layout._getHorizontalPadding();\r\n        h += this._layout._getVerticalPadding();\r\n\r\n        item.clearRecalcFlag();\r\n\r\n        item.setLayout(x, y, w, h);\r\n    }\r\n\r\n    _finalizeItems() {\r\n        const items = this._layout.items;\r\n        for (let i = 0, n = items.length; i < n; i++) {\r\n            const item = items[i];\r\n            const validCache = this._validateItemCache(item);\r\n\r\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\r\n            this._finalizeItem(item);\r\n\r\n            if (!validCache) {\r\n                this._finalizeItemChildren(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    _validateItemCache(item) {\r\n        if (item.recalc === 0) {\r\n            if (item.isFlexEnabled()) {\r\n                const layout = item._flex._layout;\r\n\r\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\r\n                if (dimensionsMatchPreviousResult) {\r\n                    // Cache is valid.\r\n                    return true;\r\n                } else {\r\n                    const crossAxisSize = layout.crossAxisSize;\r\n                    layout.performResizeMainAxis(layout.mainAxisSize);\r\n                    layout.performResizeCrossAxis(crossAxisSize);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _finalizeItemAndChildren(item) {\r\n        this._finalizeItem(item);\r\n        this._finalizeItemChildren(item);\r\n    }\r\n\r\n    _finalizeItem(item) {\r\n        if (this._isReverse) {\r\n            this._reverseMainAxisLayoutPos(item);\r\n        }\r\n\r\n        let x = FlexUtils.getAxisLayoutPos(item, true);\r\n        let y = FlexUtils.getAxisLayoutPos(item, false);\r\n        let w = FlexUtils.getAxisLayoutSize(item, true);\r\n        let h = FlexUtils.getAxisLayoutSize(item, false);\r\n\r\n        x += this._horizontalPaddingOffset;\r\n        y += this._verticalPaddingOffset;\r\n\r\n        const flex = item.flex;\r\n        if (flex) {\r\n            w += item._flex._layout._getHorizontalPadding();\r\n            h += item._flex._layout._getVerticalPadding();\r\n        }\r\n\r\n        const flexItem = item.flexItem;\r\n        if (flexItem) {\r\n            x += flexItem._getHorizontalMarginOffset();\r\n            y += flexItem._getVerticalMarginOffset();\r\n        }\r\n\r\n        item.clearRecalcFlag();\r\n        item.setLayout(x, y, w, h);\r\n    }\r\n\r\n    _finalizeItemChildren(item) {\r\n        const flex = item._flex;\r\n        if (flex) {\r\n            const updater = new ItemCoordinatesUpdater(flex._layout);\r\n            updater._finalizeItems();\r\n        }\r\n    }\r\n\r\n    _reverseMainAxisLayoutPos(item) {\r\n        if (item._reversed && item._recalc == 0) {\r\n            item._reversed = false;\r\n        }\r\n        if (!item._reversed) {\r\n            const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\r\n            const reversedPos = this._layout.mainAxisSize - endPos;\r\n            item.flexItem._setMainAxisLayoutPos(reversedPos);\r\n            if (item._recalc != 0) {\r\n                item._reversed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport ContentAligner from \"./ContentAligner.mjs\";\r\nimport FlexUtils from \"../FlexUtils.mjs\";\r\nimport LineLayouter from \"./LineLayouter.mjs\";\r\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\r\n\r\n/**\r\n * Layouts a flex container (and descendants).\r\n */\r\nexport default class FlexLayout {\r\n\r\n    constructor(flexContainer) {\r\n        this._flexContainer = flexContainer;\r\n\r\n        this._lineLayouter = new LineLayouter(this);\r\n\r\n        this._resizingMainAxis = false;\r\n        this._resizingCrossAxis = false;\r\n\r\n        this._cachedMainAxisSizeAfterLayout = 0;\r\n        this._cachedCrossAxisSizeAfterLayout = 0;\r\n\r\n        this._shrunk = false;\r\n    }\r\n\r\n    get shrunk() {\r\n        return this._shrunk;\r\n    }\r\n\r\n    get recalc() {\r\n        return this.item.recalc;\r\n    }\r\n\r\n    layoutTree() {\r\n        const isSubTree = (this.item.flexParent !== null);\r\n        if (isSubTree) {\r\n            // Use the dimensions set by the parent flex tree.\r\n            this._updateSubTreeLayout();\r\n        } else {\r\n            this.updateTreeLayout();\r\n        }\r\n        this.updateItemCoords();\r\n    }\r\n\r\n    updateTreeLayout() {\r\n        if (this.recalc) {\r\n            this._performUpdateLayoutTree();\r\n        } else {\r\n            this._performUpdateLayoutTreeFromCache();\r\n        }\r\n    }\r\n\r\n    _performUpdateLayoutTree() {\r\n        this._setInitialAxisSizes();\r\n        this._layoutAxes();\r\n        this._refreshLayoutCache();\r\n    }\r\n\r\n    _refreshLayoutCache() {\r\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\r\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\r\n    }\r\n\r\n    _performUpdateLayoutTreeFromCache() {\r\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\r\n        if (sizeMightHaveChanged) {\r\n            // Update after all.\r\n            this.item.enableLocalRecalcFlag();\r\n            this._performUpdateLayoutTree();\r\n        } else {\r\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\r\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\r\n        }\r\n    }\r\n\r\n    updateItemCoords() {\r\n        const updater = new ItemCoordinatesUpdater(this);\r\n        updater.finalize();\r\n    }\r\n\r\n    _updateSubTreeLayout() {\r\n        // The dimensions of this container are guaranteed not to have changed.\r\n        // That's why we can safely 'reuse' those and re-layout the contents.\r\n        const crossAxisSize = this.crossAxisSize;\r\n        this._layoutMainAxis();\r\n        this.performResizeCrossAxis(crossAxisSize);\r\n    }\r\n\r\n    _setInitialAxisSizes() {\r\n        if (this.item.isFlexItemEnabled()) {\r\n            this.item.flexItem._resetLayoutSize();\r\n        } else {\r\n            this.mainAxisSize = this._getMainAxisBasis();\r\n            this.crossAxisSize = this._getCrossAxisBasis();\r\n        }\r\n        this._resizingMainAxis = false;\r\n        this._resizingCrossAxis = false;\r\n        this._shrunk = false;\r\n    }\r\n\r\n    _layoutAxes() {\r\n        this._layoutMainAxis();\r\n        this._layoutCrossAxis();\r\n    }\r\n\r\n    /**\r\n     * @pre mainAxisSize should exclude padding.\r\n     */\r\n    _layoutMainAxis() {\r\n        this._layoutLines();\r\n        this._fitMainAxisSizeToContents();\r\n    }\r\n\r\n    _layoutLines() {\r\n        this._lineLayouter.layoutLines();\r\n    }\r\n\r\n    get _lines() {\r\n        return this._lineLayouter.lines;\r\n    }\r\n\r\n    _fitMainAxisSizeToContents() {\r\n        if (!this._resizingMainAxis) {\r\n            if (this.isMainAxisFitToContents()) {\r\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @pre crossAxisSize should exclude padding.\r\n     */\r\n    _layoutCrossAxis() {\r\n        const aligner = new ContentAligner(this);\r\n        aligner.init();\r\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\r\n        this._fitCrossAxisSizeToContents();\r\n        aligner.align();\r\n    }\r\n\r\n    _fitCrossAxisSizeToContents() {\r\n        if (!this._resizingCrossAxis) {\r\n            if (this.isCrossAxisFitToContents()) {\r\n                this.crossAxisSize = this._totalCrossAxisSize;\r\n            }\r\n        }\r\n    }\r\n\r\n    isWrapping() {\r\n        return this._flexContainer.wrap;\r\n    }\r\n\r\n    isAxisFitToContents(horizontal) {\r\n        if (this._horizontal === horizontal) {\r\n            return this.isMainAxisFitToContents();\r\n        } else {\r\n            return this.isCrossAxisFitToContents();\r\n        }\r\n    }\r\n\r\n    isMainAxisFitToContents() {\r\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\r\n    }\r\n\r\n    isCrossAxisFitToContents() {\r\n        return !this._hasFixedCrossAxisBasis();\r\n    }\r\n\r\n    _hasFixedMainAxisBasis() {\r\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\r\n    }\r\n\r\n    _hasFixedCrossAxisBasis() {\r\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\r\n    }\r\n\r\n    getAxisMinSize(horizontal) {\r\n        if (this._horizontal === horizontal) {\r\n            return this._getMainAxisMinSize();\r\n        } else {\r\n            return this._getCrossAxisMinSize();\r\n        }\r\n    }\r\n\r\n    _getMainAxisMinSize() {\r\n        return this._lineLayouter.mainAxisMinSize;\r\n    }\r\n\r\n    _getCrossAxisMinSize() {\r\n        return this._lineLayouter.crossAxisMinSize;\r\n    }\r\n\r\n    resizeMainAxis(size) {\r\n        if (this.mainAxisSize !== size) {\r\n            if (this.recalc > 0) {\r\n                this.performResizeMainAxis(size);\r\n            } else {\r\n                if (this._checkValidCacheMainAxisResize()) {\r\n                    this.mainAxisSize = size;\r\n                    this._fitCrossAxisSizeToContents();\r\n                } else {\r\n                    // Cache miss.\r\n                    this.item.enableLocalRecalcFlag();\r\n                    this.performResizeMainAxis(size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkValidCacheMainAxisResize(size) {\r\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\r\n        if (isFinalMainAxisSize) {\r\n            return true;\r\n        }\r\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\r\n        if (canIgnoreCacheMiss) {\r\n            // Allow other main axis resizes and check if final resize matches the target main axis size\r\n            //  (ItemCoordinatesUpdater).\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    performResizeMainAxis(size) {\r\n        const isShrinking = (size < this.mainAxisSize);\r\n        this._shrunk = isShrinking;\r\n\r\n        this.mainAxisSize = size;\r\n\r\n        this._resizingMainAxis = true;\r\n        this._layoutAxes();\r\n        this._resizingMainAxis = false;\r\n    }\r\n\r\n    resizeCrossAxis(size) {\r\n        if (this.crossAxisSize !== size) {\r\n            if (this.recalc > 0) {\r\n                this.performResizeCrossAxis(size);\r\n            } else {\r\n                this.crossAxisSize = size;\r\n            }\r\n        }\r\n    }\r\n\r\n    performResizeCrossAxis(size) {\r\n        this.crossAxisSize = size;\r\n\r\n        this._resizingCrossAxis = true;\r\n        this._layoutCrossAxis();\r\n        this._resizingCrossAxis = false;\r\n    }\r\n\r\n    get targetMainAxisSize() {\r\n        return this._horizontal ? this.item.target.w : this.item.target.h;\r\n    }\r\n\r\n    get targetCrossAxisSize() {\r\n        return this._horizontal ? this.item.target.h : this.item.target.w;\r\n    }\r\n\r\n    getParentFlexContainer() {\r\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\r\n    }\r\n\r\n    _getHorizontalPadding() {\r\n        return FlexUtils.getTotalPadding(this.item, true);\r\n    }\r\n\r\n    _getVerticalPadding() {\r\n        return FlexUtils.getTotalPadding(this.item, false);\r\n    }\r\n\r\n    _getHorizontalPaddingOffset() {\r\n        return FlexUtils.getPaddingOffset(this.item, true);\r\n    }\r\n\r\n    _getVerticalPaddingOffset() {\r\n        return FlexUtils.getPaddingOffset(this.item, false);\r\n    }\r\n\r\n    _getMainAxisBasis() {\r\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\r\n    }\r\n\r\n    _getCrossAxisBasis() {\r\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\r\n    }\r\n\r\n    get _horizontal() {\r\n        return this._flexContainer._horizontal;\r\n    }\r\n\r\n    get _reverse() {\r\n        return this._flexContainer._reverse;\r\n    }\r\n\r\n    get item() {\r\n        return this._flexContainer.item;\r\n    }\r\n\r\n    get items() {\r\n        return this.item.items;\r\n    }\r\n\r\n    get resizingMainAxis() {\r\n        return this._resizingMainAxis;\r\n    }\r\n\r\n    get resizingCrossAxis() {\r\n        return this._resizingCrossAxis;\r\n    }\r\n\r\n    get numberOfItems() {\r\n        return this.items.length;\r\n    }\r\n\r\n    get mainAxisSize() {\r\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\r\n    }\r\n\r\n    get crossAxisSize() {\r\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\r\n    }\r\n\r\n    set mainAxisSize(v) {\r\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\r\n    }\r\n\r\n    set crossAxisSize(v) {\r\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Base from \"../tree/Base.mjs\";\r\nimport Layout from \"./layout/FlexLayout.mjs\";\r\n\r\nexport default class FlexContainer {\r\n\r\n\r\n    constructor(item) {\r\n        this._item = item;\r\n\r\n        this._layout = new Layout(this);\r\n        this._horizontal = true;\r\n        this._reverse = false;\r\n        this._wrap = false;\r\n        this._alignItems = 'stretch';\r\n        this._justifyContent = 'flex-start';\r\n        this._alignContent = 'flex-start';\r\n\r\n        this._paddingLeft = 0;\r\n        this._paddingTop = 0;\r\n        this._paddingRight = 0;\r\n        this._paddingBottom = 0;\r\n    }\r\n\r\n    get item() {\r\n        return this._item;\r\n    }\r\n\r\n    _changedDimensions() {\r\n        this._item.changedDimensions();\r\n    }\r\n\r\n    _changedContents() {\r\n        this._item.changedContents();\r\n    }\r\n\r\n    get direction() {\r\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\r\n    }\r\n\r\n    set direction(f) {\r\n        if (this.direction === f) return;\r\n\r\n        this._horizontal = (f === 'row' || f === 'row-reverse');\r\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\r\n\r\n        this._changedContents();\r\n    }\r\n\r\n    set wrap(v) {\r\n        this._wrap = v;\r\n        this._changedContents();\r\n    }\r\n\r\n    get wrap() {\r\n        return this._wrap;\r\n    }\r\n\r\n    get alignItems() {\r\n        return this._alignItems;\r\n    }\r\n\r\n    set alignItems(v) {\r\n        if (this._alignItems === v) return;\r\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\r\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\r\n        }\r\n        this._alignItems = v;\r\n\r\n        this._changedContents();\r\n    }\r\n\r\n    get alignContent() {\r\n        return this._alignContent;\r\n    }\r\n\r\n    set alignContent(v) {\r\n        if (this._alignContent === v) return;\r\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\r\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\r\n        }\r\n        this._alignContent = v;\r\n\r\n        this._changedContents();\r\n    }\r\n\r\n    get justifyContent() {\r\n        return this._justifyContent;\r\n    }\r\n\r\n    set justifyContent(v) {\r\n        if (this._justifyContent === v) return;\r\n\r\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\r\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\r\n        }\r\n        this._justifyContent = v;\r\n\r\n        this._changedContents();\r\n    }\r\n\r\n    set padding(v) {\r\n        this.paddingLeft = v;\r\n        this.paddingTop = v;\r\n        this.paddingRight = v;\r\n        this.paddingBottom = v;\r\n    }\r\n\r\n    get padding() {\r\n        return this.paddingLeft;\r\n    }\r\n    \r\n    set paddingLeft(v) {\r\n        this._paddingLeft = v;\r\n        this._changedDimensions();\r\n    }\r\n    \r\n    get paddingLeft() {\r\n        return this._paddingLeft;\r\n    }\r\n\r\n    set paddingTop(v) {\r\n        this._paddingTop = v;\r\n        this._changedDimensions();\r\n    }\r\n\r\n    get paddingTop() {\r\n        return this._paddingTop;\r\n    }\r\n\r\n    set paddingRight(v) {\r\n        this._paddingRight = v;\r\n        this._changedDimensions();\r\n    }\r\n\r\n    get paddingRight() {\r\n        return this._paddingRight;\r\n    }\r\n\r\n    set paddingBottom(v) {\r\n        this._paddingBottom = v;\r\n        this._changedDimensions();\r\n    }\r\n\r\n    get paddingBottom() {\r\n        return this._paddingBottom;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n}\r\n\r\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\r\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\r\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Base from \"../tree/Base.mjs\";\r\nimport FlexUtils from \"./FlexUtils.mjs\";\r\nimport FlexContainer from \"./FlexContainer.mjs\";\r\n\r\nexport default class FlexItem {\r\n\r\n    constructor(item) {\r\n        this._ctr = null;\r\n        this._item = item;\r\n        this._grow = 0;\r\n        this._shrink = FlexItem.SHRINK_AUTO;\r\n        this._alignSelf = undefined;\r\n        this._minWidth = 0;\r\n        this._minHeight = 0;\r\n        this._maxWidth = 0;\r\n        this._maxHeight = 0;\r\n\r\n        this._marginLeft = 0;\r\n        this._marginTop = 0;\r\n        this._marginRight = 0;\r\n        this._marginBottom = 0;\r\n        this._reversed = false;\r\n    }\r\n\r\n    get item() {\r\n        return this._item;\r\n    }\r\n\r\n    get grow() {\r\n        return this._grow;\r\n    }\r\n\r\n    set grow(v) {\r\n        if (this._grow === v) return;\r\n\r\n        this._grow = parseInt(v) || 0;\r\n\r\n        this._changed();\r\n    }\r\n\r\n    get shrink() {\r\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\r\n            return this._getDefaultShrink();\r\n        }\r\n        return this._shrink;\r\n    }\r\n\r\n    _getDefaultShrink() {\r\n        if (this.item.isFlexEnabled()) {\r\n            return 1;\r\n        } else {\r\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    set shrink(v) {\r\n        if (this._shrink === v) return;\r\n\r\n        this._shrink = parseInt(v) || 0;\r\n\r\n        this._changed();\r\n    }\r\n\r\n    get alignSelf() {\r\n        return this._alignSelf;\r\n    }\r\n\r\n    set alignSelf(v) {\r\n        if (this._alignSelf === v) return;\r\n\r\n        if (v === undefined) {\r\n            this._alignSelf = undefined;\r\n        } else {\r\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\r\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\r\n            }\r\n            this._alignSelf = v;\r\n        }\r\n\r\n        this._changed();\r\n    }\r\n\r\n    get minWidth() {\r\n        return this._minWidth;\r\n    }\r\n\r\n    set minWidth(v) {\r\n        this._minWidth = Math.max(0, v);\r\n        this._item.changedDimensions(true, false);\r\n    }\r\n\r\n    get minHeight() {\r\n        return this._minHeight;\r\n    }\r\n\r\n    set minHeight(v) {\r\n        this._minHeight = Math.max(0, v);\r\n        this._item.changedDimensions(false, true);\r\n    }\r\n\r\n    get maxWidth() {\r\n        return this._maxWidth;\r\n    }\r\n\r\n    set maxWidth(v) {\r\n        this._maxWidth = Math.max(0, v);\r\n        this._item.changedDimensions(true, false);\r\n    }\r\n\r\n    get maxHeight() {\r\n        return this._maxHeight;\r\n    }\r\n\r\n    set maxHeight(v) {\r\n        this._maxHeight = Math.max(0, v);\r\n        this._item.changedDimensions(false, true);\r\n    }\r\n\r\n    /**\r\n     * @note margins behave slightly different than in HTML with regard to shrinking.\r\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\r\n     */\r\n    set margin(v) {\r\n        this.marginLeft = v;\r\n        this.marginTop = v;\r\n        this.marginRight = v;\r\n        this.marginBottom = v;\r\n    }\r\n\r\n    get margin() {\r\n        return this.marginLeft;\r\n    }\r\n\r\n    set marginLeft(v) {\r\n        this._marginLeft = v;\r\n        this._changed();\r\n    }\r\n\r\n    get marginLeft() {\r\n        return this._marginLeft;\r\n    }\r\n\r\n    set marginTop(v) {\r\n        this._marginTop = v;\r\n        this._changed();\r\n    }\r\n\r\n    get marginTop() {\r\n        return this._marginTop;\r\n    }\r\n\r\n    set marginRight(v) {\r\n        this._marginRight = v;\r\n        this._changed();\r\n    }\r\n\r\n    get marginRight() {\r\n        return this._marginRight;\r\n    }\r\n\r\n    set marginBottom(v) {\r\n        this._marginBottom = v;\r\n        this._changed();\r\n    }\r\n\r\n    get marginBottom() {\r\n        return this._marginBottom;\r\n    }\r\n    \r\n    _changed() {\r\n        if (this.ctr) this.ctr._changedContents();\r\n    }\r\n\r\n    set ctr(v) {\r\n        this._ctr = v;\r\n    }\r\n\r\n    get ctr() {\r\n        return this._ctr;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n    _resetLayoutSize() {\r\n        this._resetHorizontalAxisLayoutSize();\r\n        this._resetVerticalAxisLayoutSize();\r\n    }\r\n\r\n    _resetCrossAxisLayoutSize() {\r\n        if (this.ctr._horizontal) {\r\n            this._resetVerticalAxisLayoutSize();\r\n        } else {\r\n            this._resetHorizontalAxisLayoutSize();\r\n        }\r\n    }\r\n\r\n    _resetHorizontalAxisLayoutSize() {\r\n        let w = FlexUtils.getRelAxisSize(this.item, true);\r\n        if (this._minWidth) {\r\n            w = Math.max(this._minWidth, w);\r\n        }\r\n        if (this._maxWidth) {\r\n            w = Math.min(this._maxWidth, w);\r\n        }\r\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\r\n    }\r\n\r\n    _resetVerticalAxisLayoutSize() {\r\n        let h = FlexUtils.getRelAxisSize(this.item, false);\r\n        if (this._minHeight) {\r\n            h = Math.max(this._minHeight, h);\r\n        }\r\n        if (this._maxHeight) {\r\n            h = Math.min(this._maxHeight, h);\r\n        }\r\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\r\n    }\r\n\r\n    _getCrossAxisMinSizeSetting() {\r\n        return this._getMinSizeSetting(!this.ctr._horizontal);\r\n    }\r\n\r\n    _getCrossAxisMaxSizeSetting() {\r\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\r\n    }\r\n\r\n    _getMainAxisMaxSizeSetting() {\r\n        return this._getMaxSizeSetting(this.ctr._horizontal);\r\n    }\r\n\r\n    _getMinSizeSetting(horizontal) {\r\n        if (horizontal) {\r\n            return this._minWidth;\r\n        } else {\r\n            return this._minHeight;\r\n        }\r\n    }\r\n\r\n    _getMaxSizeSetting(horizontal) {\r\n        if (horizontal) {\r\n            return this._maxWidth;\r\n        } else {\r\n            return this._maxHeight;\r\n        }\r\n    }\r\n\r\n    _getMainAxisMinSize() {\r\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\r\n    }\r\n\r\n    _getCrossAxisMinSize() {\r\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\r\n    }\r\n\r\n    _getMainAxisLayoutSize() {\r\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\r\n    }\r\n\r\n    _getMainAxisLayoutPos() {\r\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\r\n    }\r\n\r\n    _setMainAxisLayoutPos(pos) {\r\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\r\n    }\r\n\r\n    _setCrossAxisLayoutPos(pos) {\r\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\r\n    }\r\n\r\n    _getCrossAxisLayoutSize() {\r\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\r\n    }\r\n\r\n    _resizeCrossAxis(size) {\r\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\r\n    }\r\n\r\n    _resizeMainAxis(size) {\r\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\r\n    }\r\n\r\n    _getMainAxisPadding() {\r\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\r\n    }\r\n\r\n    _getCrossAxisPadding() {\r\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\r\n    }\r\n\r\n    _getMainAxisMargin() {\r\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\r\n    }\r\n\r\n    _getCrossAxisMargin() {\r\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\r\n    }\r\n\r\n    _getHorizontalMarginOffset() {\r\n        return FlexUtils.getMarginOffset(this.item, true);\r\n    }\r\n\r\n    _getVerticalMarginOffset() {\r\n        return FlexUtils.getMarginOffset(this.item, false);\r\n    }\r\n\r\n    _getMainAxisMinSizeWithPaddingAndMargin() {\r\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\r\n    }\r\n\r\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\r\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\r\n    }\r\n\r\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\r\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\r\n    }\r\n\r\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\r\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\r\n    }\r\n\r\n    _hasFixedCrossAxisSize() {\r\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\r\n    }\r\n\r\n    _hasRelCrossAxisSize() {\r\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\r\n    }\r\n\r\n}\r\n\r\n\r\nFlexItem.SHRINK_AUTO = -1;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport FlexContainer from \"./FlexContainer.mjs\";\r\nimport FlexItem from \"./FlexItem.mjs\";\r\nimport FlexUtils from \"./FlexUtils.mjs\";\r\n\r\n/**\r\n * This is the connection between the render tree with the layout tree of this flex container/item.\r\n */\r\nexport default class FlexTarget {\r\n\r\n    constructor(target) {\r\n        this._target = target;\r\n\r\n        /**\r\n         * Possible values (only in case of container):\r\n         * bit 0: has changed or contains items with changes\r\n         * bit 1: width changed\r\n         * bit 2: height changed\r\n         */\r\n        this._recalc = 0;\r\n        \r\n        this._enabled = false;\r\n\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.w = 0;\r\n        this.h = 0;\r\n\r\n        this._originalX = 0;\r\n        this._originalY = 0;\r\n        this._originalWidth = 0;\r\n        this._originalHeight = 0;\r\n\r\n        this._flex = null;\r\n        this._flexItem = null;\r\n        this._flexItemDisabled = false;\r\n\r\n        this._items = null;\r\n    }\r\n\r\n    get flexLayout() {\r\n        return this.flex ? this.flex._layout : null;\r\n    }\r\n\r\n    layoutFlexTree() {\r\n        if (this.isFlexEnabled() && this.isChanged()) {\r\n            this.flexLayout.layoutTree();\r\n        }\r\n    }\r\n\r\n    get target() {\r\n        return this._target;\r\n    }\r\n\r\n    get flex() {\r\n        return this._flex;\r\n    }\r\n\r\n    set flex(v) {\r\n        if (!v) {\r\n            if (this.isFlexEnabled()) {\r\n                this._disableFlex();\r\n            }\r\n        } else {\r\n            if (!this.isFlexEnabled()) {\r\n                this._enableFlex();\r\n            }\r\n            this._flex.patch(v);\r\n        }\r\n    }\r\n\r\n    get flexItem() {\r\n        if (this._flexItemDisabled) {\r\n            return false;\r\n        }\r\n        this._ensureFlexItem();\r\n        return this._flexItem;\r\n    }\r\n\r\n    set flexItem(v) {\r\n        if (v === false) {\r\n            if (!this._flexItemDisabled) {\r\n                const parent = this.flexParent;\r\n                this._flexItemDisabled = true;\r\n                this._checkEnabled();\r\n                if (parent) {\r\n                    parent._clearFlexItemsCache();\r\n                    parent.changedContents();\r\n                }\r\n            }\r\n        } else {\r\n            this._ensureFlexItem();\r\n\r\n            this._flexItem.patch(v);\r\n\r\n            if (this._flexItemDisabled) {\r\n                this._flexItemDisabled = false;\r\n                this._checkEnabled();\r\n                const parent = this.flexParent;\r\n                if (parent) {\r\n                    parent._clearFlexItemsCache();\r\n                    parent.changedContents();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _enableFlex() {\r\n        this._flex = new FlexContainer(this);\r\n        this._checkEnabled();\r\n        this.changedDimensions();\r\n        this._enableChildrenAsFlexItems();\r\n    }\r\n\r\n    _disableFlex() {\r\n        this.changedDimensions();\r\n        this._flex = null;\r\n        this._checkEnabled();\r\n        this._disableChildrenAsFlexItems();\r\n    }\r\n\r\n    _enableChildrenAsFlexItems() {\r\n        const children = this._target._children;\r\n        if (children) {\r\n            for (let i = 0, n = children.length; i < n; i++) {\r\n                const child = children[i];\r\n                child.layout._enableFlexItem();\r\n            }\r\n        }\r\n    }\r\n\r\n    _disableChildrenAsFlexItems() {\r\n        const children = this._target._children;\r\n        if (children) {\r\n            for (let i = 0, n = children.length; i < n; i++) {\r\n                const child = children[i];\r\n                child.layout._disableFlexItem();\r\n            }\r\n        }\r\n    }\r\n\r\n    _enableFlexItem() {\r\n        this._ensureFlexItem();\r\n        const flexParent = this._target._parent._layout;\r\n        this._flexItem.ctr = flexParent._flex;\r\n        flexParent.changedContents();\r\n        this._checkEnabled();\r\n    }\r\n\r\n    _disableFlexItem() {\r\n        if (this._flexItem) {\r\n            this._flexItem.ctr = null;\r\n        }\r\n\r\n        // We keep the flexItem object because it may contain custom settings.\r\n        this._checkEnabled();\r\n\r\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\r\n        this._resetOffsets();\r\n    }\r\n\r\n    _resetOffsets() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    _ensureFlexItem() {\r\n        if (!this._flexItem) {\r\n            this._flexItem = new FlexItem(this);\r\n        }\r\n    }\r\n\r\n    _checkEnabled() {\r\n        const enabled = this.isEnabled();\r\n        if (this._enabled !== enabled) {\r\n            if (enabled) {\r\n                this._enable();\r\n            } else {\r\n                this._disable();\r\n            }\r\n            this._enabled = enabled;\r\n        }\r\n    }\r\n    \r\n    _enable() {\r\n        this._setupTargetForFlex();\r\n        this._target.enableFlexLayout();\r\n    }\r\n\r\n    _disable() {\r\n        this._restoreTargetToNonFlex();\r\n        this._target.disableFlexLayout();\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\r\n    }\r\n\r\n    isFlexEnabled() {\r\n        return this._flex !== null;\r\n    }\r\n\r\n    isFlexItemEnabled() {\r\n        return this.flexParent !== null;\r\n    }\r\n\r\n    _restoreTargetToNonFlex() {\r\n        const target = this._target;\r\n        target.x = this._originalX;\r\n        target.y = this._originalY;\r\n        target.setDimensions(this._originalWidth, this._originalHeight);\r\n    }\r\n\r\n    _setupTargetForFlex() {\r\n        const target = this._target;\r\n        this._originalX = target._x;\r\n        this._originalY = target._y;\r\n        this._originalWidth = target._w;\r\n        this._originalHeight = target._h;\r\n    }\r\n    \r\n    setParent(from, to) {\r\n        if (from && from.isFlexContainer()) {\r\n            from._layout._changedChildren();\r\n        }\r\n\r\n        if (to && to.isFlexContainer()) {\r\n            this._enableFlexItem();\r\n            to._layout._changedChildren();\r\n        }\r\n        this._checkEnabled();\r\n    }\r\n\r\n    get flexParent() {\r\n        if (this._flexItemDisabled) {\r\n            return null;\r\n        }\r\n\r\n        const parent = this._target._parent;\r\n        if (parent && parent.isFlexContainer()) {\r\n            return parent._layout;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setVisible(v) {\r\n        const parent = this.flexParent;\r\n        if (parent) {\r\n            parent._changedChildren();\r\n        }\r\n    }\r\n\r\n    get items() {\r\n        if (!this._items) {\r\n            this._items = this._getFlexItems();\r\n        }\r\n        return this._items;\r\n    }\r\n\r\n    _getFlexItems() {\r\n        const items = [];\r\n        const children = this._target._children;\r\n        if (children) {\r\n            for (let i = 0, n = children.length; i < n; i++) {\r\n                const item = children[i];\r\n                if (item.visible) {\r\n                    if (item.isFlexItem()) {\r\n                        items.push(item.layout);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    _changedChildren() {\r\n        this._clearFlexItemsCache();\r\n        this.changedContents();\r\n    }\r\n\r\n    _clearFlexItemsCache() {\r\n        this._items = null;\r\n    }\r\n\r\n    setLayout(x, y, w, h) {\r\n        let originalX = this._originalX;\r\n        let originalY = this._originalY;\r\n        if (this.funcX) {\r\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\r\n        }\r\n        if (this.funcY) {\r\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\r\n        }\r\n\r\n        if (this.isFlexItemEnabled()) {\r\n            this.target.setLayout(x + originalX, y + originalY, w, h);\r\n        } else {\r\n            // Reuse the x,y 'settings'.\r\n            this.target.setLayout(originalX, originalY, w, h);\r\n        }\r\n    }\r\n\r\n    changedDimensions(changeWidth = true, changeHeight = true) {\r\n        this._updateRecalc(changeWidth, changeHeight);\r\n    }\r\n\r\n    changedContents() {\r\n        this._updateRecalc();\r\n    }\r\n\r\n    forceLayout() {\r\n        this._updateRecalc();\r\n    }\r\n\r\n    isChanged() {\r\n        return this._recalc > 0;\r\n    }\r\n\r\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\r\n        if (this.isFlexEnabled()) {\r\n            const layout = this._flex._layout;\r\n\r\n            // When something internal changes, it can have effect on the external dimensions.\r\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\r\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\r\n        }\r\n\r\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\r\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\r\n        this._recalc |= recalc;\r\n        if (newRecalcFlags > 1) {\r\n            if (this.flexParent) {\r\n                this.flexParent._updateRecalcBottomUp(recalc);\r\n            } else {\r\n                this._target.triggerLayout();\r\n            }\r\n        } else {\r\n            this._target.triggerLayout();\r\n        }\r\n    }\r\n\r\n    getNewRecalcFlags(flags) {\r\n        return (7 - this._recalc) & flags;\r\n    }\r\n\r\n    _updateRecalcBottomUp(childRecalc) {\r\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\r\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\r\n        this._recalc |= newRecalc;\r\n        if (newRecalcFlags > 1) {\r\n            const flexParent = this.flexParent;\r\n            if (flexParent) {\r\n                flexParent._updateRecalcBottomUp(newRecalc);\r\n            } else {\r\n                this._target.triggerLayout();\r\n            }\r\n        } else {\r\n            this._target.triggerLayout();\r\n        }\r\n    }\r\n\r\n    _getRecalcFromChangedChildRecalc(childRecalc) {\r\n        const layout = this._flex._layout;\r\n\r\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\r\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\r\n\r\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\r\n        if (!crossAxisDimensionsChangedInChild) {\r\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\r\n            if (mainAxisDimensionsChangedInChild) {\r\n                const mainAxisIsWrapping = layout.isWrapping();\r\n                if (mainAxisIsWrapping) {\r\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\r\n                    if (crossAxisIsFitToContents) {\r\n                        // Special case: due to wrapping, the cross axis size may be changed.\r\n                        childRecalc += crossAxisRecalcFlag;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let isWidthDynamic = layout.isAxisFitToContents(true);\r\n        let isHeightDynamic = layout.isAxisFitToContents(false);\r\n\r\n        if (layout.shrunk) {\r\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\r\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\r\n            if (layout._horizontal) {\r\n                isWidthDynamic = true;\r\n            } else {\r\n                isHeightDynamic = true;\r\n            }\r\n        }\r\n\r\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\r\n\r\n        const combinedRecalc = childRecalc & localRecalc;\r\n        return combinedRecalc;\r\n    }\r\n\r\n    get recalc() {\r\n        return this._recalc;\r\n    }\r\n\r\n    clearRecalcFlag() {\r\n        this._recalc = 0;\r\n    }\r\n\r\n    enableLocalRecalcFlag() {\r\n        this._recalc = 1;\r\n    }\r\n\r\n    get originalX() {\r\n        return this._originalX;\r\n    }\r\n\r\n    setOriginalXWithoutUpdatingLayout(v) {\r\n        this._originalX = v;\r\n    }\r\n\r\n    get originalY() {\r\n        return this._originalY;\r\n    }\r\n\r\n    setOriginalYWithoutUpdatingLayout(v) {\r\n        this._originalY = v;\r\n    }\r\n\r\n    get originalWidth() {\r\n        return this._originalWidth;\r\n    }\r\n\r\n    set originalWidth(v) {\r\n        if (this._originalWidth !== v) {\r\n            this._originalWidth = v;\r\n            this.changedDimensions(true, false);\r\n        }\r\n    }\r\n\r\n    get originalHeight() {\r\n        return this._originalHeight;\r\n    }\r\n\r\n    set originalHeight(v) {\r\n        if (this._originalHeight !== v) {\r\n            this._originalHeight = v;\r\n            this.changedDimensions(false, true);\r\n        }\r\n    }\r\n\r\n    get funcX() {\r\n        return this._target.funcX;\r\n    }\r\n\r\n    get funcY() {\r\n        return this._target.funcY;\r\n    }\r\n\r\n    get funcW() {\r\n        return this._target.funcW;\r\n    }\r\n\r\n    get funcH() {\r\n        return this._target.funcH;\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class TextureSource {\r\n\r\n    constructor(manager, loader = null) {\r\n        this.id = TextureSource.id++;\r\n\r\n        this.manager = manager;\r\n\r\n        this.stage = manager.stage;\r\n\r\n        /**\r\n         * All enabled textures (textures that are used by visible elements).\r\n         * @type {Set<Texture>}\r\n         */\r\n        this.textures = new Set();\r\n\r\n        /**\r\n         * The number of active textures (textures that have at least one active element).\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._activeTextureCount = 0;\r\n\r\n        /**\r\n         * The factory for the source of this texture.\r\n         * @type {Function}\r\n         */\r\n        this.loader = loader;\r\n\r\n        /**\r\n         * Identifier for reuse.\r\n         * @type {String}\r\n         */\r\n        this.lookupId = null;\r\n\r\n        /**\r\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\r\n         * @type {Function}\r\n         */\r\n        this._cancelCb = null;\r\n\r\n        /**\r\n         * Loading since timestamp in millis.\r\n         * @type {number}\r\n         */\r\n        this.loadingSince = 0;\r\n\r\n        this.w = 0;\r\n        this.h = 0;\r\n\r\n        this._nativeTexture = null;\r\n\r\n        /**\r\n         * If true, then this.texture source is never freed from memory during garbage collection.\r\n         * @type {boolean}\r\n         */\r\n        this.permanent = false;\r\n\r\n        /**\r\n         * Sub-object with texture-specific rendering information.\r\n         * For images, contains the src property, for texts, contains handy rendering information.\r\n         * @type {Object}\r\n         */\r\n        this.renderInfo = null;\r\n\r\n        /**\r\n         * Generated for 'renderToTexture'.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._isResultTexture = !this.loader;\r\n\r\n        /**\r\n         * Contains the load error, if the texture source could previously not be loaded.\r\n         * @type {object}\r\n         * @private\r\n         */\r\n        this._loadError = null;\r\n\r\n        /**\r\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\r\n         * @type {object}\r\n         * @private\r\n         */\r\n        this._imageRef = null;\r\n\r\n\r\n        /**\r\n         * Track whether or not there is an alpha channel in this source\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n         this._hasAlpha = false;\r\n    }\r\n\r\n    get hasAlpha() {\r\n        return this._hasAlpha;\r\n    }\r\n\r\n    get loadError() {\r\n        return this._loadError;\r\n    }\r\n\r\n    addTexture(v) {\r\n        if (!this.textures.has(v)) {\r\n            this.textures.add(v);\r\n        }\r\n    }\r\n\r\n    removeTexture(v) {\r\n        this.textures.delete(v);\r\n    }\r\n\r\n    incActiveTextureCount() {\r\n        this._activeTextureCount++;\r\n        if (this._activeTextureCount === 1) {\r\n            this.becomesUsed();\r\n        }\r\n    }\r\n\r\n    decActiveTextureCount() {\r\n        this._activeTextureCount--;\r\n        if (this._activeTextureCount === 0) {\r\n            this.becomesUnused();\r\n        }\r\n    }\r\n\r\n    get isResultTexture() {\r\n        return this._isResultTexture;\r\n    }\r\n\r\n    set isResultTexture(v) {\r\n        this._isResultTexture = v;\r\n    }\r\n\r\n    forEachEnabledElement(cb) {\r\n        this.textures.forEach(texture => {\r\n            texture.elements.forEach(cb);\r\n        });\r\n    }\r\n\r\n    hasEnabledElements() {\r\n        return this.textures.size > 0;\r\n    }\r\n\r\n    forEachActiveElement(cb) {\r\n        this.textures.forEach(texture => {\r\n            texture.elements.forEach(element => {\r\n                if (element.active) {\r\n                    cb(element);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getRenderWidth() {\r\n        return this.w;\r\n    }\r\n\r\n    getRenderHeight() {\r\n        return this.h;\r\n    }\r\n\r\n    allowCleanup() {\r\n        return !this.permanent && !this.isUsed();\r\n    }\r\n\r\n    becomesUsed() {\r\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\r\n        this.load();\r\n    }\r\n\r\n    becomesUnused() {\r\n        this.cancel();\r\n    }\r\n\r\n    cancel() {\r\n        if (this.isLoading()) {\r\n            if (this._cancelCb) {\r\n                this._cancelCb(this);\r\n\r\n                // Clear callback to avoid memory leaks.\r\n                this._cancelCb = null;\r\n            }\r\n            this.loadingSince = 0;\r\n        }\r\n    }\r\n\r\n    isLoaded() {\r\n        return !!this._nativeTexture;\r\n    }\r\n\r\n    isLoading() {\r\n        return (this.loadingSince > 0);\r\n    }\r\n\r\n    isError() {\r\n        return !!this._loadError;\r\n    }\r\n\r\n    reload() {\r\n        this.free();\r\n        if (this.isUsed()) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    load(forceSync = false) {\r\n        // From the moment of loading (when a texture source becomes used by active elements)\r\n        if (this.isResultTexture) {\r\n            // Element result texture source, for which the loading is managed by the core.\r\n            return;\r\n        }\r\n\r\n        if (!this._nativeTexture && !this.isLoading()) {\r\n            this.loadingSince = (new Date()).getTime();\r\n            this._cancelCb = this.loader((err, options) => {\r\n                // Ignore loads that come in after a cancel.\r\n                if (this.isLoading()) {\r\n                    // Clear callback to avoid memory leaks.\r\n                    this._cancelCb = null;\r\n\r\n                    if (this.manager.stage.destroyed) {\r\n                        // Ignore async load when stage is destroyed.\r\n                        return;\r\n                    }\r\n                    if (err) {\r\n                        // Emit txError.\r\n                        this.onError(err);\r\n                    } else if (options && options.source) {\r\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\r\n                            const textureThrottler = this.stage.textureThrottler;\r\n                            this._cancelCb = textureThrottler.genericCancelCb;\r\n                            textureThrottler.add(this, options);\r\n                        } else {\r\n                            this.processLoadedSource(options);\r\n                        }\r\n                    }\r\n                }\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    processLoadedSource(options) {\r\n        this.loadingSince = 0;\r\n        this.setSource(options);\r\n    }\r\n\r\n    setSource(options) {\r\n        const source = options.source;\r\n\r\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\r\n        this.w = source.width || (options && options.w) || 0;\r\n        this.h = source.height || (options && options.h) || 0;\r\n\r\n        if (options && options.renderInfo) {\r\n            // Assign to id in cache so that it can be reused.\r\n            this.renderInfo = options.renderInfo;\r\n        }\r\n\r\n        this.permanent = !!options.permanent;\r\n\r\n        if (options && options.imageRef)\r\n            this._imageRef = options.imageRef;\r\n        if (options && options.flipTextureY) {\r\n            this._flipTextureY = options.flipTextureY;\r\n        } else {\r\n            this._flipTextureY = false;\r\n        }\r\n\r\n        if (this._isNativeTexture(source)) {\r\n            // Texture managed by caller.\r\n            this._nativeTexture = source;\r\n\r\n            this.w = this.w || source.w;\r\n            this.h = this.h || source.h;\r\n\r\n            // WebGLTexture objects are by default;\r\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\r\n        } else {\r\n            this.manager.uploadTextureSource(this, options);\r\n        }\r\n\r\n        // Must be cleared when reload is succesful.\r\n        this._loadError = null;\r\n\r\n        this.onLoad();\r\n    }\r\n\r\n    isUsed() {\r\n        return this._activeTextureCount > 0;\r\n    }\r\n\r\n    onLoad() {\r\n        if (this.isUsed()) {\r\n            this.textures.forEach(texture => {\r\n                texture.onLoad();\r\n            });\r\n        }\r\n    }\r\n\r\n    forceRenderUpdate() {\r\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\r\n        //  (using tex[Sub]Image2d for example).\r\n\r\n        if (this._nativeTexture) {\r\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\r\n            this._nativeTexture.update = this.stage.frameCounter;\r\n        }\r\n\r\n        this.forEachActiveElement(function (element) {\r\n            element.forceRenderUpdate();\r\n        });\r\n\r\n    }\r\n\r\n    forceUpdateRenderCoords() {\r\n        this.forEachActiveElement(function (element) {\r\n            element._updateTextureCoords();\r\n        });\r\n    }\r\n\r\n    get nativeTexture() {\r\n        return this._nativeTexture;\r\n    }\r\n\r\n    clearNativeTexture() {\r\n        this._nativeTexture = null;\r\n        //also clear the reference to the texture variable.\r\n        this._imageRef = null;\r\n    }\r\n\r\n    /**\r\n     * Used for result textures.\r\n     */\r\n    replaceNativeTexture(newNativeTexture, w, h) {\r\n        let prevNativeTexture = this._nativeTexture;\r\n        // Loaded by core.\r\n        this._nativeTexture = newNativeTexture;\r\n        this.w = w;\r\n        this.h = h;\r\n\r\n        if (!prevNativeTexture && this._nativeTexture) {\r\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\r\n        }\r\n\r\n        if (!this._nativeTexture) {\r\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\r\n        }\r\n\r\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\r\n        this.forEachEnabledElement(element => element._updateDimensions());\r\n\r\n        // Notice that the sprite map must never contain render textures.\r\n    }\r\n\r\n    onError(e) {\r\n        this._loadError = e;\r\n        this.loadingSince = 0;\r\n        console.error('[Lightning] texture load error', e, this.lookupId);\r\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\r\n    }\r\n\r\n    free() {\r\n        if (this.isLoaded()) {\r\n            this.manager.freeTextureSource(this);\r\n        }\r\n    }\r\n\r\n    _isNativeTexture(source) {\r\n        if (Utils.isNode) {\r\n            return source.constructor.name === \"WebGLTexture\";\r\n        }\r\n\r\n        if ('WebGLTexture' in window) {\r\n            return source instanceof WebGLTexture;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nTextureSource.prototype.isTextureSource = true;\r\n\r\nTextureSource.id = 1;\r\n\r\nimport Utils from \"./Utils.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport TextureSource from '../TextureSource.mjs';\r\n\r\nexport default class ElementTexturizer {\r\n\r\n    constructor(elementCore) {\r\n\r\n        this._element = elementCore.element;\r\n        this._core = elementCore;\r\n\r\n        this.ctx = this._core.ctx;\r\n\r\n        this._enabled = false;\r\n        this.lazy = false;\r\n        this._colorize = false;\r\n\r\n        this._renderTexture = null;\r\n\r\n        this._renderTextureReused = false;\r\n\r\n        this._resultTextureSource = null;\r\n\r\n        this._renderOffscreen = false;\r\n\r\n        this.empty = false;\r\n    }\r\n\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    set enabled(v) {\r\n        this._enabled = v;\r\n        this._core.updateRenderToTextureEnabled();\r\n    }\r\n\r\n    get renderOffscreen() {\r\n        return this._renderOffscreen;\r\n    }\r\n\r\n    set renderOffscreen(v) {\r\n        this._renderOffscreen = v;\r\n        this._core.setHasRenderUpdates(1);\r\n\r\n        // This enforces rechecking the 'within bounds'.\r\n        this._core._setRecalc(6);\r\n    }\r\n\r\n    get colorize() {\r\n        return this._colorize;\r\n    }\r\n\r\n    set colorize(v) {\r\n        if (this._colorize !== v) {\r\n            this._colorize = v;\r\n\r\n            // Only affects the finally drawn quad.\r\n            this._core.setHasRenderUpdates(1);\r\n        }\r\n    }\r\n\r\n    _getTextureSource() {\r\n        if (!this._resultTextureSource) {\r\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\r\n            this.updateResultTexture();\r\n        }\r\n        return this._resultTextureSource;\r\n    }\r\n\r\n    hasResultTexture() {\r\n        return !!this._resultTextureSource;\r\n    }\r\n\r\n    resultTextureInUse() {\r\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\r\n    }\r\n\r\n    updateResultTexture() {\r\n        let resultTexture = this.getResultTexture();\r\n        if (this._resultTextureSource) {\r\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\r\n                let w = resultTexture ? resultTexture.w : 0;\r\n                let h = resultTexture ? resultTexture.h : 0;\r\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\r\n            }\r\n\r\n            // Texture will be updated: all elements using the source need to be updated as well.\r\n            this._resultTextureSource.forEachEnabledElement(element => {\r\n                element._updateDimensions();\r\n                element.core.setHasRenderUpdates(3);\r\n            });\r\n        }\r\n    }\r\n\r\n    mustRenderToTexture() {\r\n        // Check if we must really render as texture.\r\n        if (this._enabled && !this.lazy) {\r\n            return true;\r\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\r\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    deactivate() {\r\n        this.release();\r\n    }\r\n\r\n    get renderTextureReused() {\r\n        return this._renderTextureReused;\r\n    }\r\n\r\n    release() {\r\n        this.releaseRenderTexture();\r\n    }\r\n\r\n    releaseRenderTexture() {\r\n        if (this._renderTexture) {\r\n            if (!this._renderTextureReused) {\r\n                this.ctx.releaseRenderTexture(this._renderTexture);\r\n            }\r\n            this._renderTexture = null;\r\n            this._renderTextureReused = false;\r\n            this.updateResultTexture();\r\n        }\r\n    }\r\n\r\n    // Reuses the specified texture as the render texture (in ancestor).\r\n    reuseTextureAsRenderTexture(nativeTexture) {\r\n        if (this._renderTexture !== nativeTexture) {\r\n            this.releaseRenderTexture();\r\n            this._renderTexture = nativeTexture;\r\n            this._renderTextureReused = true;\r\n        }\r\n    }\r\n\r\n    hasRenderTexture() {\r\n        return !!this._renderTexture;\r\n    }\r\n\r\n    getRenderTexture() {\r\n        if (!this._renderTexture) {\r\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\r\n            this._renderTextureReused = false;\r\n        }\r\n        return this._renderTexture;\r\n    }\r\n\r\n    getResultTexture() {\r\n        return this._renderTexture;\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\r\n\r\nexport default class ElementCore {\r\n\r\n    constructor(element) {\r\n        this._element = element;\r\n\r\n        this.ctx = element.stage.ctx;\r\n\r\n        // The memory layout of the internal variables is affected by their position in the constructor.\r\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\r\n\r\n        this._recalc = 0;\r\n\r\n        this._parent = null;\r\n\r\n        this._onUpdate = null;\r\n\r\n        this._pRecalc = 0;\r\n\r\n        this._worldContext = new ElementCoreContext();\r\n\r\n        this._hasUpdates = false;\r\n\r\n        this._localAlpha = 1;\r\n\r\n        this._onAfterCalcs = null;\r\n\r\n        this._onAfterUpdate = null;\r\n\r\n        \r\n        this._localPx = 0;\r\n        this._localPy = 0;\r\n\r\n        this._localTa = 1;\r\n        this._localTb = 0;\r\n        this._localTc = 0;\r\n        this._localTd = 1;\r\n\r\n        this._isComplex = false;\r\n\r\n        this._dimsUnknown = false;\r\n\r\n        this._clipping = false;\r\n\r\n        // Used by both update and render.\r\n        this._zSort = false;\r\n\r\n        this._outOfBounds = 0;\r\n\r\n        /**\r\n         * The texture source to be displayed.\r\n         * @type {TextureSource}\r\n         */\r\n        this._displayedTextureSource = null;\r\n\r\n        this._zContextUsage = 0;\r\n\r\n        this._children = null;\r\n\r\n        this._hasRenderUpdates = 0;\r\n\r\n        this._zIndexedChildren = null;\r\n\r\n        this._renderContext = this._worldContext;\r\n\r\n        this.renderState = this.ctx.renderState;\r\n\r\n        this._scissor = null;\r\n\r\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\r\n        this._shaderOwner = null;\r\n\r\n\r\n        this._updateTreeOrder = 0;\r\n\r\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\r\n\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._w = 0;\r\n        this._h = 0;\r\n\r\n        this._optFlags = 0;\r\n        this._funcX = null;\r\n        this._funcY = null;\r\n        this._funcW = null;\r\n        this._funcH = null;\r\n\r\n        this._scaleX = 1;\r\n        this._scaleY = 1;\r\n        this._pivotX = 0.5;\r\n        this._pivotY = 0.5;\r\n        this._mountX = 0;\r\n        this._mountY = 0;\r\n        this._rotation = 0;\r\n\r\n        this._alpha = 1;\r\n        this._visible = true;\r\n\r\n        this._ulx = 0;\r\n        this._uly = 0;\r\n        this._brx = 1;\r\n        this._bry = 1;\r\n\r\n        this._zIndex = 0;\r\n        this._forceZIndexContext = false;\r\n        this._zParent = null;\r\n\r\n        this._isRoot = false;\r\n        \r\n        /**\r\n         * RTL will be ignore. LTR is applied\r\n         */\r\n        this._ignoreRTL = null;\r\n\r\n        /**\r\n         * Iff true, during zSort, this element should be 're-sorted' because either:\r\n         * - zIndex did chang\r\n         * - zParent did change\r\n         * - element was moved in the render tree\r\n         * @type {boolean}\r\n         */\r\n        this._zIndexResort = false;\r\n\r\n        this._shader = null;\r\n\r\n        // Element is rendered on another texture.\r\n        this._renderToTextureEnabled = false;\r\n\r\n        this._texturizer = null;\r\n\r\n        this._useRenderToTexture = false;\r\n\r\n        this._boundsMargin = null;\r\n\r\n        this._recBoundsMargin = null;\r\n\r\n        this._withinBoundsMargin = false;\r\n\r\n        this._viewport = null;\r\n\r\n        this._clipbox = true;\r\n\r\n        this.render = this._renderSimple;\r\n\r\n        this._layout = null;\r\n    }\r\n\r\n    get offsetX() {\r\n        if (this._funcX) {\r\n            return this._funcX;\r\n        } else {\r\n            if (this.hasFlexLayout()) {\r\n                return this._layout.originalX;\r\n            } else {\r\n                return this._x;\r\n            }\r\n        }\r\n    }\r\n\r\n    set offsetX(v) {\r\n        if (Utils.isFunction(v)) {\r\n            this.funcX = v;\r\n        } else {\r\n            this._disableFuncX();\r\n            if (this.hasFlexLayout()) {\r\n                this.x += (v - this._layout.originalX);\r\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\r\n            } else {\r\n                this.x = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    set x(v) {\r\n        if (v !== this._x) {\r\n            this._updateLocalTranslateDelta(v - this._x, 0);\r\n            this._x = v;\r\n        }\r\n    }\r\n\r\n    get funcX() {\r\n        return (this._optFlags & 1 ? this._funcX : null);\r\n    }\r\n\r\n    set funcX(v) {\r\n        if (this._funcX !== v) {\r\n            this._optFlags |= 1;\r\n            this._funcX = v;\r\n            if (this.hasFlexLayout()) {\r\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\r\n                this.layout.forceLayout();\r\n            } else {\r\n                this._x = 0;\r\n                this._triggerRecalcTranslate();\r\n            }\r\n        }\r\n    }\r\n\r\n    _disableFuncX() {\r\n        this._optFlags = this._optFlags & (0xFFFF - 1);\r\n        this._funcX = null;\r\n    }\r\n\r\n    get offsetY() {\r\n        if (this._funcY) {\r\n            return this._funcY;\r\n        } else {\r\n            if (this.hasFlexLayout()) {\r\n                return this._layout.originalY;\r\n            } else {\r\n                return this._y;\r\n            }\r\n        }\r\n    }\r\n\r\n    set offsetY(v) {\r\n        if (Utils.isFunction(v)) {\r\n            this.funcY = v;\r\n        } else {\r\n            this._disableFuncY();\r\n            if (this.hasFlexLayout()) {\r\n                this.y += (v - this._layout.originalY);\r\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\r\n            } else {\r\n                this.y = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    set y(v) {\r\n        if (v !== this._y) {\r\n            this._updateLocalTranslateDelta(0, v - this._y);\r\n            this._y = v;\r\n        }\r\n    }\r\n\r\n    get funcY() {\r\n        return (this._optFlags & 2 ? this._funcY : null);\r\n    }\r\n\r\n    set funcY(v) {\r\n        if (this._funcY !== v) {\r\n            this._optFlags |= 2;\r\n            this._funcY = v;\r\n            if (this.hasFlexLayout()) {\r\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\r\n                this.layout.forceLayout();\r\n            } else {\r\n                this._y = 0;\r\n                this._triggerRecalcTranslate();\r\n            }\r\n        }\r\n    }\r\n\r\n    _disableFuncY() {\r\n        this._optFlags = this._optFlags & (0xFFFF - 2);\r\n        this._funcY = null;\r\n    }\r\n\r\n    get funcW() {\r\n        return (this._optFlags & 4 ? this._funcW : null);\r\n    }\r\n\r\n    set funcW(v) {\r\n        if (this._funcW !== v) {\r\n            this._optFlags |= 4;\r\n            this._funcW = v;\r\n            if (this.hasFlexLayout()) {\r\n                this._layout._originalWidth = 0;\r\n                this.layout.changedDimensions(true, false);\r\n            } else {\r\n                this._w = 0;\r\n                this._triggerRecalcTranslate();\r\n            }\r\n        }\r\n    }\r\n\r\n    disableFuncW() {\r\n        this._optFlags = this._optFlags & (0xFFFF - 4);\r\n        this._funcW = null;\r\n    }\r\n\r\n    get funcH() {\r\n        return (this._optFlags & 8 ? this._funcH : null);\r\n    }\r\n\r\n    set funcH(v) {\r\n        if (this._funcH !== v) {\r\n            this._optFlags |= 8;\r\n            this._funcH = v;\r\n            if (this.hasFlexLayout()) {\r\n                this._layout._originalHeight = 0;\r\n                this.layout.changedDimensions(false, true);\r\n            } else {\r\n                this._h = 0;\r\n                this._triggerRecalcTranslate();\r\n            }\r\n        }\r\n    }\r\n\r\n    disableFuncH() {\r\n        this._optFlags = this._optFlags & (0xFFFF - 8);\r\n        this._funcH = null;\r\n    }\r\n\r\n    get w() {\r\n        return this._w;\r\n    }\r\n\r\n    getRenderWidth() {\r\n        if (this.hasFlexLayout()) {\r\n            return this._layout.originalWidth;\r\n        } else {\r\n            return this._w;\r\n        }\r\n    }\r\n\r\n    get h() {\r\n        return this._h;\r\n    }\r\n\r\n    getRenderHeight() {\r\n        if (this.hasFlexLayout()) {\r\n            return this._layout.originalHeight;\r\n        } else {\r\n            return this._h;\r\n        }\r\n    }\r\n\r\n    get scaleX() {\r\n        return this._scaleX;\r\n    }\r\n\r\n    set scaleX(v) {\r\n        if (this._scaleX !== v) {\r\n            this._scaleX = v;\r\n            this._updateLocalTransform();\r\n        }\r\n    }\r\n\r\n    get scaleY() {\r\n        return this._scaleY;\r\n    }\r\n\r\n    set scaleY(v) {\r\n        if (this._scaleY !== v) {\r\n            this._scaleY = v;\r\n            this._updateLocalTransform();\r\n        }\r\n    }\r\n\r\n    get scale() {\r\n        return this.scaleX;\r\n    }\r\n\r\n    set scale(v) {\r\n        if (this._scaleX !== v || this._scaleY !== v) {\r\n            this._scaleX = v;\r\n            this._scaleY = v;\r\n            this._updateLocalTransform();\r\n        }\r\n    }\r\n\r\n    get pivotX() {\r\n        return this._pivotX;\r\n    }\r\n\r\n    set pivotX(v) {\r\n        if (this._pivotX !== v) {\r\n            this._pivotX = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get pivotY() {\r\n        return this._pivotY;\r\n    }\r\n\r\n    set pivotY(v) {\r\n        if (this._pivotY !== v) {\r\n            this._pivotY = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get pivot() {\r\n        return this._pivotX;\r\n    }\r\n\r\n    set pivot(v) {\r\n        if (this._pivotX !== v || this._pivotY !== v) {\r\n            this._pivotX = v;\r\n            this._pivotY = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get mountX() {\r\n        return this._mountX;\r\n    }\r\n\r\n    set mountX(v) {\r\n        if (this._mountX !== v) {\r\n            this._mountX = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get mountY() {\r\n        return this._mountY;\r\n    }\r\n\r\n    set mountY(v) {\r\n        if (this._mountY !== v) {\r\n            this._mountY = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get mount() {\r\n        return this._mountX;\r\n    }\r\n\r\n    set mount(v) {\r\n        if (this._mountX !== v || this._mountY !== v) {\r\n            this._mountX = v;\r\n            this._mountY = v;\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n\r\n    set rotation(v) {\r\n        if (this._rotation !== v) {\r\n            this._rotation = v;\r\n            this._updateLocalTransform();\r\n        }\r\n    }\r\n\r\n    get alpha() {\r\n        return this._alpha;\r\n    }\r\n\r\n    set alpha(v) {\r\n        // Account for rounding errors.\r\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\r\n        if (this._alpha !== v) {\r\n            let prev = this._alpha;\r\n            this._alpha = v;\r\n            this._updateLocalAlpha();\r\n            if ((prev === 0) !== (v === 0)) {\r\n                this._element._updateEnabledFlag();\r\n            }\r\n        }\r\n    }\r\n\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(v) {\r\n        if (this._visible !== v) {\r\n            this._visible = v;\r\n            this._updateLocalAlpha();\r\n            this._element._updateEnabledFlag();\r\n\r\n            if (this.hasFlexLayout()) {\r\n                this.layout.setVisible(v);\r\n            }\r\n        }\r\n    }\r\n\r\n    _updateLocalTransform() {\r\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\r\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\r\n            let _sr = Math.sin(this._rotation);\r\n            let _cr = Math.cos(this._rotation);\r\n\r\n            this._setLocalTransform(\r\n                _cr * this._scaleX,\r\n                -_sr * this._scaleY,\r\n                _sr * this._scaleX,\r\n                _cr * this._scaleY\r\n            );\r\n        } else {\r\n            this._setLocalTransform(\r\n                this._scaleX,\r\n                0,\r\n                0,\r\n                this._scaleY\r\n            );\r\n        }\r\n        this._updateLocalTranslate();\r\n    };\r\n\r\n    _updateLocalTranslate() {\r\n        this._recalcLocalTranslate();\r\n        this._triggerRecalcTranslate();\r\n    };\r\n\r\n    _recalcLocalTranslate() {\r\n        let pivotXMul = this._pivotX * this._w;\r\n        let pivotYMul = this._pivotY * this._h;\r\n        let px;\r\n        if (window.isRTL && !this._ignoreRTL) {\r\n            px = this._x + (pivotXMul * this._localTa + pivotYMul * this._localTb) - pivotXMul;\r\n        } else {\r\n            px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\r\n        }\r\n\r\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\r\n        px -= this._mountX * this._w;\r\n        py -= this._mountY * this._h;\r\n        this._localPx = px;\r\n        this._localPy = py;\r\n    }\r\n\r\n    _updateLocalTranslateDelta(dx, dy) {\r\n        this._addLocalTranslate(dx, dy);\r\n    };\r\n\r\n    _updateLocalAlpha() {\r\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\r\n    };\r\n\r\n    /**\r\n     * @param {number} type\r\n     * 0: no updates\r\n     * 1: re-invoke shader\r\n     * 3: re-create render texture and re-invoke shader\r\n     */\r\n    setHasRenderUpdates(type) {\r\n        if (this._worldContext.alpha) {\r\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\r\n            let p = this;\r\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\r\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\r\n                p._hasRenderUpdates = 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Number} type\r\n     *   1: alpha\r\n     *   2: translate\r\n     *   4: transform\r\n     * 128: becomes visible\r\n     * 256: flex layout updated\r\n     */\r\n    _setRecalc(type) {\r\n        this._recalc |= type;\r\n\r\n        this._setHasUpdates();\r\n\r\n        // Any changes in descendants should trigger texture updates.\r\n        if (this._parent) {\r\n            this._parent.setHasRenderUpdates(3);\r\n        }\r\n    }\r\n\r\n    _setHasUpdates() {\r\n        let p = this;\r\n        while (p && !p._hasUpdates) {\r\n            p._hasUpdates = true;\r\n            p = p._parent;\r\n        }\r\n    }\r\n\r\n    getParent() {\r\n        return this._parent;\r\n    }\r\n\r\n    setParent(parent) {\r\n        if (parent !== this._parent) {\r\n            let prevIsZContext = this.isZContext();\r\n            let prevParent = this._parent;\r\n            this._parent = parent;\r\n\r\n            // Notify flex layout engine.\r\n            if (this._layout || (parent && parent.isFlexContainer())) {\r\n                this.layout.setParent(prevParent, parent);\r\n            }\r\n\r\n            if (prevParent) {\r\n                // When elements are deleted, the render texture must be re-rendered.\r\n                prevParent.setHasRenderUpdates(3);\r\n            }\r\n\r\n            this._setRecalc(1 + 2 + 4);\r\n\r\n            if (this._parent) {\r\n                // Force parent to propagate hasUpdates flag.\r\n                this._parent._setHasUpdates();\r\n            }\r\n\r\n            if (this._zIndex === 0) {\r\n                this.setZParent(parent);\r\n            } else {\r\n                this.setZParent(parent ? parent.findZContext() : null);\r\n            }\r\n\r\n            if (prevIsZContext !== this.isZContext()) {\r\n                if (!this.isZContext()) {\r\n                    this.disableZContext();\r\n                } else {\r\n                    this.enableZContext(prevParent.findZContext());\r\n                }\r\n            }\r\n\r\n            if (this._ignoreRTL != false) {\r\n                //Inherit ignoreRTL value from parent if it isn't setted\r\n                this._setIgnoreRTL(parent);\r\n            }\r\n\r\n            // Tree order did change: even if zParent stays the same, we must resort.\r\n            this._zIndexResort = true;\r\n            if (this._zParent) {\r\n                this._zParent.enableZSort();\r\n            }\r\n\r\n            if (!this._shader) {\r\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\r\n                if (newShaderOwner !== this._shaderOwner) {\r\n                    this.setHasRenderUpdates(1);\r\n                    this._setShaderOwnerRecursive(newShaderOwner);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    _setIgnoreRTL(parent) {\r\n        if (parent && parent.ignoreRTL && parent._children) {\r\n            for (let i = 0, n = parent._children.length; i < n; i++) {\r\n                let c = parent._children[i];\r\n                if (c && c.ignoreRTL != false) {\r\n                    c.ignoreRTL = parent.ignoreRTL;\r\n                    c._setIgnoreRTL(c);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    enableZSort(force = false) {\r\n        if (!this._zSort && this._zContextUsage > 0) {\r\n            this._zSort = true;\r\n            if (force) {\r\n                // ZSort must be done, even if this element is invisible.\r\n                // This is done to prevent memory leaks when removing element from inactive render branches.\r\n                this.ctx.forceZSort(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    addChildAt(index, child) {\r\n        if (!this._children) this._children = [];\r\n        this._children.splice(index, 0, child);\r\n        child.setParent(this);\r\n    };\r\n\r\n    setChildAt(index, child) {\r\n        if (!this._children) this._children = [];\r\n        this._children[index].setParent(null);\r\n        this._children[index] = child;\r\n        child.setParent(this);\r\n    }\r\n\r\n    removeChildAt(index) {\r\n        let child = this._children[index];\r\n        this._children.splice(index, 1);\r\n        child.setParent(null);\r\n    };\r\n\r\n    removeChildren() {\r\n        if (this._children) {\r\n            for (let i = 0, n = this._children.length; i < n; i++) {\r\n                this._children[i].setParent(null);\r\n            }\r\n\r\n            this._children.splice(0);\r\n\r\n            if (this._zIndexedChildren) {\r\n                this._zIndexedChildren.splice(0);\r\n            }\r\n        }\r\n    };\r\n\r\n    syncChildren(removed, added, order) {\r\n        this._children = order;\r\n        for (let i = 0, n = removed.length; i < n; i++) {\r\n            removed[i].setParent(null);\r\n        }\r\n        for (let i = 0, n = added.length; i < n; i++) {\r\n            added[i].setParent(this);\r\n        }\r\n    }\r\n\r\n    moveChild(fromIndex, toIndex) {\r\n        let c = this._children[fromIndex];\r\n        this._children.splice(fromIndex, 1);\r\n        this._children.splice(toIndex, 0, c);\r\n\r\n        // Tree order changed: must resort!;\r\n        this._zIndexResort = true;\r\n        if (this._zParent) {\r\n            this._zParent.enableZSort();\r\n        }\r\n    }\r\n\r\n    _setLocalTransform(a, b, c, d) {\r\n        this._setRecalc(4);\r\n        this._localTa = a;\r\n        this._localTb = b;\r\n        this._localTc = c;\r\n        this._localTd = d;\r\n\r\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\r\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\r\n    };\r\n\r\n    _addLocalTranslate(dx, dy) {\r\n        this._localPx += dx;\r\n        this._localPy += dy;\r\n        this._triggerRecalcTranslate();\r\n    }\r\n\r\n    _setLocalAlpha(a) {\r\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\r\n            // Element is becoming visible. We need to force update.\r\n            this._setRecalc(1 + 128);\r\n        } else {\r\n            this._setRecalc(1);\r\n        }\r\n\r\n        if (a < 1e-14) {\r\n            // Tiny rounding errors may cause failing visibility tests.\r\n            a = 0;\r\n        }\r\n\r\n        this._localAlpha = a;\r\n    };\r\n\r\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\r\n        // In case of an estimation, the update loop should perform different bound checks.\r\n        this._dimsUnknown = isEstimate;\r\n\r\n        if (this.hasFlexLayout()) {\r\n            this._layout.originalWidth = w;\r\n            this._layout.originalHeight = h;\r\n        } else {\r\n            if (this._w !== w || this._h !== h) {\r\n                this._updateDimensions(w, h);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    _updateDimensions(w, h) {\r\n        if (this._w !== w || this._h !== h) {\r\n            this._w = w;\r\n            this._h = h;\r\n\r\n            this._triggerRecalcTranslate();\r\n\r\n            if (this._texturizer) {\r\n                this._texturizer.releaseRenderTexture();\r\n                this._texturizer.updateResultTexture();\r\n            }\r\n            // Due to width/height change: update the translation vector.\r\n            this._updateLocalTranslate();\r\n        }\r\n    }\r\n\r\n    setTextureCoords(ulx, uly, brx, bry) {\r\n        this.setHasRenderUpdates(3);\r\n\r\n        this._ulx = ulx;\r\n        this._uly = uly;\r\n        this._brx = brx;\r\n        this._bry = bry;\r\n    };\r\n\r\n    get displayedTextureSource() {\r\n        return this._displayedTextureSource;\r\n    }\r\n\r\n    setDisplayedTextureSource(textureSource) {\r\n        this.setHasRenderUpdates(3);\r\n        this._displayedTextureSource = textureSource;\r\n    };\r\n\r\n    get isRoot() {\r\n        return this._isRoot;\r\n    }\r\n\r\n    setAsRoot() {\r\n        // Use parent dummy.\r\n        this._parent = new ElementCore(this._element);\r\n\r\n        // After setting root, make sure it's updated.\r\n        this._parent._hasRenderUpdates = 3;\r\n        this._parent._hasUpdates = true;\r\n\r\n        // Root is, and will always be, the primary zContext.\r\n        this._isRoot = true;\r\n\r\n        this.ctx.root = this;\r\n\r\n        // Set scissor area of 'fake parent' to stage's viewport.\r\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\r\n        this._parent._scissor = this._parent._viewport;\r\n\r\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\r\n        this._parent._recBoundsMargin = null;\r\n\r\n        this._setRecalc(1 + 2 + 4);\r\n    };\r\n\r\n    isAncestorOf(c) {\r\n        let p = c;\r\n        while (p = p._parent) {\r\n            if (this === p) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    isZContext() {\r\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\r\n    };\r\n\r\n    findZContext() {\r\n        if (this.isZContext()) {\r\n            return this;\r\n        } else {\r\n            return this._parent.findZContext();\r\n        }\r\n    };\r\n\r\n    setZParent(newZParent) {\r\n        if (this._zParent !== newZParent) {\r\n            if (this._zParent !== null) {\r\n                if (this._zIndex !== 0) {\r\n                    this._zParent.decZContextUsage();\r\n                }\r\n\r\n                // We must filter out this item upon the next resort.\r\n                this._zParent.enableZSort();\r\n            }\r\n\r\n            if (newZParent !== null) {\r\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\r\n\r\n                // @pre: new parent's children array has already been modified.\r\n                if (this._zIndex !== 0) {\r\n                    newZParent.incZContextUsage();\r\n                }\r\n\r\n                if (newZParent._zContextUsage > 0) {\r\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\r\n                        // This child was already in the children list.\r\n                        // Do not add double.\r\n                    } else {\r\n                        // Add new child to array.\r\n                        newZParent._zIndexedChildren.push(this);\r\n                    }\r\n\r\n                    // Order should be checked.\r\n                    newZParent.enableZSort();\r\n                }\r\n            }\r\n\r\n            this._zParent = newZParent;\r\n\r\n            // Newly added element must be marked for resort.\r\n            this._zIndexResort = true;\r\n        }\r\n    };\r\n\r\n    incZContextUsage() {\r\n        this._zContextUsage++;\r\n        if (this._zContextUsage === 1) {\r\n            if (!this._zIndexedChildren) {\r\n                this._zIndexedChildren = [];\r\n            }\r\n            if (this._children) {\r\n                // Copy.\r\n                for (let i = 0, n = this._children.length; i < n; i++) {\r\n                    this._zIndexedChildren.push(this._children[i]);\r\n                }\r\n                // Initially, children are already sorted properly (tree order).\r\n                this._zSort = false;\r\n            }\r\n        }\r\n    };\r\n\r\n    decZContextUsage() {\r\n        this._zContextUsage--;\r\n        if (this._zContextUsage === 0) {\r\n            this._zSort = false;\r\n            this._zIndexedChildren.splice(0);\r\n        }\r\n    };\r\n\r\n    get zIndex() {\r\n        return this._zIndex;\r\n    }\r\n\r\n    set zIndex(zIndex) {\r\n        if (this._zIndex !== zIndex) {\r\n            this.setHasRenderUpdates(1);\r\n\r\n            let newZParent = this._zParent;\r\n\r\n            let prevIsZContext = this.isZContext();\r\n            if (zIndex === 0 && this._zIndex !== 0) {\r\n                if (this._parent === this._zParent) {\r\n                    if (this._zParent) {\r\n                        this._zParent.decZContextUsage();\r\n                    }\r\n                } else {\r\n                    newZParent = this._parent;\r\n                }\r\n            } else if (zIndex !== 0 && this._zIndex === 0) {\r\n                newZParent = this._parent ? this._parent.findZContext() : null;\r\n                if (newZParent === this._zParent) {\r\n                    if (this._zParent) {\r\n                        this._zParent.incZContextUsage();\r\n                        this._zParent.enableZSort();\r\n                    }\r\n                }\r\n            } else if (zIndex !== this._zIndex) {\r\n                if (this._zParent && this._zParent._zContextUsage) {\r\n                    this._zParent.enableZSort();\r\n                }\r\n            }\r\n\r\n            if (newZParent !== this._zParent) {\r\n                this.setZParent(null);\r\n            }\r\n\r\n            this._zIndex = zIndex;\r\n\r\n            if (newZParent !== this._zParent) {\r\n                this.setZParent(newZParent);\r\n            }\r\n\r\n            if (prevIsZContext !== this.isZContext()) {\r\n                if (!this.isZContext()) {\r\n                    this.disableZContext();\r\n                } else {\r\n                    this.enableZContext(this._parent.findZContext());\r\n                }\r\n            }\r\n\r\n            // Make sure that resort is done.\r\n            this._zIndexResort = true;\r\n            if (this._zParent) {\r\n                this._zParent.enableZSort();\r\n            }\r\n        }\r\n    };\r\n\r\n    get forceZIndexContext() {\r\n        return this._forceZIndexContext;\r\n    }\r\n\r\n    set forceZIndexContext(v) {\r\n        this.setHasRenderUpdates(1);\r\n\r\n        let prevIsZContext = this.isZContext();\r\n        this._forceZIndexContext = v;\r\n\r\n        if (prevIsZContext !== this.isZContext()) {\r\n            if (!this.isZContext()) {\r\n                this.disableZContext();\r\n            } else {\r\n                this.enableZContext(this._parent.findZContext());\r\n            }\r\n        }\r\n    };\r\n\r\n    enableZContext(prevZContext) {\r\n        if (prevZContext && prevZContext._zContextUsage > 0) {\r\n            // Transfer from upper z context to this z context.\r\n            const results = this._getZIndexedDescs();\r\n            results.forEach((c) => {\r\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\r\n                    c.setZParent(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _getZIndexedDescs() {\r\n        const results = [];\r\n        if (this._children) {\r\n            for (let i = 0, n = this._children.length; i < n; i++) {\r\n                this._children[i]._getZIndexedDescsRec(results);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    _getZIndexedDescsRec(results) {\r\n        if (this._zIndex) {\r\n            results.push(this);\r\n        } else if (this._children && !this.isZContext()) {\r\n            for (let i = 0, n = this._children.length; i < n; i++) {\r\n                this._children[i]._getZIndexedDescsRec(results);\r\n            }\r\n        }\r\n    }\r\n\r\n    disableZContext() {\r\n        // Transfer from this z context to upper z context.\r\n        if (this._zContextUsage > 0) {\r\n            let newZParent = this._parent.findZContext();\r\n\r\n            // Make sure that z-indexed children are up to date (old ones removed).\r\n            if (this._zSort) {\r\n                this.sortZIndexedChildren();\r\n            }\r\n\r\n            this._zIndexedChildren.slice().forEach(function (c) {\r\n                if (c._zIndex !== 0) {\r\n                    c.setZParent(newZParent);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    get ignoreRTL() {\r\n        return this._ignoreRTL;\r\n    }\r\n\r\n    set ignoreRTL(v) {\r\n        this._ignoreRTL = v;\r\n    }\r\n\r\n    get colorUl() {\r\n        return this._colorUl;\r\n    }\r\n\r\n    set colorUl(color) {\r\n        if (this._colorUl !== color) {\r\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\r\n            this._colorUl = color;\r\n        }\r\n    }\r\n\r\n    get colorUr() {\r\n        return this._colorUr;\r\n    }\r\n\r\n    set colorUr(color) {\r\n        if (this._colorUr !== color) {\r\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\r\n            this._colorUr = color;\r\n        }\r\n    };\r\n\r\n    get colorBl() {\r\n        return this._colorBl;\r\n    }\r\n\r\n    set colorBl(color) {\r\n        if (this._colorBl !== color) {\r\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\r\n            this._colorBl = color;\r\n        }\r\n    };\r\n\r\n    get colorBr() {\r\n        return this._colorBr;\r\n    }\r\n\r\n    set colorBr(color) {\r\n        if (this._colorBr !== color) {\r\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\r\n            this._colorBr = color;\r\n        }\r\n    };\r\n\r\n\r\n    set onUpdate(f) {\r\n        this._onUpdate = f;\r\n        this._setRecalc(7);\r\n    }\r\n\r\n    set onAfterUpdate(f) {\r\n        this._onAfterUpdate = f;\r\n        this._setRecalc(7);\r\n    }\r\n\r\n    set onAfterCalcs(f) {\r\n        this._onAfterCalcs = f;\r\n        this._setRecalc(7);\r\n    }\r\n\r\n    get shader() {\r\n        return this._shader;\r\n    }\r\n\r\n    set shader(v) {\r\n        this.setHasRenderUpdates(1);\r\n\r\n        let prevShader = this._shader;\r\n        this._shader = v;\r\n        if (!v && prevShader) {\r\n            // Disabled shader.\r\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\r\n            this._setShaderOwnerRecursive(newShaderOwner);\r\n        } else if (v) {\r\n            // Enabled shader.\r\n            this._setShaderOwnerRecursive(this);\r\n        }\r\n    }\r\n\r\n    get activeShader() {\r\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\r\n    }\r\n\r\n    get activeShaderOwner() {\r\n        return this._shaderOwner;\r\n    }\r\n\r\n    get clipping() {\r\n        return this._clipping;\r\n    }\r\n\r\n    set clipping(v) {\r\n        if (this._clipping !== v) {\r\n            this._clipping = v;\r\n\r\n            // Force update of scissor by updating translate.\r\n            // Alpha must also be updated because the scissor area may have been empty.\r\n            this._setRecalc(1 + 2);\r\n        }\r\n    }\r\n\r\n    get clipbox() {\r\n        return this._clipbox;\r\n    }\r\n\r\n    set clipbox(v) {\r\n        // In case of out-of-bounds element, all children will also be ignored.\r\n        // It will save us from executing the update/render loops for those.\r\n        // The optimization will be used immediately during the next frame.\r\n        this._clipbox = v;\r\n    }\r\n\r\n    _setShaderOwnerRecursive(elementCore) {\r\n        this._shaderOwner = elementCore;\r\n\r\n        if (this._children && !this._renderToTextureEnabled) {\r\n            for (let i = 0, n = this._children.length; i < n; i++) {\r\n                let c = this._children[i];\r\n                if (!c._shader) {\r\n                    c._setShaderOwnerRecursive(elementCore);\r\n                    c._hasRenderUpdates = 3;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    _setShaderOwnerChildrenRecursive(elementCore) {\r\n        if (this._children) {\r\n            for (let i = 0, n = this._children.length; i < n; i++) {\r\n                let c = this._children[i];\r\n                if (!c._shader) {\r\n                    c._setShaderOwnerRecursive(elementCore);\r\n                    c._hasRenderUpdates = 3;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    _hasRenderContext() {\r\n        return this._renderContext !== this._worldContext;\r\n    }\r\n\r\n    get renderContext() {\r\n        return this._renderContext;\r\n    }\r\n\r\n    updateRenderToTextureEnabled() {\r\n        // Enforce texturizer initialisation.\r\n        let v = this.texturizer._enabled;\r\n\r\n        if (v) {\r\n            this._enableRenderToTexture();\r\n        } else {\r\n            this._disableRenderToTexture();\r\n            this._texturizer.releaseRenderTexture();\r\n        }\r\n    }\r\n\r\n    _enableRenderToTexture() {\r\n        if (!this._renderToTextureEnabled) {\r\n            let prevIsZContext = this.isZContext();\r\n\r\n            this._renderToTextureEnabled = true;\r\n\r\n            this._renderContext = new ElementCoreContext();\r\n\r\n            // If render to texture is active, a new shader context is started.\r\n            this._setShaderOwnerChildrenRecursive(null);\r\n\r\n            if (!prevIsZContext) {\r\n                // Render context forces z context.\r\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\r\n            }\r\n\r\n            this.setHasRenderUpdates(3);\r\n\r\n            // Make sure that the render coordinates get updated.\r\n            this._setRecalc(7);\r\n\r\n            this.render = this._renderAdvanced;\r\n        }\r\n    }\r\n\r\n    _disableRenderToTexture() {\r\n        if (this._renderToTextureEnabled) {\r\n            this._renderToTextureEnabled = false;\r\n\r\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\r\n\r\n            this._renderContext = this._worldContext;\r\n\r\n            if (!this.isZContext()) {\r\n                this.disableZContext();\r\n            }\r\n\r\n            // Make sure that the render coordinates get updated.\r\n            this._setRecalc(7);\r\n\r\n            this.setHasRenderUpdates(3);\r\n\r\n            this.render = this._renderSimple;\r\n        }\r\n    }\r\n\r\n    isWhite() {\r\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\r\n    }\r\n\r\n    hasSimpleTexCoords() {\r\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\r\n    }\r\n\r\n    _stashTexCoords() {\r\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\r\n        this._ulx = 0;\r\n        this._uly = 0;\r\n        this._brx = 1;\r\n        this._bry = 1;\r\n    }\r\n\r\n    _unstashTexCoords() {\r\n        this._ulx = this._stashedTexCoords[0];\r\n        this._uly = this._stashedTexCoords[1];\r\n        this._brx = this._stashedTexCoords[2];\r\n        this._bry = this._stashedTexCoords[3];\r\n        this._stashedTexCoords = null;\r\n    }\r\n\r\n    _stashColors() {\r\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\r\n        this._colorUl = 0xFFFFFFFF;\r\n        this._colorUr = 0xFFFFFFFF;\r\n        this._colorBr = 0xFFFFFFFF;\r\n        this._colorBl = 0xFFFFFFFF;\r\n    }\r\n\r\n    _unstashColors() {\r\n        this._colorUl = this._stashedColors[0];\r\n        this._colorUr = this._stashedColors[1];\r\n        this._colorBr = this._stashedColors[2];\r\n        this._colorBl = this._stashedColors[3];\r\n        this._stashedColors = null;\r\n    }\r\n\r\n    isVisible() {\r\n        return (this._localAlpha > 1e-14);\r\n    };\r\n\r\n    get outOfBounds() {\r\n        return this._outOfBounds;\r\n    }\r\n\r\n    set boundsMargin(v) {\r\n\r\n        /**\r\n         *  null: inherit from parent.\r\n         *  number[4]: specific margins: left, top, right, bottom.\r\n         */\r\n        this._boundsMargin = v ? v.slice() : null;\r\n\r\n        // We force recalc in order to set all boundsMargin recursively during the next update.\r\n        this._triggerRecalcTranslate();\r\n    }\r\n\r\n    get boundsMargin() {\r\n        return this._boundsMargin;\r\n    }\r\n\r\n    update() {\r\n        this._recalc |= this._parent._pRecalc;\r\n\r\n        if (this._layout && this._layout.isEnabled()) {\r\n            if (this._recalc & 256) {\r\n                this._layout.layoutFlexTree();\r\n            }\r\n        } else if ((this._recalc & 2) && this._optFlags) {\r\n            this._applyRelativeDimFuncs();\r\n        }\r\n\r\n        if (this._onUpdate) {\r\n            // Block all 'upwards' updates when changing things in this branch.\r\n            this._hasUpdates = true;\r\n            this._onUpdate(this.element, this);\r\n        }\r\n\r\n        const pw = this._parent._worldContext;\r\n        let w = this._worldContext;\r\n        const visible = (pw.alpha && this._localAlpha);\r\n\r\n        /**\r\n         * We must update if:\r\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\r\n         * - there are (inherited) updates and this branch is visible\r\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\r\n         */\r\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\r\n            let recalc = this._recalc;\r\n\r\n            // Update world coords/alpha.\r\n            if (recalc & 1) {\r\n                if (!w.alpha && visible) {\r\n                    // Becomes visible.\r\n                    this._hasRenderUpdates = 3;\r\n                }\r\n                w.alpha = pw.alpha * this._localAlpha;\r\n\r\n                if (w.alpha < 1e-14) {\r\n                    // Tiny rounding errors may cause failing visibility tests.\r\n                    w.alpha = 0;\r\n                }\r\n            }\r\n\r\n            if (recalc & 6) {\r\n                let calculatedX = this._localPx;\r\n                if (window.isRTL && !this._ignoreRTL) {\r\n                    const parentW = this._element.__parent ? this._parent.w || 0 : this.ctx.stage.getOption('w');\r\n                    calculatedX = parentW - (this._w || 0) - this._localPx;\r\n                }\r\n\r\n                w.px = pw.px + calculatedX * pw.ta;\r\n                w.py = pw.py + this._localPy * pw.td;\r\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\r\n                if (pw.tc !== 0) w.py += calculatedX * pw.tc;\r\n            }\r\n\r\n            if (recalc & 4) {\r\n                w.ta = this._localTa * pw.ta;\r\n                w.tb = this._localTd * pw.tb;\r\n                w.tc = this._localTa * pw.tc;\r\n                w.td = this._localTd * pw.td;\r\n\r\n                if (this._isComplex) {\r\n                    w.ta += this._localTc * pw.tb;\r\n                    w.tb += this._localTb * pw.ta;\r\n                    w.tc += this._localTc * pw.td;\r\n                    w.td += this._localTb * pw.tc;\r\n                }\r\n            }\r\n\r\n            // Update render coords/alpha.\r\n            const pr = this._parent._renderContext;\r\n            if (this._parent._hasRenderContext()) {\r\n                const init = this._renderContext === this._worldContext;\r\n                if (init) {\r\n                    // First render context build: make sure that it is fully initialized correctly.\r\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\r\n                    this._renderContext = new ElementCoreContext();\r\n                }\r\n\r\n                const r = this._renderContext;\r\n\r\n                // Update world coords/alpha.\r\n                if (init || (recalc & 1)) {\r\n                    r.alpha = pr.alpha * this._localAlpha;\r\n\r\n                    if (r.alpha < 1e-14) {\r\n                        r.alpha = 0;\r\n                    }\r\n                }\r\n\r\n                if (init || (recalc & 6)) {\r\n                    let calculatedX = this._localPx;\r\n                    if (window.isRTL && !this._ignoreRTL) {\r\n                      const parentW = this._element.__parent\r\n                        ? this._parent.w || 0\r\n                        : this.ctx.stage.getOption(\"w\");\r\n                      calculatedX = parentW - (this._w || 0) - this._localPx;\r\n                    }\r\n                    \r\n                    r.px = pr.px + calculatedX * pr.ta;\r\n                    r.py = pr.py + this._localPy * pr.td;\r\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\r\n                    if (pr.tc !== 0) r.py += calculatedX * pr.tc;\r\n                }\r\n\r\n                if (init) {\r\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\r\n                    recalc |= 2;\r\n                }\r\n\r\n                if (init || (recalc & 4)) {\r\n                    r.ta = this._localTa * pr.ta;\r\n                    r.tb = this._localTd * pr.tb;\r\n                    r.tc = this._localTa * pr.tc;\r\n                    r.td = this._localTd * pr.td;\r\n\r\n                    if (this._isComplex) {\r\n                        r.ta += this._localTc * pr.tb;\r\n                        r.tb += this._localTb * pr.ta;\r\n                        r.tc += this._localTc * pr.td;\r\n                        r.td += this._localTb * pr.tc;\r\n                    }\r\n                }\r\n            } else {\r\n                this._renderContext = this._worldContext;\r\n            }\r\n\r\n            if (this.ctx.updateTreeOrder === -1) {\r\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\r\n            } else {\r\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\r\n            }\r\n\r\n            // Determine whether we must use a 'renderTexture'.\r\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\r\n            if (this._useRenderToTexture !== useRenderToTexture) {\r\n                // Coords must be changed.\r\n                this._recalc |= 2 + 4;\r\n\r\n                // Scissor may change: force update.\r\n                recalc |= 2;\r\n\r\n                if (!this._useRenderToTexture) {\r\n                    // We must release the texture.\r\n                    this._texturizer.release();\r\n                }\r\n            }\r\n            this._useRenderToTexture = useRenderToTexture;\r\n\r\n            const r = this._renderContext;\r\n\r\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\r\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\r\n\r\n            // Calculate a bbox for this element.\r\n            let sx, sy, ex, ey;\r\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\r\n            if (rComplex) {\r\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\r\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\r\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\r\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\r\n            } else {\r\n                sx = r.px;\r\n                ex = r.px + r.ta * bboxW;\r\n                sy = r.py;\r\n                ey = r.py + r.td * bboxH;\r\n            }\r\n\r\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\r\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\r\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\r\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\r\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\r\n                if (nx < sx) sx = nx;\r\n                if (ny < sy) sy = ny;\r\n                if (nx > ex) ex = nx;\r\n                if (ny > ey) ey = ny;\r\n            }\r\n\r\n            if (recalc & 6 || !this._scissor /* initial */) {\r\n                // Determine whether we must 'clip'.\r\n                if (this._clipping && r.isSquare()) {\r\n                    // If the parent renders to a texture, it's scissor should be ignored;\r\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\r\n                    if (area) {\r\n                        // Merge scissor areas.\r\n                        const lx = Math.max(area[0], sx);\r\n                        const ly = Math.max(area[1], sy);\r\n                        this._scissor = [\r\n                            lx,\r\n                            ly,\r\n                            Math.min(area[2] + area[0], ex) - lx,\r\n                            Math.min(area[3] + area[1], ey) - ly\r\n                        ];\r\n                    } else {\r\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\r\n                    }\r\n                } else {\r\n                    // No clipping: reuse parent scissor.\r\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\r\n                }\r\n            }\r\n\r\n            // Calculate the outOfBounds margin.\r\n            if (this._boundsMargin) {\r\n                this._recBoundsMargin = this._boundsMargin;\r\n            } else {\r\n                this._recBoundsMargin = this._parent._recBoundsMargin;\r\n            }\r\n\r\n            if (this._onAfterCalcs) {\r\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\r\n                if (this._onAfterCalcs(this.element)) {\r\n                    // Recalculate bbox.\r\n                    if (rComplex) {\r\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\r\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\r\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\r\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\r\n                    } else {\r\n                        sx = r.px;\r\n                        ex = r.px + r.ta * bboxW;\r\n                        sy = r.py;\r\n                        ey = r.py + r.td * bboxH;\r\n                    }\r\n\r\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\r\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\r\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\r\n                        if (nx < sx) sx = nx;\r\n                        if (ny < sy) sy = ny;\r\n                        if (nx > ex) ex = nx;\r\n                        if (ny > ey) ey = ny;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._parent._outOfBounds === 2) {\r\n                // Inherit parent out of boundsness.\r\n                this._outOfBounds = 2;\r\n\r\n                if (this._withinBoundsMargin) {\r\n                    this._withinBoundsMargin = false;\r\n                    this.element._disableWithinBoundsMargin();\r\n                }\r\n            } else {\r\n                if (recalc & 6) {\r\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\r\n                    this._outOfBounds = 0;\r\n                    let withinMargin = true;\r\n\r\n                    // Offscreens are always rendered as long as the parent is within bounds.\r\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\r\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\r\n                            // Empty scissor area.\r\n                            this._outOfBounds = 2;\r\n                        } else {\r\n                            // Use bbox to check out-of-boundness.\r\n                            if ((this._scissor[0] > ex) ||\r\n                                (this._scissor[1] > ey) ||\r\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\r\n                                (sy > (this._scissor[1] + this._scissor[3]))\r\n                            ) {\r\n                                this._outOfBounds = 1;\r\n                            }\r\n\r\n                            if (this._outOfBounds) {\r\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\r\n                                    this._outOfBounds = 2;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        withinMargin = (this._outOfBounds === 0);\r\n                        if (!withinMargin) {\r\n                            // Re-test, now with margins.\r\n                            if (this._recBoundsMargin) {\r\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\r\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\r\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\r\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\r\n                            } else {\r\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\r\n                                    (ey < this._scissor[1] - 100) ||\r\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\r\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\r\n                            }\r\n                            if (withinMargin && this._outOfBounds === 2) {\r\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\r\n                                this._outOfBounds = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this._withinBoundsMargin !== withinMargin) {\r\n                        this._withinBoundsMargin = withinMargin;\r\n\r\n                        if (this._withinBoundsMargin) {\r\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\r\n\r\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\r\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\r\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\r\n                            // _recalc directly.\r\n\r\n                            // Changes in descendants are automatically executed within the current update loop, though we must\r\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\r\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\r\n                            this._hasUpdates = true;\r\n\r\n                            const recalc = this._recalc;\r\n                            this._recalc = 0;\r\n                            this.element._enableWithinBoundsMargin();\r\n\r\n                            if (this._recalc) {\r\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\r\n                                return this.update();\r\n                            }\r\n\r\n                            this._recalc = recalc;\r\n                        } else {\r\n                            this.element._disableWithinBoundsMargin();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._useRenderToTexture) {\r\n                // Set viewport necessary for children scissor calculation.\r\n                if (this._viewport) {\r\n                    this._viewport[2] = bboxW;\r\n                    this._viewport[3] = bboxH;\r\n                } else {\r\n                    this._viewport = [0, 0, bboxW, bboxH];\r\n                }\r\n            }\r\n\r\n            // Filter out bits that should not be copied to the children (currently all are).\r\n            this._pRecalc = (this._recalc & 135);\r\n\r\n            // Clear flags so that future updates are properly detected.\r\n            this._recalc = 0;\r\n            this._hasUpdates = false;\r\n\r\n            if (this._outOfBounds < 2) {\r\n                if (this._useRenderToTexture) {\r\n                    if (this._worldContext.isIdentity()) {\r\n                        // Optimization.\r\n                        // The world context is already identity: use the world context as render context to prevents the\r\n                        // ancestors from having to update the render context.\r\n                        this._renderContext = this._worldContext;\r\n                    } else {\r\n                        // Temporarily replace the render coord attribs by the identity matrix.\r\n                        // This allows the children to calculate the render context.\r\n                        this._renderContext = ElementCoreContext.IDENTITY;\r\n                    }\r\n                }\r\n\r\n                if (this._children) {\r\n                    for (let i = 0, n = this._children.length; i < n; i++) {\r\n                        this._children[i].update();\r\n                    }\r\n                }\r\n\r\n                if (this._useRenderToTexture) {\r\n                    this._renderContext = r;\r\n                }\r\n            } else {\r\n                if (this._children) {\r\n                    for (let i = 0, n = this._children.length; i < n; i++) {\r\n                        if (this._children[i]._hasUpdates) {\r\n                            this._children[i].update();\r\n                        } else {\r\n                            // Make sure we don't lose the 'inherited' updates.\r\n                            this._children[i]._recalc |= this._pRecalc;\r\n                            this._children[i].updateOutOfBounds();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._onAfterUpdate) {\r\n                this._onAfterUpdate(this.element);\r\n            }\r\n        } else {\r\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\r\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\r\n                this.ctx.updateTreeOrder = -1;\r\n            } else {\r\n                this.updateTreeOrder();\r\n            }\r\n        }\r\n    }\r\n\r\n    _applyRelativeDimFuncs() {\r\n        if (this._optFlags & 1) {\r\n            const x = this._funcX(this._parent.w);\r\n            if (x !== this._x) {\r\n                this._localPx += (x - this._x);\r\n                this._x = x;\r\n            }\r\n        }\r\n        if (this._optFlags & 2) {\r\n            const y = this._funcY(this._parent.h);\r\n            if (y !== this._y) {\r\n                this._localPy += (y - this._y);\r\n                this._y = y;\r\n            }\r\n        }\r\n\r\n        let changedDims = false;\r\n        if (this._optFlags & 4) {\r\n            const w = this._funcW(this._parent.w);\r\n            if (w !== this._w) {\r\n                this._w = w;\r\n                changedDims = true;\r\n            }\r\n        }\r\n        if (this._optFlags & 8) {\r\n            const h = this._funcH(this._parent.h);\r\n            if (h !== this._h) {\r\n                this._h = h;\r\n                changedDims = true;\r\n            }\r\n        }\r\n\r\n        if (changedDims) {\r\n            // Recalc mount, scale position.\r\n            this._recalcLocalTranslate();\r\n\r\n            this.element.onDimensionsChanged(this._w, this._h);\r\n        }\r\n    }\r\n\r\n    updateOutOfBounds() {\r\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\r\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\r\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\r\n\r\n            // Inherit parent out of boundsness.\r\n            this._outOfBounds = 2;\r\n\r\n            if (this._withinBoundsMargin) {\r\n                this._withinBoundsMargin = false;\r\n                this.element._disableWithinBoundsMargin();\r\n            }\r\n\r\n            if (this._children) {\r\n                for (let i = 0, n = this._children.length; i < n; i++) {\r\n                    this._children[i].updateOutOfBounds();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateTreeOrder() {\r\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\r\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\r\n\r\n            if (this._children) {\r\n                for (let i = 0, n = this._children.length; i < n; i++) {\r\n                    this._children[i].updateTreeOrder();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderSimple() {\r\n        this._hasRenderUpdates = 0;\r\n\r\n        if (this._zSort) {\r\n            this.sortZIndexedChildren();\r\n        }\r\n\r\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\r\n            let renderState = this.renderState;\r\n\r\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\r\n                renderState.setShader(this.activeShader, this._shaderOwner);\r\n                renderState.setScissor(this._scissor);\r\n                this.renderState.addQuad(this);\r\n            }\r\n\r\n            // Also add children to the VBO.\r\n            if (this._children) {\r\n                if (this._zContextUsage) {\r\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\r\n                        this._zIndexedChildren[i].render();\r\n                    }\r\n                } else {\r\n                    for (let i = 0, n = this._children.length; i < n; i++) {\r\n                        if (this._children[i]._zIndex === 0) {\r\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\r\n                            this._children[i].render();\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderAdvanced() {\r\n        const hasRenderUpdates = this._hasRenderUpdates;\r\n\r\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\r\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\r\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\r\n        this._hasRenderUpdates = 0;\r\n\r\n        if (this._zSort) {\r\n            this.sortZIndexedChildren();\r\n        }\r\n\r\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\r\n            let renderState = this.renderState;\r\n\r\n            let mustRenderChildren = true;\r\n            let renderTextureInfo;\r\n            let prevRenderTextureInfo;\r\n            if (this._useRenderToTexture) {\r\n                if (this._w === 0 || this._h === 0) {\r\n                    // Ignore this branch and don't draw anything.\r\n                    return;\r\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\r\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\r\n                    this.ctx.renderToTextureCount++;\r\n                    // Switch to default shader for building up the render texture.\r\n                    renderState.setShader(renderState.defaultShader, this);\r\n\r\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\r\n\r\n                    renderTextureInfo = {\r\n                        nativeTexture: null,\r\n                        offset: 0,  // Set by CoreRenderState.\r\n                        w: this._w,\r\n                        h: this._h,\r\n                        empty: true,\r\n                        cleared: false,\r\n                        ignore: false,\r\n                        cache: false\r\n                    };\r\n\r\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\r\n                        /**\r\n                         * We don't always cache render textures.\r\n                         *\r\n                         * The rule is, that caching for a specific render texture is only enabled if:\r\n                         * - There is a result texture to be updated.\r\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\r\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\r\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\r\n                         *   change while a lower one is not, that lower level will be cached instead.\r\n                         *\r\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\r\n                         * of GPU memory!\r\n                         *\r\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\r\n                         * noticable effect on performance as less render textures need to be allocated.\r\n                         */\r\n                        renderTextureInfo.cache = true;\r\n                        renderState.isCachingTexturizer = true;\r\n                    }\r\n\r\n                    if (!this._texturizer.hasResultTexture()) {\r\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\r\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\r\n                        //  render-to-texture layer.\r\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\r\n                        //  that result texture being filled.\r\n                        this._texturizer.releaseRenderTexture();\r\n                    }\r\n\r\n                    renderState.setRenderTextureInfo(renderTextureInfo);\r\n                    renderState.setScissor(null);\r\n\r\n                    if (this._displayedTextureSource) {\r\n                        let r = this._renderContext;\r\n\r\n                        // Use an identity context for drawing the displayed texture to the render texture.\r\n                        this._renderContext = ElementCoreContext.IDENTITY;\r\n\r\n                        // Add displayed texture source in local coordinates.\r\n                        this.renderState.addQuad(this);\r\n\r\n                        this._renderContext = r;\r\n                    }\r\n                } else {\r\n                    mustRenderChildren = false;\r\n                }\r\n            } else {\r\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\r\n                    renderState.setShader(this.activeShader, this._shaderOwner);\r\n                    renderState.setScissor(this._scissor);\r\n                    this.renderState.addQuad(this);\r\n                }\r\n            }\r\n\r\n            // Also add children to the VBO.\r\n            if (mustRenderChildren && this._children) {\r\n                if (this._zContextUsage) {\r\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\r\n                        this._zIndexedChildren[i].render();\r\n                    }\r\n                } else {\r\n                    for (let i = 0, n = this._children.length; i < n; i++) {\r\n                        if (this._children[i]._zIndex === 0) {\r\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\r\n                            this._children[i].render();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._useRenderToTexture) {\r\n                let updateResultTexture = false;\r\n                if (mustRenderChildren) {\r\n                    // Finished refreshing renderTexture.\r\n                    renderState.finishedRenderTexture();\r\n\r\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\r\n                    //  render-to-texture and filtering.\r\n                    this._texturizer.empty = renderTextureInfo.empty;\r\n\r\n                    if (renderTextureInfo.empty) {\r\n                        // We ignore empty render textures and do not draw the final quad.\r\n\r\n                        // The following cleans up memory and enforces that the result texture is also cleared.\r\n                        this._texturizer.releaseRenderTexture();\r\n                    } else if (renderTextureInfo.nativeTexture) {\r\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\r\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\r\n\r\n                        renderTextureInfo.ignore = true;\r\n                    } else {\r\n                        if (this._texturizer.renderTextureReused) {\r\n                            // Quad operations must be written to a render texture actually owned.\r\n                            this._texturizer.releaseRenderTexture();\r\n                        }\r\n                        // Just create the render texture.\r\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\r\n                    }\r\n\r\n                    // Restore the parent's render texture.\r\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\r\n\r\n                    updateResultTexture = true;\r\n                }\r\n\r\n                if (!this._texturizer.empty) {\r\n                    let resultTexture = this._texturizer.getResultTexture();\r\n                    if (updateResultTexture) {\r\n                        if (resultTexture) {\r\n                            // Logging the update frame can be handy for userland.\r\n                            resultTexture.update = renderState.stage.frameCounter;\r\n                        }\r\n                        this._texturizer.updateResultTexture();\r\n                    }\r\n\r\n                    if (!this._texturizer.renderOffscreen) {\r\n                        // Render result texture to the actual render target.\r\n                        renderState.setShader(this.activeShader, this._shaderOwner);\r\n                        renderState.setScissor(this._scissor);\r\n\r\n                        // If no render texture info is set, the cache can be reused.\r\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\r\n\r\n                        renderState.setTexturizer(this._texturizer, cache);\r\n                        this._stashTexCoords();\r\n                        if (!this._texturizer.colorize) this._stashColors();\r\n                        this.renderState.addQuad(this, true);\r\n                        if (!this._texturizer.colorize) this._unstashColors();\r\n                        this._unstashTexCoords();\r\n                        renderState.setTexturizer(null);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (renderTextureInfo && renderTextureInfo.cache) {\r\n                // Allow siblings to cache.\r\n                renderState.isCachingTexturizer = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    get zSort() {\r\n        return this._zSort;\r\n    }\r\n\r\n    sortZIndexedChildren() {\r\n        /**\r\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\r\n         * - filtering out elements with a different zParent than this (were removed)\r\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\r\n         * - then, finally, we merge-sort both the new array and the 'old' one\r\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\r\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\r\n         */\r\n\r\n        const n = this._zIndexedChildren.length;\r\n        let ptr = 0;\r\n        const a = this._zIndexedChildren;\r\n\r\n        // Notice that items may occur multiple times due to z-index changing.\r\n        const b = [];\r\n        for (let i = 0; i < n; i++) {\r\n            if (a[i]._zParent === this) {\r\n                if (a[i]._zIndexResort) {\r\n                    b.push(a[i]);\r\n                } else {\r\n                    if (ptr !== i) {\r\n                        a[ptr] = a[i];\r\n                    }\r\n                    ptr++;\r\n                }\r\n            }\r\n        }\r\n\r\n        const m = b.length;\r\n        if (m) {\r\n            for (let j = 0; j < m; j++) {\r\n                b[j]._zIndexResort = false;\r\n            }\r\n\r\n            b.sort(ElementCore.sortZIndexedChildren);\r\n            const n = ptr;\r\n            if (!n) {\r\n                ptr = 0;\r\n                let j = 0;\r\n                do {\r\n                    a[ptr++] = b[j++];\r\n                } while (j < m);\r\n\r\n                if (a.length > ptr) {\r\n                    // Slice old (unnecessary) part off array.\r\n                    a.splice(ptr);\r\n                }\r\n            } else {\r\n                a.splice(n); // Remove items that were sorted in b array, so that we can sort a\r\n+               // Beware that the function passed here to Array.sort must be stable\r\n+               a.sort(ElementCore.sortZIndexedChildren); // Needed because items with same _zIndex may not be ordered by _updateTreeOrder\r\n                // Merge-sort arrays;\r\n                ptr = 0;\r\n                let i = 0;\r\n                let j = 0;\r\n                const mergeResult = [];\r\n                do {\r\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\r\n\r\n                    const add = v > 0 ? b[j++] : a[i++];\r\n\r\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\r\n                        mergeResult[ptr++] = add;\r\n                    }\r\n\r\n                    if (i >= n) {\r\n                        do {\r\n                            const add = b[j++];\r\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\r\n                                mergeResult[ptr++] = add;\r\n                            }\r\n                        } while (j < m);\r\n                        break;\r\n                    } else if (j >= m) {\r\n                        do {\r\n                            const add = a[i++];\r\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\r\n                                mergeResult[ptr++] = add;\r\n                            }\r\n                        } while (i < n);\r\n                        break;\r\n                    }\r\n                } while (true);\r\n\r\n                this._zIndexedChildren = mergeResult;\r\n            }\r\n        } else {\r\n            if (a.length > ptr) {\r\n                // Slice old (unnecessary) part off array.\r\n                a.splice(ptr);\r\n            }\r\n        }\r\n\r\n        this._zSort = false;\r\n    };\r\n\r\n    get localTa() {\r\n        return this._localTa;\r\n    };\r\n\r\n    get localTb() {\r\n        return this._localTb;\r\n    };\r\n\r\n    get localTc() {\r\n        return this._localTc;\r\n    };\r\n\r\n    get localTd() {\r\n        return this._localTd;\r\n    };\r\n\r\n    get element() {\r\n        return this._element;\r\n    }\r\n\r\n    get renderUpdates() {\r\n        return this._hasRenderUpdates;\r\n    }\r\n\r\n    get texturizer() {\r\n        if (!this._texturizer) {\r\n            this._texturizer = new ElementTexturizer(this);\r\n        }\r\n        return this._texturizer;\r\n    }\r\n\r\n    getCornerPoints() {\r\n        let w = this._worldContext;\r\n\r\n        return [\r\n            w.px,\r\n            w.py,\r\n            w.px + this._w * w.ta,\r\n            w.py + this._w * w.tc,\r\n            w.px + this._w * w.ta + this._h * w.tb,\r\n            w.py + this._w * w.tc + this._h * w.td,\r\n            w.px + this._h * w.tb,\r\n            w.py + this._h * w.td\r\n        ];\r\n    };\r\n\r\n    getRenderTextureCoords(relX, relY) {\r\n        let r = this._renderContext;\r\n        return [\r\n            r.px + r.ta * relX + r.tb * relY,\r\n            r.py + r.tc * relX + r.td * relY\r\n        ];\r\n    }\r\n\r\n    getAbsoluteCoords(relX, relY) {\r\n        let w = this._renderContext;\r\n        return [\r\n            w.px + w.ta * relX + w.tb * relY,\r\n            w.py + w.tc * relX + w.td * relY\r\n        ];\r\n    }\r\n\r\n    collectAtCoord(x, y, children) {\r\n        // return when branch is hidden\r\n        if (this._renderContext.alpha === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.inBound(x, y)) {\r\n            if (this._scissor) {\r\n                if (this.inScissor()) {\r\n                    children.push(this);\r\n                }\r\n            } else {\r\n                children.push(this);\r\n            }\r\n        }\r\n\r\n        if (this._children) {\r\n            const j = this._children.length;\r\n            for (let i = 0; i < j; i++) {\r\n                this._children[i].collectAtCoord(x, y, children);\r\n            }\r\n        }\r\n\r\n        return children.sort(ElementCore.sortZIndexedChildren);\r\n    }\r\n\r\n    inBound(tx, ty) {\r\n        const c = this.getCornerPoints();\r\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\r\n    }\r\n\r\n    inScissor() {\r\n        const sc = this._scissor;\r\n        const c = this.getCornerPoints();\r\n\r\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\r\n    }\r\n\r\n    get layout() {\r\n        this._ensureLayout();\r\n        return this._layout;\r\n    }\r\n\r\n    get flex() {\r\n        return this._layout ? this._layout.flex : null;\r\n    }\r\n\r\n    set flex(v) {\r\n        this.layout.flex = v;\r\n    }\r\n\r\n    get flexItem() {\r\n        return this._layout ? this._layout.flexItem : null;\r\n    }\r\n\r\n    set flexItem(v) {\r\n        this.layout.flexItem = v;\r\n    }\r\n\r\n    isFlexItem() {\r\n        return !!this._layout && this._layout.isFlexItemEnabled();\r\n    }\r\n\r\n    isFlexContainer() {\r\n        return !!this._layout && this._layout.isFlexEnabled();\r\n    }\r\n\r\n    enableFlexLayout() {\r\n        this._ensureLayout();\r\n    }\r\n\r\n    _ensureLayout() {\r\n        if (!this._layout) {\r\n            this._layout = new FlexTarget(this);\r\n        }\r\n    }\r\n\r\n    disableFlexLayout() {\r\n        this._triggerRecalcTranslate();\r\n    }\r\n\r\n    hasFlexLayout() {\r\n        return (this._layout && this._layout.isEnabled());\r\n    }\r\n\r\n    setLayout(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this._updateDimensions(w, h);\r\n    }\r\n\r\n    triggerLayout() {\r\n        this._setRecalc(256);\r\n    }\r\n\r\n    _triggerRecalcTranslate() {\r\n        this._setRecalc(2);\r\n    }\r\n\r\n}\r\n\r\nclass ElementCoreContext {\r\n\r\n    constructor() {\r\n        this.alpha = 1;\r\n\r\n        this.px = 0;\r\n        this.py = 0;\r\n\r\n        this.ta = 1;\r\n        this.tb = 0;\r\n        this.tc = 0;\r\n        this.td = 1;\r\n    }\r\n\r\n    isIdentity() {\r\n        return this.alpha === 1 &&\r\n            this.px === 0 &&\r\n            this.py === 0 &&\r\n            this.ta === 1 &&\r\n            this.tb === 0 &&\r\n            this.tc === 0 &&\r\n            this.td === 1;\r\n    }\r\n\r\n    isSquare() {\r\n        return this.tb === 0 && this.tc === 0;\r\n    }\r\n\r\n}\r\n\r\nElementCoreContext.IDENTITY = new ElementCoreContext();\r\nElementCore.sortZIndexedChildren = function (a, b) {\r\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\r\n};\r\n\r\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\r\nimport Utils from \"../Utils.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * This is a partial (and more efficient) implementation of the event emitter.\r\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\r\n * Only if there are multiple listeners, they are combined in an array.\r\n */\r\nexport default class EventEmitter {\r\n\r\n    constructor() {\r\n        // This is set (and kept) to true when events are used at all.\r\n        this._hasEventListeners = false;\r\n    }\r\n\r\n    on(name, listener) {\r\n        if (!this._hasEventListeners) {\r\n            this._eventFunction = {}\r\n            this._eventListeners = {}\r\n            this._hasEventListeners = true;\r\n        }\r\n\r\n        const current = this._eventFunction[name];\r\n        if (!current) {\r\n            this._eventFunction[name] = listener;\r\n        } else {\r\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\r\n                this._eventListeners[name] = [this._eventFunction[name], listener];\r\n                this._eventFunction[name] = EventEmitter.combiner;\r\n            } else {\r\n                this._eventListeners[name].push(listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    once(name, listener) {\r\n        const wrapper = (arg1, arg2, arg3) => {\r\n            listener(arg1, arg2, arg3);\r\n            this.off(name, wrapper);\r\n        }\r\n        wrapper.__originalFunc = listener;\r\n        this.on(name, wrapper);\r\n    }\r\n\r\n    has(name, listener) {\r\n        if (this._hasEventListeners) {\r\n            const current = this._eventFunction[name];\r\n            if (current) {\r\n                if (current === EventEmitter.combiner) {\r\n                    const listeners = this._eventListeners[name];\r\n                    for (const l of listeners) {\r\n                        if (l === listener || l.__originalFunc == listener) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    off(name, listener) {\r\n        if (this._hasEventListeners) {\r\n            const current = this._eventFunction[name];\r\n            if (current) {\r\n                if (current === EventEmitter.combiner) {\r\n                    const listeners = this._eventListeners[name];\r\n                    let index = listeners.indexOf(listener);\r\n                    if (index >= 0) {\r\n                        listeners.splice(index, 1);\r\n                    }\r\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\r\n                    if (index >= 0) {\r\n                        listeners.splice(index, 1);\r\n                    }\r\n                    if (listeners.length === 1) {\r\n                        this._eventFunction[name] = listeners[0];\r\n                        this._eventListeners[name] = undefined;\r\n                    }\r\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\r\n                    this._eventFunction[name] = undefined;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeListener(name, listener) {\r\n        this.off(name, listener);\r\n    }\r\n\r\n    emit(name, arg1, arg2, arg3) {\r\n        if (this._hasEventListeners) {\r\n            const func = this._eventFunction[name];\r\n            if (func) {\r\n                if (func === EventEmitter.combiner) {\r\n                    func(this, name, arg1, arg2, arg3);\r\n                } else {\r\n                    func(arg1, arg2, arg3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    listenerCount(name) {\r\n        if (this._hasEventListeners) {\r\n            const func = this._eventFunction[name];\r\n            if (func) {\r\n                if (func === EventEmitter.combiner) {\r\n                    return this._eventListeners[name].length;\r\n                } else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    removeAllListeners(name) {\r\n        if (this._hasEventListeners) {\r\n            delete this._eventFunction[name];\r\n            delete this._eventListeners[name];\r\n        }\r\n    }\r\n\r\n}\r\n\r\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\r\n    const listeners = object._eventListeners[name];\r\n    if (listeners) {\r\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\r\n           we need to create a copy to loop over it */\r\n        for (const listener of [...listeners]) {\r\n            listener(arg1, arg2, arg3);\r\n        }\r\n    }\r\n}\r\n\r\nEventEmitter.addAsMixin = function(cls) {\r\n    cls.prototype.on = EventEmitter.prototype.on;\r\n    cls.prototype.once = EventEmitter.prototype.once;\r\n    cls.prototype.has = EventEmitter.prototype.has;\r\n    cls.prototype.off = EventEmitter.prototype.off;\r\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\r\n    cls.prototype.emit = EventEmitter.prototype.emit;\r\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\r\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"./Utils.mjs\";\r\nimport Base from \"./Base.mjs\";\r\n\r\nexport default class Shader {\r\n\r\n    constructor(coreContext) {\r\n        this._initialized = false;\r\n\r\n        this.ctx = coreContext;\r\n\r\n        /**\r\n         * The (enabled) elements that use this shader.\r\n         * @type {Set<ElementCore>}\r\n         */\r\n        this._elements = new Set();\r\n    }\r\n\r\n    static create(stage, v) {\r\n        let shader;\r\n        if (Utils.isObjectLiteral(v)) {\r\n            if (v.type) {\r\n                shader = stage.renderer.createShader(stage.ctx, v);\r\n            } else {\r\n                shader = this.shader;\r\n            }\r\n\r\n            if (shader) {\r\n                Base.patchObject(shader, v);\r\n            }\r\n        } else if (v === null) {\r\n            shader = stage.ctx.renderState.defaultShader;\r\n        } else if (v === undefined) {\r\n            shader = null;\r\n        } else {\r\n            if (v.isShader) {\r\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\r\n                    console.error(\"[Lightning] Invalid shader type\");\r\n                    v = null;\r\n                }\r\n                shader = v;\r\n            } else {\r\n                console.error(\"[Lightning] Please specify a shader type.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    static getWebGL() {\r\n        return undefined;\r\n    }\r\n\r\n    static getC2d() {\r\n        return undefined;\r\n    }\r\n\r\n    addElement(elementCore) {\r\n        this._elements.add(elementCore);\r\n    }\r\n\r\n    removeElement(elementCore) {\r\n        this._elements.delete(elementCore);\r\n        if (!this._elements) {\r\n            this.cleanup();\r\n        }\r\n    }\r\n\r\n    redraw() {\r\n        this._elements.forEach(elementCore => {\r\n            elementCore.setHasRenderUpdates(2);\r\n        });\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n    useDefault() {\r\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\r\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\r\n        return false;\r\n    }\r\n\r\n    addEmpty() {\r\n        // Draws this shader even if there are no quads to be added.\r\n        // This is handy for custom shaders.\r\n        return false;\r\n    }\r\n\r\n    cleanup() {\r\n        // Called when no more enabled elements have this shader.\r\n    }\r\n\r\n    get isShader() {\r\n        return true;\r\n    }\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class Texture {\r\n\r\n    /**\r\n     * @param {Stage} stage\r\n     */\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.manager = this.stage.textureManager;\r\n\r\n        this.id = Texture.id++;\r\n\r\n        /**\r\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\r\n         * @type {Set<Element>}\r\n         */\r\n        this.elements = new Set();\r\n\r\n        /**\r\n         * The number of enabled elements that are active.\r\n         * @type {number}\r\n         */\r\n        this._activeCount = 0;\r\n\r\n        /**\r\n         * The associated texture source.\r\n         * Should not be changed.\r\n         * @type {TextureSource}\r\n         */\r\n        this._source = null;\r\n\r\n        /**\r\n         * A resize mode can be set to cover or contain a certain area.\r\n         * It will reset the texture clipping settings.\r\n         * When manual texture clipping is performed, the resizeMode is reset.\r\n         * @type {{type: string, width: number, height: number}}\r\n         * @private\r\n         */\r\n        this._resizeMode = null;\r\n\r\n        /**\r\n         * The texture clipping x-offset.\r\n         * @type {number}\r\n         */\r\n        this._x = 0;\r\n\r\n        /**\r\n         * The texture clipping y-offset.\r\n         * @type {number}\r\n         */\r\n        this._y = 0;\r\n\r\n        /**\r\n         * The texture clipping width. If 0 then full width.\r\n         * @type {number}\r\n         */\r\n        this._w = 0;\r\n\r\n        /**\r\n         * The texture clipping height. If 0 then full height.\r\n         * @type {number}\r\n         */\r\n        this._h = 0;\r\n\r\n        /**\r\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._precision = 1;\r\n\r\n        /**\r\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\r\n         * If not set, 2048 is used by ElementCore.update.\r\n         * @type {number}\r\n         */\r\n        this.mw = 0;\r\n\r\n        /**\r\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\r\n         * If not set, 2048 is used by ElementCore.update.\r\n         * @type {number}\r\n         */\r\n        this.mh = 0;\r\n\r\n        /**\r\n         * Indicates if Texture.prototype.texture uses clipping.\r\n         * @type {boolean}\r\n         */\r\n        this.clipping = false;\r\n\r\n        /**\r\n         * Indicates whether this texture must update (when it becomes used again).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._mustUpdate = true;\r\n\r\n    }\r\n\r\n    get source() {\r\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\r\n            this._performUpdateSource(true);\r\n            this.stage.removeUpdateSourceTexture(this);\r\n        }\r\n        return this._source;\r\n    }\r\n\r\n    addElement(v) {\r\n        if (!this.elements.has(v)) {\r\n            this.elements.add(v);\r\n\r\n            if (this.elements.size === 1) {\r\n                if (this._source) {\r\n                    this._source.addTexture(this);\r\n                }\r\n            }\r\n\r\n            if (v.active) {\r\n                this.incActiveCount();\r\n            }\r\n        }\r\n    }\r\n\r\n    removeElement(v) {\r\n        if (this.elements.delete(v)) {\r\n            if (this.elements.size === 0) {\r\n                if (this._source) {\r\n                    this._source.removeTexture(this);\r\n                }\r\n            }\r\n\r\n            if (v.active) {\r\n                this.decActiveCount();\r\n            }\r\n        }\r\n    }\r\n\r\n    incActiveCount() {\r\n        // Ensure that texture source's activeCount has transferred ownership.\r\n        const source = this.source;\r\n\r\n        if (source) {\r\n            this._checkForNewerReusableTextureSource();\r\n        }\r\n\r\n        this._activeCount++;\r\n        if (this._activeCount === 1) {\r\n            this.becomesUsed();\r\n        }\r\n    }\r\n\r\n    decActiveCount() {\r\n        const source = this.source; // Force updating the source.\r\n        this._activeCount--;\r\n        if (!this._activeCount) {\r\n            this.becomesUnused();\r\n        }\r\n    }\r\n\r\n    becomesUsed() {\r\n        if (this.source) {\r\n            this.source.incActiveTextureCount();\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n        if (this._resizeMode) {\r\n            this._applyResizeMode();\r\n        }\r\n\r\n        this.elements.forEach(element => {\r\n            if (element.active) {\r\n                element.onTextureSourceLoaded();\r\n            }\r\n        });\r\n    }\r\n\r\n    _checkForNewerReusableTextureSource() {\r\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\r\n        // In the meantime another texture may have been generated loaded with the same lookup id.\r\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\r\n        const source = this.source;\r\n        if (!source.isLoaded()) {\r\n            const reusable = this._getReusableTextureSource();\r\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\r\n                this._replaceTextureSource(reusable);\r\n            }\r\n        } else {\r\n            if (this._resizeMode) {\r\n                this._applyResizeMode();\r\n            }\r\n        }\r\n    }\r\n\r\n    becomesUnused() {\r\n        if (this.source) {\r\n            this.source.decActiveTextureCount();\r\n        }\r\n    }\r\n\r\n    isUsed() {\r\n        return this._activeCount > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\r\n     * @returns {string|null}\r\n     */\r\n    _getLookupId() {\r\n        // Default: do not reuse texture.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\r\n     * It should return a function that receives a single callback argument.\r\n     * That callback should be called with the following arguments:\r\n     *   - err\r\n     *   - options: object\r\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\r\n     *     - w: Number\r\n     *     - h: Number\r\n     *     - permanent: Boolean\r\n     *     - hasAlpha: boolean\r\n     *     - permultiplyAlpha: boolean\r\n     *     - flipBlueRed: boolean\r\n     *     - renderInfo: object\r\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\r\n     * to stop fetching an image when it is no longer in element, for example.\r\n     */\r\n    _getSourceLoader() {\r\n        throw new Error(\"Texture.generate must be implemented.\");\r\n    }\r\n\r\n    get isValid() {\r\n        return this._getIsValid();\r\n    }\r\n\r\n    /**\r\n     * If texture is not 'valid', no source can be created for it.\r\n     * @returns {boolean}\r\n     */\r\n    _getIsValid() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This must be called when the texture source must be re-generated.\r\n     */\r\n    _changed() {\r\n        // If no element is actively using this texture, ignore it altogether.\r\n        if (this.isUsed()) {\r\n            this._updateSource();\r\n        } else {\r\n            this._mustUpdate = true;\r\n        }\r\n    }\r\n\r\n    _updateSource() {\r\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\r\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\r\n        // properties.\r\n        this.stage.addUpdateSourceTexture(this);\r\n    }\r\n\r\n    _performUpdateSource(force = false) {\r\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\r\n        // again.\r\n        if (force || this.isUsed()) {\r\n            this._mustUpdate = false;\r\n            let source = this._getTextureSource();\r\n            this._replaceTextureSource(source);\r\n        }\r\n    }\r\n\r\n    _getTextureSource() {\r\n        let source = null;\r\n        if (this._getIsValid()) {\r\n            const lookupId = this._getLookupId();\r\n            source = this._getReusableTextureSource(lookupId);\r\n            if (!source) {\r\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\r\n            }\r\n        }\r\n        return source;\r\n    }\r\n\r\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\r\n        if (this._getIsValid()) {\r\n            if (lookupId) {\r\n                return this.manager.getReusableTextureSource(lookupId);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _replaceTextureSource(newSource = null) {\r\n        let oldSource = this._source;\r\n\r\n        this._source = newSource;\r\n\r\n        if (this.elements.size) {\r\n            if (oldSource) {\r\n                if (this._activeCount) {\r\n                    oldSource.decActiveTextureCount();\r\n                }\r\n\r\n                oldSource.removeTexture(this);\r\n\r\n                // free up unused TextTextures immediately as they are not reused anyway\r\n                if(this['text'] && !oldSource.isUsed()) {\r\n                    this.manager.freeTextureSource(oldSource);\r\n                }\r\n            }\r\n\r\n            if (newSource) {\r\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\r\n                newSource.addTexture(this);\r\n                if (this._activeCount) {\r\n                    newSource.incActiveTextureCount();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.isUsed()) {\r\n            if (newSource) {\r\n                if (newSource.isLoaded()) {\r\n\r\n                    // Apply resizeMode\r\n                    if (this._resizeMode) {\r\n                        this._applyResizeMode();\r\n                    }\r\n\r\n                    this.elements.forEach(element => {\r\n                        if (element.active) {\r\n                            element._setDisplayedTexture(this);\r\n                        }\r\n                    });\r\n                } else {\r\n                    const loadError = newSource.loadError;\r\n                    if (loadError) {\r\n                        this.elements.forEach(element => {\r\n                            if (element.active) {\r\n                                element.onTextureSourceLoadError(loadError);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                this.elements.forEach(element => {\r\n                    if (element.active) {\r\n                        element._setDisplayedTexture(null);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    load() {\r\n        // Make sure that source is up to date.\r\n        if (this.source) {\r\n            if (!this.isLoaded()) {\r\n                this.source.load(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    isLoaded() {\r\n        return this._source && this._source.isLoaded();\r\n    }\r\n\r\n    get loadError() {\r\n        return this._source && this._source.loadError;\r\n    }\r\n\r\n    free() {\r\n        if (this._source) {\r\n            this._source.free();\r\n        }\r\n    }\r\n\r\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\r\n        this._resizeMode = {type, w, h, clipX, clipY};\r\n        if (this.isLoaded()) {\r\n            this._applyResizeMode();\r\n        }\r\n    }\r\n\r\n    get resizeMode() {\r\n        return this._resizeMode;\r\n    }\r\n\r\n    _clearResizeMode() {\r\n        this._resizeMode = null;\r\n    }\r\n\r\n    _applyResizeMode() {\r\n        if (this._resizeMode.type === \"cover\") {\r\n            this._applyResizeCover();\r\n        } else if (this._resizeMode.type === \"contain\") {\r\n            this._applyResizeContain();\r\n        }\r\n        this._updatePrecision();\r\n        this._updateClipping();\r\n    }\r\n\r\n    _applyResizeCover() {\r\n        const scaleX = this._resizeMode.w / this._source.w;\r\n        const scaleY = this._resizeMode.h / this._source.h;\r\n        let scale = Math.max(scaleX, scaleY);\r\n        if (!scale) return;\r\n        this._precision = 1/scale;\r\n        if (scaleX && scaleX < scale) {\r\n            const desiredSize = this._precision * this._resizeMode.w;\r\n            const choppedOffPixels = this._source.w - desiredSize;\r\n            this._x = choppedOffPixels * this._resizeMode.clipX;\r\n            this._w = this._source.w - choppedOffPixels;\r\n        }\r\n        if (scaleY && scaleY < scale) {\r\n            const desiredSize = this._precision * this._resizeMode.h;\r\n            const choppedOffPixels = this._source.h - desiredSize;\r\n            this._y = choppedOffPixels * this._resizeMode.clipY;\r\n            this._h = this._source.h - choppedOffPixels;\r\n        }\r\n    }\r\n\r\n    _applyResizeContain() {\r\n        const scaleX = this._resizeMode.w / this._source.w;\r\n        const scaleY = this._resizeMode.h / this._source.h;\r\n        let scale = scaleX;\r\n        if (!scale || scaleY < scale) {\r\n            scale = scaleY;\r\n        }\r\n        if (!scale) return;\r\n        this._precision = 1/scale;\r\n    }\r\n\r\n    enableClipping(x, y, w, h) {\r\n        this._clearResizeMode();\r\n\r\n        x *= this._precision;\r\n        y *= this._precision;\r\n        w *= this._precision;\r\n        h *= this._precision;\r\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\r\n            this._x = x;\r\n            this._y = y;\r\n            this._w = w;\r\n            this._h = h;\r\n\r\n            this._updateClipping(true);\r\n        }\r\n    }\r\n\r\n    disableClipping() {\r\n        this._clearResizeMode();\r\n\r\n        if (this._x || this._y || this._w || this._h) {\r\n            this._x = 0;\r\n            this._y = 0;\r\n            this._w = 0;\r\n            this._h = 0;\r\n\r\n            this._updateClipping();\r\n        }\r\n    }\r\n\r\n    _updateClipping() {\r\n        this.clipping = !!(this._x || this._y || this._w || this._h);\r\n\r\n        let self = this;\r\n        this.elements.forEach(function(element) {\r\n            // Ignore if not the currently displayed texture.\r\n            if (element.displayedTexture === self) {\r\n                element.onDisplayedTextureClippingChanged();\r\n            }\r\n        });\r\n    }\r\n\r\n    _updatePrecision() {\r\n        let self = this;\r\n        this.elements.forEach(function(element) {\r\n            // Ignore if not the currently displayed texture.\r\n            if (element.displayedTexture === self) {\r\n                element.onPrecisionChanged();\r\n            }\r\n        });\r\n    }\r\n\r\n    getNonDefaults() {\r\n        let nonDefaults = {};\r\n        nonDefaults['type'] = this.constructor.name;\r\n        if (this.x !== 0) nonDefaults['x'] = this.x;\r\n        if (this.y !== 0) nonDefaults['y'] = this.y;\r\n        if (this.w !== 0) nonDefaults['w'] = this.w;\r\n        if (this.h !== 0) nonDefaults['h'] = this.h;\r\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\r\n        return nonDefaults;\r\n    }\r\n\r\n    get px() {\r\n        return this._x;\r\n    }\r\n\r\n    get py() {\r\n        return this._y;\r\n    }\r\n\r\n    get pw() {\r\n        return this._w;\r\n    }\r\n\r\n    get ph() {\r\n        return this._h;\r\n    }\r\n\r\n    get x() {\r\n        return this._x / this._precision;\r\n    }\r\n    set x(v) {\r\n        this._clearResizeMode();\r\n        v = v * this._precision;\r\n        if (this._x !== v) {\r\n            this._x = v;\r\n            this._updateClipping();\r\n        }\r\n    }\r\n\r\n    get y() {\r\n        return this._y / this._precision;\r\n    }\r\n    set y(v) {\r\n        this._clearResizeMode();\r\n        v = v * this._precision;\r\n        if (this._y !== v) {\r\n            this._y = v;\r\n            this._updateClipping();\r\n        }\r\n    }\r\n\r\n    get w() {\r\n        return this._w / this._precision;\r\n    }\r\n\r\n    set w(v) {\r\n        this._clearResizeMode();\r\n        v = v * this._precision;\r\n        if (this._w !== v) {\r\n            this._w = v;\r\n            this._updateClipping();\r\n        }\r\n    }\r\n\r\n    get h() {\r\n        return this._h / this._precision;\r\n    }\r\n\r\n    set h(v) {\r\n        this._clearResizeMode();\r\n        v = v * this._precision;\r\n        if (this._h !== v) {\r\n            this._h = v;\r\n            this._updateClipping();\r\n        }\r\n    }\r\n\r\n    get precision() {\r\n        return this._precision;\r\n    }\r\n\r\n    set precision(v) {\r\n        this._clearResizeMode();\r\n        if (this._precision !== v) {\r\n            this._precision = v;\r\n            this._updatePrecision();\r\n        }\r\n    }\r\n\r\n    isAutosizeTexture() {\r\n        return true;\r\n    }\r\n\r\n    getRenderWidth() {\r\n        if (!this.isAutosizeTexture()) {\r\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\r\n            return 0;\r\n        }\r\n\r\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\r\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\r\n    }\r\n\r\n    getRenderHeight() {\r\n        if (!this.isAutosizeTexture()) {\r\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\r\n            return 0;\r\n        }\r\n\r\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n}\r\n\r\nTexture.prototype.isTexture = true;\r\n\r\nTexture.id = 0;\r\n\r\nimport Base from \"./Base.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class ImageTexture extends Texture {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this._src = undefined;\r\n        this._hasAlpha = false;\r\n    }\r\n\r\n    get src() {\r\n        return this._src;\r\n    }\r\n\r\n    set src(v) {\r\n        if (this._src !== v) {\r\n            this._src = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get hasAlpha() {\r\n        return this._hasAlpha;\r\n    }\r\n\r\n    set hasAlpha(v) {\r\n        if (this._hasAlpha !== v) {\r\n            this._hasAlpha = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    _getIsValid() {\r\n        return !!this._src;\r\n    }\r\n\r\n    _getLookupId() {\r\n        return this._src;\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        let src = this._src;\r\n        let hasAlpha = this._hasAlpha;\r\n        if (this.stage.getOption('srcBasePath')) {\r\n            var fc = src.charCodeAt(0);\r\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\r\n                // Alphabetical or dot: prepend base path.\r\n                src = this.stage.getOption('srcBasePath') + src;\r\n            }\r\n        }\r\n\r\n        return (cb) => {\r\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\r\n        }\r\n    }\r\n\r\n    getNonDefaults() {\r\n        const obj = super.getNonDefaults();\r\n        if (this._src) {\r\n            obj.src = this._src;\r\n        }\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Returns CSS font setting string for use in canvas context.\r\n *\r\n * @param fontFace\r\n * @param fontStyle\r\n * @param fontSize\r\n * @param precision\r\n * @param defaultFontFace\r\n * @returns\r\n */\r\nexport function getFontSetting(\r\n    fontFace: string | string[],\r\n    fontStyle: string,\r\n    fontSize: number,\r\n    precision: number,\r\n    defaultFontFace: string\r\n): string {\r\n    let ff = fontFace;\r\n\r\n    if (!Array.isArray(ff)) {\r\n        ff = [ff];\r\n    }\r\n\r\n    let ffs = [];\r\n    for (let i = 0, n = ff.length; i < n; i++) {\r\n        let curFf = ff[i];\r\n        // Replace the default font face `null` with the actual default font face set\r\n        // on the stage.\r\n        if (curFf === null) {\r\n            curFf = defaultFontFace;\r\n        }\r\n        if (curFf === \"serif\" || curFf === \"sans-serif\") {\r\n            ffs.push(curFf);\r\n        } else {\r\n            ffs.push(`\"${curFf}\"`);\r\n        }\r\n    }\r\n\r\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\r\n}\r\n\r\n/**\r\n * Returns true if the given character is a zero-width space.\r\n *\r\n * @param space\r\n */\r\nexport function isZeroWidthSpace(space: string): boolean {\r\n    return space === '' || space === '\\u200B';\r\n}\r\n\r\n/**\r\n * Returns true if the given character is a zero-width space or a regular space.\r\n *\r\n * @param space\r\n */\r\nexport function isSpace(space: string): boolean {\r\n    return isZeroWidthSpace(space) || space === ' ';\r\n}\r\n\r\n/**\r\n * Converts a string into an array of tokens and the words between them.\r\n *\r\n * @param tokenRegex\r\n * @param text\r\n */\r\nexport function tokenizeString(tokenRegex: RegExp, text: string): string[] {\r\n    const delimeters = text.match(tokenRegex) || [];\r\n    const words = text.split(tokenRegex) || [];\r\n\r\n    let final: string[] = [];\r\n    for (let i = 0; i < words.length; i++) {\r\n        final.push(words[i]!, delimeters[i]!)\r\n    }\r\n    final.pop()\r\n    return final.filter((word) => word != '');\r\n}\r\n\r\n/**\r\n * Measure the width of a string accounting for letter spacing.\r\n *\r\n * @param context\r\n * @param word\r\n * @param space\r\n */\r\nexport function measureText(context: CanvasRenderingContext2D, word: string, space: number = 0): number {\r\n    if (!space) {\r\n        return context.measureText(word).width;\r\n    }\r\n    return word.split('').reduce((acc, char) => {\r\n        // Zero-width spaces should not include letter spacing.\r\n        // And since we know the width of a zero-width space is 0, we can skip\r\n        // measuring it.\r\n        if (isZeroWidthSpace(char)) {\r\n            return acc;\r\n        }\r\n        return acc + context.measureText(char).width + space;\r\n    }, 0);\r\n}\r\n\r\nexport interface WrapTextResult {\r\n    l: string[];\r\n    n: number[];\r\n}\r\n\r\n/**\r\n * Applies newlines to a string to have it optimally fit into the horizontal\r\n * bounds set by the Text object's wordWrapWidth property.\r\n *\r\n * @param context\r\n * @param text\r\n * @param wordWrapWidth\r\n * @param letterSpacing\r\n * @param indent\r\n */\r\nexport function wrapText(\r\n    context: CanvasRenderingContext2D,\r\n    text: string,\r\n    wordWrapWidth: number,\r\n    letterSpacing: number,\r\n    indent: number\r\n): WrapTextResult {\r\n    // Greedy wrapping algorithm that will wrap words as the line grows longer.\r\n    // than its horizontal bounds.\r\n    const spaceRegex = / |\\u200B/g;\r\n    let lines = text.split(/\\r?\\n/g);\r\n    let allLines: string[] = [];\r\n    let realNewlines: number[] = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        let resultLines: string[] = [];\r\n        let result = '';\r\n        let spaceLeft = wordWrapWidth - indent;\r\n        let words = lines[i]!.split(spaceRegex);\r\n        let spaces = lines[i]!.match(spaceRegex) || [];\r\n        for (let j = 0; j < words.length; j++) {\r\n            const space = spaces[j - 1] || '';\r\n            const word = words[j]!;\r\n            const wordWidth = measureText(context, word, letterSpacing);\r\n            const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);\r\n            if (j === 0 || wordWidthWithSpace > spaceLeft) {\r\n                // Skip printing the newline if it's the first word of the line that is.\r\n                // greater than the word wrap width.\r\n                if (j > 0) {\r\n                    resultLines.push(result);\r\n                    result = '';\r\n                }\r\n                result += word;\r\n                spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\r\n            }\r\n            else {\r\n                spaceLeft -= wordWidthWithSpace;\r\n                result += space + word;\r\n            }\r\n        }\r\n\r\n        resultLines.push(result);\r\n        result = '';\r\n\r\n        allLines = allLines.concat(resultLines);\r\n\r\n        if (i < lines.length - 1) {\r\n            realNewlines.push(allLines.length);\r\n        }\r\n    }\r\n\r\n    return {l: allLines, n: realNewlines};\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport { getFontSetting, measureText, wrapText } from \"./TextTextureRendererUtils.mjs\";\r\n\r\nexport default class TextTextureRenderer {\r\n\r\n    constructor(stage, canvas, settings) {\r\n        this._stage = stage;\r\n        this._canvas = canvas;\r\n        this._context = this._canvas.getContext('2d');\r\n        this._settings = settings;\r\n    }\r\n\r\n    getPrecision() {\r\n        return this._settings.precision;\r\n    };\r\n\r\n    setFontProperties() {\r\n        this._context.font = getFontSetting(\r\n            this._settings.fontFace,\r\n            this._settings.fontStyle,\r\n            this._settings.fontSize,\r\n            this.getPrecision(),\r\n            this._stage.getOption('defaultFontFace'),\r\n            this._settings.fontWeight,\r\n        );\r\n        this._context.textBaseline = this._settings.textBaseline;\r\n    };\r\n\r\n    _load() {\r\n        if (Utils.isWeb && document.fonts) {\r\n            const fontSetting = getFontSetting(\r\n                this._settings.fontFace,\r\n                this._settings.fontStyle,\r\n                this._settings.fontSize,\r\n                this.getPrecision(),\r\n                this._stage.getOption('defaultFontFace'),\r\n                this._settings.fontWeight,\r\n            );\r\n            try {\r\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\r\n                    // Use a promise that waits for loading.\r\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\r\n                        // Just load the fallback font.\r\n                        console.warn('[Lightning] Font load error', err, fontSetting);\r\n                    }).then(() => {\r\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\r\n                            console.warn('[Lightning] Font not found', fontSetting);\r\n                        }\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        // We do not use a promise so that loading is performed syncronous when possible.\r\n        const loadPromise = this._load();\r\n        if (!loadPromise) {\r\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\r\n        } else {\r\n            return loadPromise.then(() => {\r\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\r\n            });\r\n        }\r\n    }\r\n\r\n    _calculateRenderInfo() {\r\n        let renderInfo = {};\r\n\r\n        const precision = this.getPrecision();\r\n\r\n        const paddingLeft = this._settings.paddingLeft * precision;\r\n        const paddingRight = this._settings.paddingRight * precision;\r\n        const fontSize = this._settings.fontSize * precision;\r\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\r\n        let lineHeight = this._settings.lineHeight * precision;\r\n        const w = this._settings.w * precision;\r\n        const h = this._settings.h * precision;\r\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\r\n        const cutSx = this._settings.cutSx * precision;\r\n        const cutEx = this._settings.cutEx * precision;\r\n        const cutSy = this._settings.cutSy * precision;\r\n        const cutEy = this._settings.cutEy * precision;\r\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\r\n        const textIndent = this._settings.textIndent * precision;\r\n\r\n        // Set font properties.\r\n        this.setFontProperties();\r\n\r\n        // Total width.\r\n        let width = w || this._stage.getOption('w');\r\n\r\n        // Inner width.\r\n        let innerWidth = width - (paddingLeft);\r\n        if (innerWidth < 10) {\r\n            width += (10 - innerWidth);\r\n            innerWidth = 10;\r\n        }\r\n\r\n        if (!wordWrapWidth) {\r\n            wordWrapWidth = innerWidth;\r\n        }\r\n\r\n        // Text overflow\r\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\r\n            let suffix;\r\n            switch (this._settings.textOverflow) {\r\n                case 'clip':\r\n                    suffix = '';\r\n                    break;\r\n                case 'ellipsis':\r\n                    suffix = this._settings.maxLinesSuffix;\r\n                    break;\r\n                default:\r\n                    suffix = this._settings.textOverflow;\r\n            }\r\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix);\r\n        }\r\n\r\n        // word wrap\r\n        // preserve original text\r\n        let linesInfo;\r\n        if (this._settings.wordWrap) {\r\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\r\n        } else {\r\n            linesInfo = { l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: [] };\r\n            let i, n = linesInfo.l.length;\r\n            for (let i = 0; i < n - 1; i++) {\r\n                linesInfo.n.push(i);\r\n            }\r\n        }\r\n        let lines = linesInfo.l;\r\n\r\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\r\n            let usedLines = lines.slice(0, this._settings.maxLines);\r\n\r\n            let otherLines = null;\r\n            if (this._settings.maxLinesSuffix) {\r\n                // Wrap again with max lines suffix enabled.\r\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\r\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\r\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\r\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\r\n            } else {\r\n                otherLines = [''];\r\n            }\r\n\r\n            // Re-assemble the remaining text.\r\n            let i, n = lines.length;\r\n            let j = 0;\r\n            let m = linesInfo.n.length;\r\n            for (i = this._settings.maxLines; i < n; i++) {\r\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\r\n                if (i + 1 < m && linesInfo.n[i + 1]) {\r\n                    j++;\r\n                }\r\n            }\r\n\r\n            renderInfo.remainingText = otherLines.join(\"\\n\");\r\n\r\n            renderInfo.moreTextLines = true;\r\n\r\n            lines = usedLines;\r\n        } else {\r\n            renderInfo.moreTextLines = false;\r\n            renderInfo.remainingText = \"\";\r\n        }\r\n\r\n        // calculate text width\r\n        let maxLineWidth = 0;\r\n        let lineWidths = [];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\r\n            lineWidths.push(lineWidth);\r\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\r\n        }\r\n\r\n        renderInfo.lineWidths = lineWidths;\r\n\r\n        if (!w) {\r\n            // Auto-set width to max text length.\r\n            width = maxLineWidth + paddingLeft + paddingRight;\r\n            innerWidth = maxLineWidth;\r\n        }\r\n\r\n        // calculate text height\r\n        lineHeight = lineHeight || fontSize;\r\n\r\n        let height;\r\n        if (h) {\r\n            height = h;\r\n        } else {\r\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\r\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\r\n        }\r\n\r\n        if (offsetY === null) {\r\n            offsetY = fontSize;\r\n        }\r\n\r\n        renderInfo.w = width;\r\n        renderInfo.h = height;\r\n        renderInfo.lines = lines;\r\n        renderInfo.precision = precision;\r\n\r\n        if (!width) {\r\n            // To prevent canvas errors.\r\n            width = 1;\r\n        }\r\n\r\n        if (!height) {\r\n            // To prevent canvas errors.\r\n            height = 1;\r\n        }\r\n\r\n        if (cutSx || cutEx) {\r\n            width = Math.min(width, cutEx - cutSx);\r\n        }\r\n\r\n        if (cutSy || cutEy) {\r\n            height = Math.min(height, cutEy - cutSy);\r\n        }\r\n\r\n        renderInfo.width = width;\r\n        renderInfo.innerWidth = innerWidth;\r\n        renderInfo.height = height;\r\n        renderInfo.fontSize = fontSize;\r\n        renderInfo.cutSx = cutSx;\r\n        renderInfo.cutSy = cutSy;\r\n        renderInfo.cutEx = cutEx;\r\n        renderInfo.cutEy = cutEy;\r\n        renderInfo.lineHeight = lineHeight;\r\n        renderInfo.lineWidths = lineWidths;\r\n        renderInfo.offsetY = offsetY;\r\n        renderInfo.paddingLeft = paddingLeft;\r\n        renderInfo.paddingRight = paddingRight;\r\n        renderInfo.letterSpacing = letterSpacing;\r\n        renderInfo.textIndent = textIndent;\r\n\r\n        return renderInfo;\r\n    }\r\n\r\n    _draw() {\r\n        const renderInfo = this._calculateRenderInfo();\r\n        const precision = this.getPrecision();\r\n\r\n        // Add extra margin to prevent issue with clipped text when scaling.\r\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\r\n        this._canvas.height = Math.ceil(renderInfo.height);\r\n\r\n        // Canvas context has been reset.\r\n        this.setFontProperties();\r\n        if (window.isRTL) {\r\n            this._context.direction = 'rtl';\r\n            this._context.textAlign = 'left';\r\n        }\r\n\r\n        if (renderInfo.fontSize >= 128) {\r\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\r\n            this._context.globalAlpha = 0.01;\r\n            this._context.fillRect(0, 0, 0.01, 0.01);\r\n            this._context.globalAlpha = 1.0;\r\n        }\r\n\r\n        if (renderInfo.cutSx || renderInfo.cutSy) {\r\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\r\n        }\r\n\r\n        let linePositionX;\r\n        let linePositionY;\r\n\r\n        let drawLines = [];\r\n\r\n        // Draw lines line by line.\r\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\r\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\r\n\r\n            // By default, text is aligned to top\r\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\r\n\r\n            if (this._settings.verticalAlign == 'middle') {\r\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\r\n            } else if (this._settings.verticalAlign == 'bottom') {\r\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\r\n            }\r\n\r\n            if (this._settings.textAlign === 'right') {\r\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\r\n            } else if (this._settings.textAlign === 'center') {\r\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\r\n            }\r\n            linePositionX += renderInfo.paddingLeft;\r\n\r\n            drawLines.push({ text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i] });\r\n        }\r\n\r\n        // Highlight.\r\n        if (this._settings.highlight) {\r\n            let color = this._settings.highlightColor || 0x00000000;\r\n\r\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\r\n            const offset = this._settings.highlightOffset * precision;\r\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\r\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\r\n\r\n            this._context.fillStyle = StageUtils.getRgbaString(color);\r\n            for (let i = 0; i < drawLines.length; i++) {\r\n                let drawLine = drawLines[i];\r\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\r\n            }\r\n        }\r\n\r\n        // Text shadow.\r\n        let prevShadowSettings = null;\r\n\r\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\r\n        if (this._settings.shadow) {\r\n            prevShadowSettings = [this._context.shadowColor[0], this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur[0]];\r\n\r\n            for (let i in this._settings.shadowColor) {\r\n                this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor[i]);\r\n                this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\r\n                this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\r\n                this._context.shadowBlur = this._settings.shadowBlur[i] * precision;\r\n                this.renderText(drawLines, renderInfo);\r\n            }\r\n        } else {\r\n            this.renderText(drawLines, renderInfo);\r\n        }\r\n\r\n\r\n        if (prevShadowSettings) {\r\n            this._context.shadowColor = prevShadowSettings[0];\r\n            this._context.shadowOffsetX = prevShadowSettings[1];\r\n            this._context.shadowOffsetY = prevShadowSettings[2];\r\n            this._context.shadowBlur = prevShadowSettings[3];\r\n        }\r\n\r\n        if (renderInfo.cutSx || renderInfo.cutSy) {\r\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\r\n        }\r\n\r\n        this.renderInfo = renderInfo;\r\n    };\r\n\r\n    wrapWord(word, wordWrapWidth, suffix) {\r\n        const suffixWidth = this.measureText(suffix);\r\n        const wordLen = word.length;\r\n        const wordWidth = this.measureText(word);\r\n\r\n        /* If word fits wrapWidth, do nothing */\r\n        if (wordWidth <= wordWrapWidth) {\r\n            return word;\r\n        }\r\n\r\n        /* Make initial guess for text cuttoff */\r\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\r\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n\r\n        /* In case guess was overestimated, shrink it letter by letter. */\r\n        if (truncWordWidth > wordWrapWidth) {\r\n            while (cutoffIndex > 0) {\r\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n                if (truncWordWidth > wordWrapWidth) {\r\n                    cutoffIndex -= 1;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            /* In case guess was underestimated, extend it letter by letter. */\r\n        } else {\r\n            while (cutoffIndex < wordLen) {\r\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n                if (truncWordWidth < wordWrapWidth) {\r\n                    cutoffIndex += 1;\r\n                } else {\r\n                    // Finally, when bound is crossed, retract last letter.\r\n                    cutoffIndex -= 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\r\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\r\n    }\r\n\r\n    /**\r\n     * See {@link wrapText}\r\n     *\r\n     * @param {string} text\r\n     * @param {number} wordWrapWidth\r\n     * @param {number} letterSpacing\r\n     * @param {number} indent\r\n     * @returns\r\n     */\r\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\r\n        return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);\r\n    };\r\n\r\n    /**\r\n     * See {@link measureText}\r\n     *\r\n     * @param {string} word\r\n     * @param {number} space\r\n     * @returns {number}\r\n     */\r\n    measureText(word, space = 0) {\r\n        return measureText(this._context, word, space);\r\n    }\r\n\r\n    renderText(drawLines, renderInfo) {\r\n        for (let i = 0, n = drawLines.length; i < n; i++) {\r\n            let drawLine = drawLines[i];\r\n\r\n            if (renderInfo.letterSpacing === 0) {\r\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y + 5);\r\n            } else {\r\n                const textSplit = drawLine.text.split('');\r\n                let x = drawLine.x;\r\n                for (let i = 0, j = textSplit.length; i < j; i++) {\r\n                    this._context.fillText(textSplit[i], x, drawLine.y);\r\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport { getFontSetting, isSpace, measureText, tokenizeString } from \"./TextTextureRendererUtils.mjs\";\r\n\r\nexport default class TextTextureRendererAdvanced {\r\n\r\n    constructor(stage, canvas, settings) {\r\n        this._stage = stage;\r\n        this._canvas = canvas;\r\n        this._context = this._canvas.getContext('2d');\r\n        this._settings = settings;\r\n    }\r\n\r\n    getPrecision() {\r\n        return this._settings.precision;\r\n    };\r\n\r\n    setFontProperties() {\r\n        const font = getFontSetting(\r\n            this._settings.fontFace,\r\n            this._settings.fontStyle,\r\n            this._settings.fontSize,\r\n            this.getPrecision(),\r\n            this._stage.getOption('defaultFontFace'),\r\n            this._settings.fontWeight,\r\n        );\r\n        this._context.font = font;\r\n        this._context.textBaseline = this._settings.textBaseline;\r\n        return font;\r\n    };\r\n\r\n    _load() {\r\n        if (Utils.isWeb && document.fonts) {\r\n            const fontSetting = getFontSetting(\r\n                this._settings.fontFace,\r\n                this._settings.fontStyle,\r\n                this._settings.fontSize,\r\n                this.getPrecision(),\r\n                this._stage.getOption('defaultFontFace'),\r\n                this._settings.fontWeight,\r\n            );\r\n            try {\r\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\r\n                    // Use a promise that waits for loading.\r\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\r\n                        // Just load the fallback font.\r\n                        console.warn('Font load error', err, fontSetting);\r\n                    }).then(() => {\r\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\r\n                            console.warn('Font not found', fontSetting);\r\n                        }\r\n                    });\r\n                }\r\n            } catch(e) {\r\n                console.warn(\"Can't check font loading for \" + fontSetting);\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        // We do not use a promise so that loading is performed syncronous when possible.\r\n        const loadPromise = this._load();\r\n        if (!loadPromise) {\r\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\r\n        } else {\r\n            return loadPromise.then(() => {\r\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\r\n            });\r\n        }\r\n    }\r\n\r\n    _calculateRenderInfo() {\r\n        let renderInfo = {};\r\n\r\n        const precision = this.getPrecision();\r\n\r\n        const paddingLeft = this._settings.paddingLeft * precision;\r\n        const paddingRight = this._settings.paddingRight * precision;\r\n        const fontSize = this._settings.fontSize * precision;\r\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\r\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\r\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\r\n        // const h = this._settings.h * precision;\r\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\r\n        const cutSx = this._settings.cutSx * precision;\r\n        const cutEx = this._settings.cutEx * precision;\r\n        const cutSy = this._settings.cutSy * precision;\r\n        const cutEy = this._settings.cutEy * precision;\r\n        const letterSpacing = this._settings.letterSpacing || 0;\r\n\r\n        // Set font properties.\r\n        renderInfo.baseFont = this.setFontProperties();\r\n\r\n        renderInfo.w = w;\r\n        renderInfo.width = w;\r\n        renderInfo.text = this._settings.text;\r\n        renderInfo.precision = precision;\r\n        renderInfo.fontSize = fontSize;\r\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\r\n        renderInfo.lineHeight = lineHeight;\r\n        renderInfo.letterSpacing = letterSpacing;\r\n        renderInfo.textAlign = this._settings.textAlign;\r\n        renderInfo.textColor = this._settings.textColor;\r\n        renderInfo.verticalAlign = this._settings.verticalAlign;\r\n        renderInfo.highlight = this._settings.highlight;\r\n        renderInfo.highlightColor = this._settings.highlightColor;\r\n        renderInfo.highlightHeight = this._settings.highlightHeight;\r\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\r\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\r\n        renderInfo.highlightOffset = this._settings.highlightOffset;\r\n        renderInfo.paddingLeft = this._settings.paddingLeft;\r\n        renderInfo.paddingRight = this._settings.paddingRight;\r\n        renderInfo.maxLines = this._settings.maxLines;\r\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\r\n        renderInfo.textOverflow = this._settings.textOverflow;\r\n        renderInfo.wordWrap = this._settings.wordWrap;\r\n        renderInfo.wordWrapWidth = wordWrapWidth;\r\n        renderInfo.shadow = this._settings.shadow;\r\n        renderInfo.shadowColor = this._settings.shadowColor;\r\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\r\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\r\n        renderInfo.shadowBlur = this._settings.shadowBlur;\r\n        renderInfo.cutSx = cutSx;\r\n        renderInfo.cutEx = cutEx;\r\n        renderInfo.cutSy = cutSy;\r\n        renderInfo.cutEy = cutEy;\r\n        renderInfo.textIndent = this._settings.textIndent * precision;\r\n        renderInfo.wordBreak = this._settings.wordBreak;\r\n\r\n        let text = renderInfo.text;\r\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\r\n\r\n        // Text overflow\r\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\r\n            let suffix;\r\n            switch (this._settings.textOverflow) {\r\n                case 'clip':\r\n                    suffix = '';\r\n                    break;\r\n                case 'ellipsis':\r\n                    suffix = this._settings.maxLinesSuffix;\r\n                    break;\r\n                default:\r\n                    suffix = this._settings.textOverflow;\r\n            }\r\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\r\n        }\r\n\r\n        text = this.tokenize(text);\r\n        text = this.parse(text);\r\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\r\n\r\n        if (renderInfo.textIndent) {\r\n            text = this.indent(text, renderInfo.textIndent);\r\n        }\r\n\r\n        if (renderInfo.wordBreak) {\r\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\r\n            this.resetFontStyle()\r\n        }\r\n\r\n        // Calculate detailed drawing information\r\n        let x = paddingLeft;\r\n        let lineNo = 0;\r\n\r\n        for (const t of text) {\r\n            // Wrap text\r\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\r\n                x = paddingLeft;\r\n                lineNo += 1;\r\n            }\r\n            t.lineNo = lineNo;\r\n\r\n            if (t.text == '\\n') {\r\n                continue;\r\n            }\r\n\r\n            t.x = x;\r\n            x += t.width;\r\n        }\r\n        renderInfo.lineNum = lineNo + 1;\r\n\r\n        if (this._settings.h) {\r\n            renderInfo.h = this._settings.h;\r\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\r\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\r\n        } else {\r\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\r\n        }\r\n\r\n        // This calculates the baseline offset in pixels from the font size.\r\n        // To retrieve this ratio, you would do this calculation:\r\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\r\n        //\r\n        // This give you the ratio for the baseline, which is then used to figure out\r\n        // where the baseline is relative to the bottom of the text bounding box.\r\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\r\n\r\n        // Vertical align\r\n        let vaOffset = 0;\r\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\r\n            vaOffset = -baselineOffsetInPx;\r\n        } else if (renderInfo.verticalAlign == 'middle') {\r\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\r\n        } else if (this._settings.verticalAlign == 'bottom') {\r\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\r\n        }\r\n\r\n        // Calculate lines information\r\n        renderInfo.lines = []\r\n        for (let i = 0; i < renderInfo.lineNum; i++) {\r\n            renderInfo.lines[i] = {\r\n                width: 0,\r\n                x: 0,\r\n                y: renderInfo.lineHeight * i + vaOffset,\r\n                text: [],\r\n            }\r\n        }\r\n\r\n        for (let t of text) {\r\n            renderInfo.lines[t.lineNo].text.push(t);\r\n        }\r\n\r\n        // Filter out white spaces at beginning and end of each line\r\n        for (const l of renderInfo.lines) {\r\n            if (l.text.length == 0) {\r\n                continue;\r\n            }\r\n\r\n            const firstWord = l.text[0].text;\r\n            const lastWord = l.text[l.text.length - 1].text;\r\n\r\n            if (firstWord == '\\n') {\r\n                l.text.shift();\r\n            }\r\n            if (isSpace(lastWord) || lastWord == '\\n') {\r\n                l.text.pop();\r\n            }\r\n        }\r\n\r\n\r\n        // Calculate line width\r\n        for (let l of renderInfo.lines) {\r\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\r\n        }\r\n\r\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\r\n        renderInfo.w = renderInfo.width;\r\n\r\n        // Apply maxLinesSuffix\r\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\r\n            const index = renderInfo.maxLines - 1;\r\n            let lastLineText = text.filter((t) => t.lineNo == index)\r\n            let suffix = renderInfo.maxLinesSuffix;\r\n            suffix = this.tokenize(suffix);\r\n            suffix = this.parse(suffix);\r\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\r\n            for (const s of suffix) {\r\n                s.lineNo = index;\r\n                s.x = 0;\r\n                lastLineText.push(s)\r\n            }\r\n\r\n            const spl = suffix.length + 1\r\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\r\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\r\n                lastLineText.splice(lastLineText.length - spl, 1);\r\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\r\n                if (lastLineText.length < spl) {\r\n                    break;\r\n                }\r\n            }\r\n            this.alignLine(lastLineText, lastLineText[0].x)\r\n\r\n            renderInfo.lines[index].text = lastLineText;\r\n            renderInfo.lines[index].width = _w;\r\n        }\r\n\r\n        // Horizontal alignment offset\r\n        if (renderInfo.textAlign == 'center') {\r\n            for (let l of renderInfo.lines) {\r\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\r\n            }\r\n        } else if (renderInfo.textAlign == 'right') {\r\n            for (let l of renderInfo.lines) {\r\n                l.x = renderInfo.width - l.width - paddingLeft;\r\n            }\r\n        }\r\n\r\n        return renderInfo;\r\n    }\r\n\r\n    _draw() {\r\n        const renderInfo = this._calculateRenderInfo();\r\n        const precision = this.getPrecision();\r\n        const paddingLeft = renderInfo.paddingLeft * precision;\r\n\r\n        // Set canvas dimensions\r\n        let canvasWidth = renderInfo.w || renderInfo.width;\r\n        if (renderInfo.cutSx || renderInfo.cutEx) {\r\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\r\n        }\r\n\r\n        let canvasHeight = renderInfo.h;\r\n        if (renderInfo.cutSy || renderInfo.cutEy) {\r\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\r\n        }\r\n\r\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\r\n        this._canvas.height = Math.ceil(canvasHeight);\r\n\r\n        // Canvas context has been reset.\r\n        this.setFontProperties();\r\n\r\n        if (renderInfo.fontSize >= 128) {\r\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\r\n            this._context.globalAlpha = 0.01;\r\n            this._context.fillRect(0, 0, 0.01, 0.01);\r\n            this._context.globalAlpha = 1.0;\r\n        }\r\n\r\n        // Cut\r\n        if (renderInfo.cutSx || renderInfo.cutSy) {\r\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\r\n        }\r\n\r\n        // Highlight\r\n        if (renderInfo.highlight) {\r\n            const hlColor = renderInfo.highlightColor || 0x00000000;\r\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\r\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\r\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\r\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\r\n\r\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\r\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\r\n            for (let i = 0; i < lineNum; i++) {\r\n                const l = renderInfo.lines[i];\r\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\r\n            }\r\n        }\r\n\r\n        // Text shadow.\r\n        let prevShadowSettings = null;\r\n        if (this._settings.shadow) {\r\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\r\n\r\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\r\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\r\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\r\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\r\n        }\r\n\r\n        // Draw text\r\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\r\n        let currentColor = defaultColor;\r\n        this._context.fillStyle = defaultColor;\r\n        for (const line of renderInfo.lines) {\r\n            for (const t of line.text) {\r\n                let lx = 0;\r\n\r\n                if (t.text == '\\n') {\r\n                    continue;\r\n                }\r\n\r\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\r\n                    continue;\r\n                }\r\n\r\n                if (t.color != currentColor) {\r\n                    currentColor = t.color;\r\n                    this._context.fillStyle = currentColor;\r\n                }\r\n\r\n                this._context.font = t.fontStyle;\r\n\r\n                // Draw with letter spacing\r\n                if (t.letters) {\r\n                    for (let l of t.letters) {\r\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\r\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\r\n                        lx += l.width;\r\n                    }\r\n                // Standard drawing\r\n                } else {\r\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\r\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reset text shadow\r\n        if (prevShadowSettings) {\r\n            this._context.shadowColor = prevShadowSettings[0];\r\n            this._context.shadowOffsetX = prevShadowSettings[1];\r\n            this._context.shadowOffsetY = prevShadowSettings[2];\r\n            this._context.shadowBlur = prevShadowSettings[3];\r\n        }\r\n\r\n        // Reset cut translation\r\n        if (renderInfo.cutSx || renderInfo.cutSy) {\r\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\r\n        }\r\n\r\n        // Postprocess renderInfo.lines to be compatible with standard version\r\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\r\n        if (renderInfo.maxLines) {\r\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\r\n        }\r\n\r\n\r\n        this.renderInfo = renderInfo;\r\n\r\n    };\r\n\r\n    /**\r\n     * See {@link measureText}\r\n     *\r\n     * @param {string} word\r\n     * @param {number} space\r\n     * @returns {number}\r\n     */\r\n    measureText(word, space = 0) {\r\n        return measureText(this._context, word, space);\r\n    }\r\n\r\n    tokenize(text) {\r\n        return tokenizeString(/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g, text);\r\n    }\r\n\r\n    parse(tokens) {\r\n        let italic = 0;\r\n        let bold = 0;\r\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\r\n        let color = 0;\r\n\r\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\r\n\r\n        return tokens.map((t) => {\r\n            if (t == '<i>') {\r\n                italic += 1;\r\n                t = '';\r\n            } else if (t == '</i>' && italic > 0) {\r\n                italic -= 1;\r\n                t = '';\r\n            } else if (t == '<b>') {\r\n                bold += 1;\r\n                t = '';\r\n            } else if (t == '</b>' && bold > 0) {\r\n                bold -= 1;\r\n                t = '';\r\n            } else if (t == '</color>') {\r\n                if (colorStack.length > 1) {\r\n                    color -= 1;\r\n                    colorStack.pop();\r\n                }\r\n                t = '';\r\n            } else if (colorRegexp.test(t)) {\r\n                const matched = colorRegexp.exec(t);\r\n                colorStack.push(\r\n                    StageUtils.getRgbaString(parseInt(matched[1]))\r\n                );\r\n                color += 1;\r\n                t = '';\r\n\r\n            }\r\n\r\n            return {\r\n                text: t,\r\n                italic: italic,\r\n                bold: bold,\r\n                color: colorStack[color],\r\n            }\r\n        })\r\n        .filter((o) => o.text != '');\r\n    }\r\n\r\n    applyFontStyle(word, baseFont) {\r\n        let font = baseFont;\r\n        if (word.bold) {\r\n            font = 'bold ' + font;\r\n        }\r\n        if (word.italic) {\r\n            font = 'italic ' + font;\r\n        }\r\n        this._context.font = font\r\n        word.fontStyle = font;\r\n    }\r\n\r\n    resetFontStyle(baseFont) {\r\n        this._context.font = baseFont;\r\n    }\r\n\r\n    measure(parsed, letterSpacing = 0, baseFont) {\r\n        for (const p of parsed) {\r\n            this.applyFontStyle(p, baseFont);\r\n            p.width = this.measureText(p.text, letterSpacing);\r\n\r\n            // Letter by letter detail for letter spacing\r\n            if (letterSpacing > 0) {\r\n                p.letters = p.text.split('').map((l) => {return {text: l}});\r\n                for (let l of p.letters) {\r\n                    l.width = this.measureText(l.text, letterSpacing);\r\n                }\r\n            }\r\n\r\n        }\r\n        this.resetFontStyle(baseFont);\r\n        return parsed;\r\n    }\r\n\r\n    indent(parsed, textIndent) {\r\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\r\n        return parsed;\r\n    }\r\n\r\n    wrapWord(word, wordWrapWidth, suffix) {\r\n        const suffixWidth = this.measureText(suffix);\r\n        const wordLen = word.length\r\n        const wordWidth = this.measureText(word);\r\n\r\n        /* If word fits wrapWidth, do nothing */\r\n        if (wordWidth <= wordWrapWidth) {\r\n            return word;\r\n        }\r\n\r\n        /* Make initial guess for text cuttoff */\r\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\r\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n\r\n        /* In case guess was overestimated, shrink it letter by letter. */\r\n        if (truncWordWidth > wordWrapWidth) {\r\n            while (cutoffIndex > 0) {\r\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n                if (truncWordWidth > wordWrapWidth) {\r\n                    cutoffIndex -= 1;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        /* In case guess was underestimated, extend it letter by letter. */\r\n        } else {\r\n            while (cutoffIndex < wordLen) {\r\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\r\n                if (truncWordWidth < wordWrapWidth) {\r\n                    cutoffIndex += 1;\r\n                } else {\r\n                    // Finally, when bound is crossed, retract last letter.\r\n                    cutoffIndex -=1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\r\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\r\n    }\r\n\r\n    _getBreakIndex(word, width) {\r\n        const wordLen = word.length;\r\n        const wordWidth = this.measureText(word);\r\n\r\n        if (wordWidth <= width) {\r\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\r\n        }\r\n\r\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\r\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\r\n\r\n        /* In case guess was overestimated, shrink it letter by letter. */\r\n        if (truncWordWidth > width) {\r\n            while (breakIndex > 0) {\r\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\r\n                if (truncWordWidth > width) {\r\n                    breakIndex -= 1;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        /* In case guess was underestimated, extend it letter by letter. */\r\n        } else {\r\n            while (breakIndex < wordLen) {\r\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\r\n                if (truncWordWidth < width) {\r\n                    breakIndex += 1;\r\n                } else {\r\n                    // Finally, when bound is crossed, retract last letter.\r\n                    breakIndex -=1;\r\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return {breakIndex, truncWordWidth};\r\n\r\n    }\r\n\r\n    wordBreak(word, width, baseFont) {\r\n        if (!word.text) {\r\n            return word\r\n        }\r\n        this.applyFontStyle(word, baseFont)\r\n        const parts = [];\r\n        let text = word.text;\r\n        if (!word.letters) {\r\n            while (true) {\r\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\r\n                parts.push({...word});\r\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\r\n                parts[parts.length - 1].width = truncWordWidth;\r\n\r\n                if (breakIndex === text.length) {\r\n                    break;\r\n                }\r\n\r\n                text = text.slice(breakIndex);\r\n            }\r\n        } else {\r\n            let totalWidth = 0;\r\n            let letters = [];\r\n            let breakIndex = 0;\r\n            for (const l of word.letters) {\r\n                if (totalWidth + l.width >= width) {\r\n                    parts.push({...word});\r\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\r\n                    parts[parts.length - 1].width = totalWidth;\r\n                    parts[parts.length - 1].letters = letters;\r\n                    text = text.slice(breakIndex);\r\n                    totalWidth = 0;\r\n                    letters = [];\r\n                    breakIndex = 0;\r\n\r\n                } else {\r\n                    breakIndex += 1;\r\n                    letters.push(l);\r\n                    totalWidth += l.width;\r\n                }\r\n            }\r\n\r\n            if (totalWidth > 0) {\r\n                parts.push({...word});\r\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\r\n                parts[parts.length - 1].width = totalWidth;\r\n                parts[parts.length - 1].letters = letters;\r\n            }\r\n        }\r\n\r\n        return parts;\r\n    }\r\n\r\n    alignLine(parsed, initialX = 0) {\r\n        let prevWidth = 0;\r\n        let prevX = initialX;\r\n        for (const word of parsed) {\r\n            if (word.text == '\\n') {\r\n                continue;\r\n            }\r\n            word.x = prevX + prevWidth;\r\n            prevX = word.x;\r\n            prevWidth = word.width;\r\n        }\r\n\r\n    }\r\n}","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\n\r\nexport default class TextTexture extends Texture {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        // We use the stage precision as the default precision in case of a text texture.\r\n        this._precision = this.stage.getOption('precision');\r\n    }\r\n\r\n    static renderer(stage, canvas, settings) {\r\n        if (this.advancedRenderer) {\r\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\r\n        } else {\r\n            return new TextTextureRenderer(stage, canvas, settings);\r\n        }\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    set text(v) {\r\n        if (this._text !== v) {\r\n            this._text = \"\" + v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get w() {\r\n        return this._w;\r\n    }\r\n\r\n    set w(v) {\r\n        if (this._w !== v) {\r\n            this._w = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get h() {\r\n        return this._h;\r\n    }\r\n\r\n    set h(v) {\r\n        if (this._h !== v) {\r\n            this._h = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get fontStyle() {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    set fontStyle(v) {\r\n        if (this._fontStyle !== v) {\r\n            this._fontStyle = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get fontBaselineRatio() {\r\n        return this._fontBaselineRatio;\r\n    }\r\n    \r\n    set fontBaselineRatio(v) {\r\n        if (this._fontBaselineRatio !== v) {\r\n            this._fontBaselineRatio = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get fontSize() {\r\n        return this._fontSize;\r\n    }\r\n\r\n    set fontSize(v) {\r\n        if (this._fontSize !== v) {\r\n            this._fontSize = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get fontWeight() {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    set fontWeight(v) {\r\n        if (this._fontWeight !== v) {\r\n            this._fontWeight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get fontFace() {\r\n        return this._fontFace;\r\n    }\r\n\r\n    set fontFace(v) {\r\n        if (this._fontFace !== v) {\r\n            this._fontFace = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get wordWrap() {\r\n        return this._wordWrap;\r\n    }\r\n\r\n    set wordWrap(v) {\r\n        if (this._wordWrap !== v) {\r\n            this._wordWrap = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get wordWrapWidth() {\r\n        return this._wordWrapWidth;\r\n    }\r\n\r\n    set wordWrapWidth(v) {\r\n        if (this._wordWrapWidth !== v) {\r\n            this._wordWrapWidth = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get wordBreak() {\r\n        return this._wordBreak;\r\n    }\r\n\r\n    set wordBreak(v) {\r\n        if (this._wordBreak !== v) {\r\n            this._wordBreak = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get textOverflow() {\r\n        return this._textOverflow;\r\n    }\r\n\r\n    set textOverflow(v) {\r\n        if (v != this._textOverflow) {\r\n            this._textOverflow = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get lineHeight() {\r\n        return this._lineHeight;\r\n    }\r\n\r\n    set lineHeight(v) {\r\n        if (this._lineHeight !== v) {\r\n            this._lineHeight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get textBaseline() {\r\n        return this._textBaseline;\r\n    }\r\n\r\n    set textBaseline(v) {\r\n        if (this._textBaseline !== v) {\r\n            this._textBaseline = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get textAlign() {\r\n        return this._textAlign;\r\n    }\r\n\r\n    set textAlign(v) {\r\n        if (v != 'center' && window.isRTL) {\r\n            v = v == \"right\" ? \"left\" : \"right\";\r\n        }\r\n        if (this._textAlign !== v) {\r\n            this._textAlign = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get verticalAlign() {\r\n        return this._verticalAlign;\r\n    }\r\n\r\n    set verticalAlign(v) {\r\n        if (this._verticalAlign !== v) {\r\n            this._verticalAlign = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get offsetY() {\r\n        return this._offsetY;\r\n    }\r\n\r\n    set offsetY(v) {\r\n        if (this._offsetY !== v) {\r\n            this._offsetY = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get maxLines() {\r\n        return this._maxLines;\r\n    }\r\n\r\n    set maxLines(v) {\r\n        if (this._maxLines !== v) {\r\n            this._maxLines = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get maxLinesSuffix() {\r\n        return this._maxLinesSuffix;\r\n    }\r\n\r\n    set maxLinesSuffix(v) {\r\n        if (this._maxLinesSuffix !== v) {\r\n            this._maxLinesSuffix = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get textColor() {\r\n        return this._textColor;\r\n    }\r\n\r\n    set textColor(v) {\r\n        if (this._textColor !== v) {\r\n            this._textColor = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get paddingLeft() {\r\n        return this._paddingLeft;\r\n    }\r\n\r\n    set paddingLeft(v) {\r\n        if (this._paddingLeft !== v) {\r\n            this._paddingLeft = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get paddingRight() {\r\n        return this._paddingRight;\r\n    }\r\n\r\n    set paddingRight(v) {\r\n        if (this._paddingRight !== v) {\r\n            this._paddingRight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get shadow() {\r\n        return this._shadow;\r\n    }\r\n\r\n    set shadow(v) {\r\n        if (this._shadow !== v) {\r\n            this._shadow = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    set shadowColor(v) {\r\n        if (this._shadowColor !== v) {\r\n            this._shadowColor = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    set shadowOffsetX(v) {\r\n        if (this._shadowOffsetX !== v) {\r\n            this._shadowOffsetX = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    set shadowOffsetY(v) {\r\n        if (this._shadowOffsetY !== v) {\r\n            this._shadowOffsetY = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    set shadowBlur(v) {\r\n        if (this._shadowBlur !== v) {\r\n            this._shadowBlur = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlight() {\r\n        return this._highlight;\r\n    }\r\n\r\n    set highlight(v) {\r\n        if (this._highlight !== v) {\r\n            this._highlight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlightHeight() {\r\n        return this._highlightHeight;\r\n    }\r\n\r\n    set highlightHeight(v) {\r\n        if (this._highlightHeight !== v) {\r\n            this._highlightHeight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlightColor() {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    set highlightColor(v) {\r\n        if (this._highlightColor !== v) {\r\n            this._highlightColor = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlightOffset() {\r\n        return this._highlightOffset;\r\n    }\r\n\r\n    set highlightOffset(v) {\r\n        if (this._highlightOffset !== v) {\r\n            this._highlightOffset = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlightPaddingLeft() {\r\n        return this._highlightPaddingLeft;\r\n    }\r\n\r\n    set highlightPaddingLeft(v) {\r\n        if (this._highlightPaddingLeft !== v) {\r\n            this._highlightPaddingLeft = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get highlightPaddingRight() {\r\n        return this._highlightPaddingRight;\r\n    }\r\n\r\n    set highlightPaddingRight(v) {\r\n        if (this._highlightPaddingRight !== v) {\r\n            this._highlightPaddingRight = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get cutSx() {\r\n        return this._cutSx;\r\n    }\r\n\r\n    set cutSx(v) {\r\n        if (this._cutSx !== v) {\r\n            this._cutSx = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get cutEx() {\r\n        return this._cutEx;\r\n    }\r\n\r\n    set cutEx(v) {\r\n        if (this._cutEx !== v) {\r\n            this._cutEx = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get cutSy() {\r\n        return this._cutSy;\r\n    }\r\n\r\n    set cutSy(v) {\r\n        if (this._cutSy !== v) {\r\n            this._cutSy = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get cutEy() {\r\n        return this._cutEy;\r\n    }\r\n\r\n    set cutEy(v) {\r\n        if (this._cutEy !== v) {\r\n            this._cutEy = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get advancedRenderer() {\r\n        return this._advancedRenderer;\r\n    }\r\n\r\n    set advancedRenderer(v) {\r\n        if (this._advancedRenderer !== v) {\r\n            this._advancedRenderer = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    set letterSpacing(v) {\r\n        if (this._letterSpacing !== v) {\r\n            this._letterSpacing = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get letterSpacing() {\r\n        return this._letterSpacing;\r\n    }\r\n\r\n    set textIndent(v) {\r\n        if (this._textIndent !== v) {\r\n            this._textIndent = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get textIndent() {\r\n        return this._textIndent;\r\n    }\r\n\r\n    get precision() {\r\n        return super.precision;\r\n    }\r\n\r\n    set precision(v) {\r\n        // We actually draw differently when the precision changes.\r\n        if (this.precision !== v) {\r\n            super.precision = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    _getIsValid() {\r\n        return !!this.text;\r\n    }\r\n\r\n    _getLookupId() {\r\n        let parts = [];\r\n\r\n        if (this.w !== 0) parts.push(\"w \" + this.w);\r\n        if (this.h !== 0) parts.push(\"h \" + this.h);\r\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\r\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\r\n        if (this.fontWeight !== 'normal') parts.push(\"fw\" + this.fontWeight);\r\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\r\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\r\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\r\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\r\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\r\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\r\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\r\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\r\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\r\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\r\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\r\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\r\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\r\n        parts.push(\"pc\" + this.precision);\r\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\r\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\r\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\r\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\r\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\r\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\r\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\r\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\r\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\r\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\r\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\r\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\r\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\r\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\r\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\r\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\r\n\r\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\r\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\r\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\r\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\r\n\r\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\r\n\r\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\r\n        return id;\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        const args = this.cloneArgs();\r\n\r\n        const gl = this.stage.gl;\r\n\r\n        return function (cb) {\r\n            const canvas = this.stage.platform.getDrawingCanvas();\r\n            const renderer = (args.advancedRenderer)\r\n              ? new TextTextureRendererAdvanced(this.stage, canvas, args)\r\n              : new TextTextureRenderer(this.stage, canvas, args);\r\n            \r\n            const p = renderer.draw();\r\n\r\n            const texParams = {};\r\n\r\n            const sharpCfg = this.stage.getOption('fontSharp');\r\n            let sharpen = false;\r\n\r\n            // Prevent text blur when text texture is downscaled\r\n            if (Utils.isBoolean(sharpCfg)) {\r\n                sharpen = sharpCfg;\r\n            } else if (Utils.isObject(sharpCfg)) {\r\n                const precision = this.stage.getRenderPrecision();\r\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\r\n            }\r\n\r\n            if (gl && sharpen) {\r\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\r\n            }\r\n\r\n            if (p) {\r\n                p.then(() => {\r\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\r\n                    cb(null, Object.assign({\r\n                        renderInfo: renderer.renderInfo,\r\n                        throttle: false,\r\n                        texParams: texParams,\r\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\r\n                }).catch((err) => {\r\n                    cb(err);\r\n                });\r\n            } else {\r\n                cb(null, Object.assign({\r\n                    renderInfo: renderer.renderInfo,\r\n                    throttle: false,\r\n                    texParams: texParams,\r\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    getNonDefaults() {\r\n        const nonDefaults = super.getNonDefaults();\r\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\r\n        if (this.w !== 0) nonDefaults['w'] = this.w;\r\n        if (this.h !== 0) nonDefaults['h'] = this.h;\r\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\r\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\r\n        if (this.fontWeight !== \"normal\") nonDefaults[\"fontWeight\"] = this.fontWeight;\r\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\r\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\r\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\r\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\r\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\r\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\r\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\r\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\r\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\r\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\r\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\r\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\r\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\r\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\r\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\r\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\r\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\r\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\r\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\r\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\r\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\r\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\r\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\r\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\r\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\r\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\r\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\r\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\r\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\r\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\r\n\r\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\r\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\r\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\r\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\r\n\r\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\r\n        return nonDefaults;\r\n    }\r\n\r\n    cloneArgs() {\r\n        let obj = {};\r\n        obj.text = this._text;\r\n        obj.w = this._w;\r\n        obj.h = this._h;\r\n        obj.fontStyle = this._fontStyle;\r\n        obj.fontSize = this._fontSize;\r\n        obj.fontWeight = this._fontWeight;\r\n        obj.fontBaselineRatio = this._fontBaselineRatio;\r\n        obj.fontFace = this._fontFace;\r\n        obj.wordWrap = this._wordWrap;\r\n        obj.wordWrapWidth = this._wordWrapWidth;\r\n        obj.wordBreak = this._wordBreak;\r\n        obj.textOverflow = this._textOverflow;\r\n        obj.lineHeight = this._lineHeight;\r\n        obj.textBaseline = this._textBaseline;\r\n        obj.textAlign = this._textAlign;\r\n        obj.verticalAlign = this._verticalAlign;\r\n        obj.offsetY = this._offsetY;\r\n        obj.maxLines = this._maxLines;\r\n        obj.maxLinesSuffix = this._maxLinesSuffix;\r\n        obj.precision = this._precision;\r\n        obj.textColor = this._textColor;\r\n        obj.paddingLeft = this._paddingLeft;\r\n        obj.paddingRight = this._paddingRight;\r\n        obj.shadow = this._shadow;\r\n        obj.shadowColor = this._shadowColor;\r\n        obj.shadowOffsetX = this._shadowOffsetX;\r\n        obj.shadowOffsetY = this._shadowOffsetY;\r\n        obj.shadowBlur = this._shadowBlur;\r\n        obj.highlight = this._highlight;\r\n        obj.highlightHeight = this._highlightHeight;\r\n        obj.highlightColor = this._highlightColor;\r\n        obj.highlightOffset = this._highlightOffset;\r\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\r\n        obj.highlightPaddingRight = this._highlightPaddingRight;\r\n        obj.letterSpacing = this._letterSpacing;\r\n        obj.textIndent = this._textIndent;\r\n        obj.cutSx = this._cutSx;\r\n        obj.cutEx = this._cutEx;\r\n        obj.cutSy = this._cutSy;\r\n        obj.cutEy = this._cutEy;\r\n        obj.advancedRenderer = this._advancedRenderer;\r\n        return obj;\r\n    }\r\n\r\n\r\n}\r\n\r\n// Because there are so many properties, we prefer to use the prototype for default values.\r\n// This causes a decrease in performance, but also a decrease in memory usage.\r\nlet proto = TextTexture.prototype;\r\nproto._text = \"\";\r\nproto._w = 0;\r\nproto._h = 0;\r\nproto._fontStyle = \"normal\";\r\nproto._fontSize = 40;\r\nproto._fontWeight = \"normal\";\r\nproto._fontFace = null;\r\nproto._wordWrap = true;\r\nproto._wordWrapWidth = 0;\r\nproto._wordBreak = false;\r\nproto._textOverflow = \"\";\r\nproto._lineHeight = null;\r\nproto._textBaseline = \"alphabetic\";\r\nproto._textAlign = \"left\";\r\nproto._verticalAlign = \"top\";\r\nproto._offsetY = null;\r\nproto._maxLines = 0;\r\nproto._maxLinesSuffix = \"..\";\r\nproto._textColor = 0xFFFFFFFF;\r\nproto._paddingLeft = 0;\r\nproto._paddingRight = 0;\r\nproto._shadow = false;\r\nproto._shadowColor = 0xFF000000;\r\nproto._shadowOffsetX = 0;\r\nproto._shadowOffsetY = 0;\r\nproto._shadowBlur = 5;\r\nproto._highlight = false;\r\nproto._highlightHeight = 0;\r\nproto._highlightColor = 0xFF000000;\r\nproto._highlightOffset = 0;\r\nproto._highlightPaddingLeft = 0;\r\nproto._highlightPaddingRight = 0;\r\nproto._letterSpacing = 0;\r\nproto._textIndent = 0;\r\nproto._cutSx = 0;\r\nproto._cutEx = 0;\r\nproto._cutSy = 0;\r\nproto._cutEy = 0;\r\nproto._advancedRenderer = false;\r\nproto._fontBaselineRatio = 0;\r\n\r\n\r\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\r\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class SourceTexture extends Texture {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this._textureSource = undefined;\r\n    }\r\n\r\n    get textureSource() {\r\n        return this._textureSource;\r\n    }\r\n\r\n    set textureSource(v) {\r\n        if (v !== this._textureSource) {\r\n            if (v.isResultTexture) {\r\n                // In case of a result texture, automatically inherit the precision.\r\n                this._precision = this.stage.getRenderPrecision();\r\n            }\r\n            this._textureSource = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    _getTextureSource() {\r\n        return this._textureSource;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from \"../EventEmitter.mjs\";\r\n\r\nexport default class Transition extends EventEmitter {\r\n\r\n    constructor(manager, settings, element, property) {\r\n        super();\r\n\r\n        this.manager = manager;\r\n\r\n        this._settings = settings;\r\n\r\n        this._element = element;\r\n\r\n        this._getter = element.constructor.getGetter(property);\r\n        this._setter = element.constructor.getSetter(property);\r\n\r\n        this._merger = settings.merger;\r\n\r\n        if (!this._merger) {\r\n            this._merger = element.constructor.getMerger(property);\r\n        }\r\n\r\n        this._startValue = this._getter(this._element);\r\n        this._targetValue = this._startValue;\r\n\r\n        this._p = 1;\r\n        this._delayLeft = 0;\r\n    }\r\n\r\n    start(targetValue) {\r\n        this._startValue = this._getter(this._element);\r\n\r\n        if (!this.isAttached()) {\r\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\r\n            this._targetValue = targetValue;\r\n            this._p = 1;\r\n            this._updateDrawValue();\r\n        } else {\r\n            if (targetValue === this._startValue) {\r\n                this.reset(targetValue, 1);\r\n            } else {\r\n                this._targetValue = targetValue;\r\n                this._p = 0;\r\n                this._delayLeft = this._settings.delay;\r\n                this.emit('start');\r\n                this.add();\r\n            }\r\n        }\r\n    }\r\n\r\n    finish() {\r\n        if (this._p < 1) {\r\n            // Value setting and will must be invoked (async) upon next transition cycle.\r\n            this._p = 1;\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        // Just stop where the transition is at.\r\n        this.emit('stop');\r\n        this.manager.removeActive(this);\r\n    }\r\n\r\n    pause() {\r\n        this.stop();\r\n    }\r\n\r\n    play() {\r\n        this.manager.addActive(this);\r\n    }\r\n\r\n    reset(targetValue, p) {\r\n        if (!this.isAttached()) {\r\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\r\n            this._startValue = this._getter(this._element);\r\n            this._targetValue = targetValue;\r\n            this._p = 1;\r\n            this._updateDrawValue();\r\n        } else {\r\n            this._startValue = this._getter(this._element);\r\n            this._targetValue = targetValue;\r\n            this._p = p;\r\n            this.add();\r\n        }\r\n    }\r\n\r\n    _updateDrawValue() {\r\n        this._setter(this._element, this.getDrawValue());\r\n    }\r\n\r\n    add() {\r\n        this.manager.addActive(this);\r\n    }\r\n\r\n    isAttached() {\r\n        return this._element.attached;\r\n    }\r\n\r\n    isRunning() {\r\n        return (this._p < 1.0);\r\n    }\r\n\r\n    progress(dt) {\r\n        if (!this.isAttached()) {\r\n            // Skip to end of transition so that it is removed.\r\n            this._p = 1;\r\n        }\r\n\r\n        if (this.p < 1) {\r\n            if (this.delayLeft > 0) {\r\n                this._delayLeft -= dt;\r\n\r\n                if (this.delayLeft < 0) {\r\n                    dt = -this.delayLeft;\r\n                    this._delayLeft = 0;\r\n\r\n                    this.emit('delayEnd');\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (this._settings.duration == 0) {\r\n                this._p = 1;\r\n            } else {\r\n                this._p += dt / this._settings.duration;\r\n            }\r\n            if (this._p >= 1) {\r\n                // Finished!;\r\n                this._p = 1;\r\n            }\r\n        }\r\n\r\n        this._updateDrawValue();\r\n\r\n        this.invokeListeners();\r\n    }\r\n\r\n    invokeListeners() {\r\n        this.emit('progress', this.p);\r\n        if (this.p === 1) {\r\n            this.emit('finish');\r\n        }\r\n    }\r\n\r\n    updateTargetValue(targetValue) {\r\n        let t = this._settings.timingFunctionImpl(this.p);\r\n        if (t === 1) {\r\n            this._targetValue = targetValue;\r\n        } else if (t === 0) {\r\n            this._startValue = this._targetValue;\r\n            this._targetValue = targetValue;\r\n        } else {\r\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\r\n            this._targetValue = targetValue;\r\n        }\r\n    }\r\n\r\n    getDrawValue() {\r\n        if (this.p >= 1) {\r\n            return this.targetValue;\r\n        } else {\r\n            let v = this._settings._timingFunctionImpl(this.p);\r\n            return this._merger(this.targetValue, this.startValue, v);\r\n        }\r\n    }\r\n\r\n    skipDelay() {\r\n        this._delayLeft = 0;\r\n    }\r\n\r\n    get startValue() {\r\n        return this._startValue;\r\n    }\r\n\r\n    get targetValue() {\r\n        return this._targetValue;\r\n    }\r\n\r\n    get p() {\r\n        return this._p;\r\n    }\r\n\r\n    get delayLeft() {\r\n        return this._delayLeft;\r\n    }\r\n\r\n    get element() {\r\n        return this._element;\r\n    }\r\n\r\n    get settings() {\r\n        return this._settings;\r\n    }\r\n\r\n    set settings(v) {\r\n        this._settings = v;\r\n    }\r\n\r\n}\r\n\r\nTransition.prototype.isTransition = true;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Manages a list of objects.\r\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\r\n */\r\nexport default class ObjectList {\r\n\r\n    constructor() {\r\n        this._items = [];\r\n        this._refs = {}\r\n    }\r\n\r\n    get() {\r\n        return this._items;\r\n    }\r\n\r\n    get first() {\r\n        return this._items[0];\r\n    }\r\n\r\n    get last() {\r\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\r\n    }\r\n\r\n    add(item) {\r\n        this.addAt(item, this._items.length);\r\n    }\r\n\r\n    addAt(item, index) {\r\n        if (index >= 0 && index <= this._items.length) {\r\n            let currentIndex = this._items.indexOf(item);\r\n            if (currentIndex === index) {\r\n                return item;\r\n            }\r\n\r\n            if (Utils.isObjectLiteral(item)) {\r\n                const o = item;\r\n                item = this.createItem(o);\r\n                item.patch(o);\r\n            }\r\n\r\n            if (currentIndex != -1) {\r\n                this.setAt(item, index);\r\n            } else {\r\n                if (item.ref) {\r\n                    this._refs[item.ref] = item;\r\n                }\r\n                this._items.splice(index, 0, item);\r\n                this.onAdd(item, index);\r\n            }\r\n        } else {\r\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\r\n        }\r\n    }\r\n\r\n    replaceByRef(item) {\r\n        if (item.ref) {\r\n            const existingItem = this.getByRef(item.ref);\r\n            if (!existingItem) {\r\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\r\n            }\r\n            this.replace(item, existingItem);\r\n        } else {\r\n            throw new Error('replaceByRef: no ref specified in item');\r\n        }\r\n        this.addAt(item, this._items.length);\r\n\r\n    }\r\n\r\n    replace(item, prevItem) {\r\n        const index = this.getIndex(prevItem);\r\n        if (index === -1) {\r\n            throw new Error('replace: The previous item does not exist');\r\n        }\r\n        this.setAt(item, index);\r\n    }\r\n\r\n    setAt(item, index) {\r\n        if (index >= 0 && index <= this._items.length) {\r\n\r\n            if (Utils.isObjectLiteral(item)) {\r\n                const o = item;\r\n                item = this.createItem(o);\r\n                item.patch(o);\r\n            }\r\n\r\n            let currentIndex = this._items.indexOf(item);\r\n            if (currentIndex != -1) {\r\n                if (currentIndex !== index) {\r\n                    const fromIndex = currentIndex;\r\n                    if (fromIndex !== index) {\r\n                        this._items.splice(fromIndex, 1);\r\n                        this._items.splice(index, 0, item);\r\n                        this.onMove(item, fromIndex, index);\r\n                    }\r\n                }\r\n            } else {\r\n                if( index < this._items.length){\r\n\r\n                    if (this._items[index].ref) {\r\n                        this._refs[this._items[index].ref] = undefined;\r\n                    }\r\n\r\n                    const prevItem = this._items[index];\r\n\r\n                    // Doesn't exist yet: overwrite current.\r\n                    this._items[index] = item;\r\n\r\n                    if (item.ref) {\r\n                        this._refs[item.ref] = item;\r\n                    }\r\n\r\n                    this.onSet(item, index, prevItem);\r\n                } else {\r\n                    throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\r\n        }\r\n    }\r\n\r\n    getAt(index) {\r\n        return this._items[index];\r\n    }\r\n\r\n    getIndex(item) {\r\n        return this._items.indexOf(item);\r\n    }\r\n\r\n    remove(item) {\r\n        let index = this._items.indexOf(item);\r\n\r\n        if (index !== -1) {\r\n            this.removeAt(index);\r\n        }\r\n    };\r\n\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this._items.length) {\r\n            const item = this._items[index];\r\n\r\n            if (item.ref) {\r\n                this._refs[item.ref] = undefined;\r\n            }\r\n\r\n            this._items.splice(index, 1);\r\n\r\n            this.onRemove(item, index);\r\n\r\n            return item;\r\n        } else {\r\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\r\n        }\r\n    };\r\n\r\n    clear() {\r\n        let n = this._items.length;\r\n        if (n) {\r\n            let prev = this._items;\r\n            this._items = [];\r\n            this._refs = {}\r\n            this.onSync(prev, [], []);\r\n        }\r\n    };\r\n\r\n    a(o) {\r\n        if (Utils.isObjectLiteral(o)) {\r\n            let c = this.createItem(o);\r\n            c.patch(o);\r\n            this.add(c);\r\n            return c;\r\n        } else if (Array.isArray(o)) {\r\n            for (let i = 0, n = o.length; i < n; i++) {\r\n                this.a(o[i]);\r\n            }\r\n            return null;\r\n        } else if (this.isItem(o)) {\r\n            this.add(o);\r\n            return o;\r\n        }\r\n    };\r\n\r\n    get length() {\r\n        return this._items.length;\r\n    }\r\n\r\n    _getRefs() {\r\n        return this._refs;\r\n    }\r\n\r\n    getByRef(ref) {\r\n        return this._refs[ref];\r\n    }\r\n\r\n    clearRef(ref) {\r\n        delete this._refs[ref];\r\n    }\r\n\r\n    setRef(ref, child) {\r\n        this._refs[ref] = child;\r\n    }\r\n\r\n    patch(settings) {\r\n        if (Utils.isObjectLiteral(settings)) {\r\n            this._setByObject(settings);\r\n        } else if (Array.isArray(settings)) {\r\n            this._setByArray(settings);\r\n        }\r\n    }\r\n\r\n    _setByObject(settings) {\r\n        // Overrule settings of known referenced items.\r\n        let refs = this._getRefs();\r\n        let crefs = Object.keys(settings);\r\n        for (let i = 0, n = crefs.length; i < n; i++) {\r\n            let cref = crefs[i];\r\n            let s = settings[cref];\r\n\r\n            let c = refs[cref];\r\n            if (!c) {\r\n                if (this.isItem(s)) {\r\n                    // Replace previous item;\r\n                    s.ref = cref;\r\n                    this.add(s);\r\n                } else {\r\n                    // Create new item.\r\n                    c = this.createItem(s);\r\n                    c.ref = cref;\r\n                    c.patch(s);\r\n                    this.add(c);\r\n                }\r\n            } else {\r\n                if (this.isItem(s)) {\r\n                    if (c !== s) {\r\n                        // Replace previous item;\r\n                        let idx = this.getIndex(c);\r\n                        s.ref = cref;\r\n                        this.setAt(s, idx);\r\n                    }\r\n                } else {\r\n                    c.patch(s);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _equalsArray(array) {\r\n        let same = true;\r\n        if (array.length === this._items.length) {\r\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\r\n                same = same && (this._items[i] === array[i]);\r\n            }\r\n        } else {\r\n            same = false;\r\n        }\r\n        return same;\r\n    }\r\n\r\n    _setByArray(array) {\r\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\r\n        if (this._equalsArray(array)) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0, n = this._items.length; i < n; i++) {\r\n            this._items[i].marker = true;\r\n        }\r\n\r\n        let refs;\r\n        let newItems = [];\r\n        for (let i = 0, n = array.length; i < n; i++) {\r\n            let s = array[i];\r\n            if (this.isItem(s)) {\r\n                s.marker = false;\r\n                newItems.push(s);\r\n            } else {\r\n                let cref = s.ref;\r\n                let c;\r\n                if (cref) {\r\n                    if (!refs) refs = this._getRefs();\r\n                    c = refs[cref];\r\n                }\r\n\r\n                if (!c) {\r\n                    // Create new item.\r\n                    c = this.createItem(s);\r\n                } else {\r\n                    c.marker = false;\r\n                }\r\n\r\n                if (Utils.isObjectLiteral(s)) {\r\n                    c.patch(s);\r\n                }\r\n\r\n                newItems.push(c);\r\n            }\r\n        }\r\n\r\n        this._setItems(newItems);\r\n    }\r\n\r\n    _setItems(newItems) {\r\n        let prevItems = this._items;\r\n        this._items = newItems;\r\n\r\n        // Remove the items.\r\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\r\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\r\n\r\n        if (removed.length || added.length) {\r\n            // Recalculate refs.\r\n            this._refs = {}\r\n            for (let i = 0, n = this._items.length; i < n; i++) {\r\n                let ref = this._items[i].ref;\r\n                if (ref) {\r\n                    this._refs[ref] = this._items[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onSync(removed, added, newItems);\r\n    }\r\n\r\n    sort(f) {\r\n        const items = this._items.slice();\r\n        items.sort(f);\r\n        this._setByArray(items);\r\n    }\r\n\r\n    onAdd(item, index) {\r\n    }\r\n\r\n    onRemove(item, index) {\r\n    }\r\n\r\n    onSync(removed, added, order) {\r\n    }\r\n\r\n    onSet(item, index, prevItem) {\r\n    }\r\n\r\n    onMove(item, fromIndex, toIndex) {\r\n    }\r\n\r\n    createItem(object) {\r\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\r\n    }\r\n\r\n    isItem(object) {\r\n        return false;\r\n    }\r\n\r\n    forEach(f) {\r\n        this.get().forEach(f);\r\n    }\r\n\r\n}\r\n\r\nimport Utils from \"./Utils.mjs\";\r\n\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Manages the list of children for an element.\r\n */\r\n\r\nimport ObjectList from \"./ObjectList.mjs\";\r\n\r\nexport default class ElementChildList extends ObjectList {\r\n\r\n    constructor(element) {\r\n        super();\r\n        this._element = element;\r\n    }\r\n\r\n    _connectParent(item) {\r\n        const prevParent = item.parent;\r\n        if (prevParent && prevParent !== this._element) {\r\n            // Cleanup in previous child list, without\r\n            const prevChildList = item.parent.childList;\r\n            const index = prevChildList.getIndex(item);\r\n\r\n            if (item.ref) {\r\n                prevChildList._refs[item.ref] = undefined;\r\n            }\r\n            prevChildList._items.splice(index, 1);\r\n\r\n            // Also clean up element core.\r\n            prevParent.core.removeChildAt(index);\r\n\r\n        }\r\n\r\n        item._setParent(this._element);\r\n\r\n        // We are expecting the caller to sync it to the core.\r\n    }\r\n\r\n    onAdd(item, index) {\r\n        this._connectParent(item);\r\n        this._element.core.addChildAt(index, item.core);\r\n    }\r\n\r\n    onRemove(item, index) {\r\n        item._setParent(null);\r\n        this._element.core.removeChildAt(index);\r\n    }\r\n\r\n    onSync(removed, added, order) {\r\n        for (let i = 0, n = removed.length; i < n; i++) {\r\n            removed[i]._setParent(null);\r\n        }\r\n        for (let i = 0, n = added.length; i < n; i++) {\r\n            this._connectParent(added[i]);\r\n        }\r\n        let gc = i => i.core;\r\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\r\n    }\r\n\r\n    onSet(item, index, prevItem) {\r\n        prevItem._setParent(null);\r\n\r\n        this._connectParent(item);\r\n        this._element.core.setChildAt(index, item.core);\r\n    }\r\n\r\n    onMove(item, fromIndex, toIndex) {\r\n        this._element.core.moveChild(fromIndex, toIndex);\r\n    }\r\n\r\n    createItem(object) {\r\n        if (object.type) {\r\n            return new object.type(this._element.stage);\r\n        } else {\r\n            return this._element.stage.createElement();\r\n        }\r\n    }\r\n\r\n    isItem(object) {\r\n        return object.isElement;\r\n    }\r\n\r\n}\r\n\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Render tree node.\r\n */\r\n\r\nimport StageUtils from \"./StageUtils.mjs\";\r\nimport ElementCore from \"./core/ElementCore.mjs\";\r\nimport Base from \"./Base.mjs\";\r\n\r\nimport Utils from \"./Utils.mjs\";\r\nimport EventEmitter from \"../EventEmitter.mjs\";\r\nimport Shader from \"./Shader.mjs\";\r\n\r\nexport default class Element {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.__id = Element.id++;\r\n\r\n        this.__start();\r\n\r\n        // EventEmitter constructor.\r\n        this._hasEventListeners = false;\r\n\r\n        this.__core = new ElementCore(this);\r\n\r\n        /**\r\n         * A reference that can be used while merging trees.\r\n         * @type {string}\r\n         */\r\n        this.__ref = null;\r\n\r\n        /**\r\n         * An element is attached if it is a descendant of the stage root.\r\n         * @type {boolean}\r\n         */\r\n        this.__attached = false;\r\n\r\n        /**\r\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\r\n         * @type {boolean}\r\n         */\r\n        this.__enabled = false;\r\n\r\n        /**\r\n         * An element is active when it is enabled and it is within bounds.\r\n         * @type {boolean}\r\n         */\r\n        this.__active = false;\r\n\r\n        /**\r\n         * @type {Element}\r\n         */\r\n        this.__parent = null;\r\n\r\n        /**\r\n         * The texture that is currently set.\r\n         * @type {Texture}\r\n         */\r\n        this.__texture = null;\r\n\r\n        /**\r\n         * The currently displayed texture. While this.texture is loading, this one may be different.\r\n         * @type {Texture}\r\n         */\r\n        this.__displayedTexture = null;\r\n\r\n        /**\r\n         * Tags that can be used to identify/search for a specific element.\r\n         * @type {String[]}\r\n         */\r\n        this.__tags = null;\r\n\r\n        /**\r\n         * The tree's tags mapping.\r\n         * This contains all elements for all known tags, at all times.\r\n         * @type {Map}\r\n         */\r\n        this.__treeTags = null;\r\n\r\n        /**\r\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\r\n         * @type {boolean}\r\n         */\r\n        this.__tagRoot = false;\r\n\r\n        /**\r\n         * (Lazy-initialised) list of children owned by this elements.\r\n         * @type {ElementChildList}\r\n         */\r\n        this.__childList = null;\r\n\r\n        this._w = 0;\r\n\r\n        this._h = 0;\r\n    }\r\n\r\n    __start() {\r\n    }\r\n\r\n    get id() {\r\n        return this.__id;\r\n    }\r\n\r\n    set ref(ref) {\r\n        if (this.__ref !== ref) {\r\n            const charcode = ref.charCodeAt(0);\r\n            if (!Utils.isUcChar(charcode)) {\r\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\r\n            }\r\n            if (this.__ref !== null) {\r\n                this.removeTag(this.__ref);\r\n                if (this.__parent) {\r\n                    this.__parent.__childList.clearRef(this.__ref);\r\n                }\r\n            }\r\n\r\n            this.__ref = ref;\r\n\r\n            if (this.__ref) {\r\n                this._addTag(this.__ref);\r\n                if (this.__parent) {\r\n                    this.__parent.__childList.setRef(this.__ref, this);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get ref() {\r\n        return this.__ref;\r\n    }\r\n\r\n    get core() {\r\n        return this.__core;\r\n    }\r\n\r\n    setAsRoot() {\r\n        this.__core.setAsRoot();\r\n        this._updateAttachedFlag();\r\n        this._updateEnabledFlag();\r\n    }\r\n\r\n    get isRoot() {\r\n        return this.__core.isRoot;\r\n    }\r\n\r\n    _setParent(parent) {\r\n        if (this.__parent === parent) return;\r\n\r\n        if (this.__parent) {\r\n            this._unsetTagsParent();\r\n        }\r\n\r\n        this.__parent = parent;\r\n\r\n        if (parent) {\r\n            this._setTagsParent();\r\n        }\r\n\r\n        this._updateAttachedFlag();\r\n        this._updateEnabledFlag();\r\n        this._updateCollision();\r\n\r\n        if (this.isRoot && parent) {\r\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\r\n        }\r\n    };\r\n\r\n    getDepth() {\r\n        let depth = 0;\r\n\r\n        let p = this.__parent;\r\n        while(p) {\r\n            depth++;\r\n            p = p.__parent;\r\n        }\r\n\r\n        return depth;\r\n    };\r\n\r\n    getAncestor(l) {\r\n        let p = this;\r\n        while (l > 0 && p.__parent) {\r\n            p = p.__parent;\r\n            l--;\r\n        }\r\n        return p;\r\n    };\r\n\r\n    getAncestors() {\r\n        const a = [];\r\n        let p = this;\r\n        while (p) {\r\n            a.push(p);\r\n            p = p.__parent;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    getAncestorAtDepth(depth) {\r\n        let levels = this.getDepth() - depth;\r\n        if (levels < 0) {\r\n            return null;\r\n        }\r\n        return this.getAncestor(levels);\r\n    };\r\n\r\n    isAncestorOf(c) {\r\n        let p = c;\r\n        while(p = p.parent) {\r\n            if (this === p) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    getSharedAncestor(c) {\r\n        let o1 = this;\r\n        let o2 = c;\r\n        let l1 = o1.getDepth();\r\n        let l2 = o2.getDepth();\r\n        if (l1 > l2) {\r\n            o1 = o1.getAncestor(l1 - l2);\r\n        } else if (l2 > l1) {\r\n            o2 = o2.getAncestor(l2 - l1);\r\n        }\r\n\r\n        do {\r\n            if (o1 === o2) {\r\n                return o1;\r\n            }\r\n\r\n            o1 = o1.__parent;\r\n            o2 = o2.__parent;\r\n        } while (o1 && o2);\r\n\r\n        return null;\r\n    };\r\n\r\n    get attached() {\r\n        return this.__attached;\r\n    }\r\n\r\n    get enabled() {\r\n        return this.__enabled;\r\n    }\r\n\r\n    get active() {\r\n        return this.__active;\r\n    }\r\n\r\n    _isAttached() {\r\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\r\n    };\r\n\r\n    _isEnabled() {\r\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\r\n    };\r\n\r\n    _isActive() {\r\n        return this._isEnabled() && this.withinBoundsMargin;\r\n    };\r\n\r\n    /**\r\n     * Updates the 'attached' flag for this branch.\r\n     */\r\n    _updateAttachedFlag() {\r\n        let newAttached = this._isAttached();\r\n        if (this.__attached !== newAttached) {\r\n            this.__attached = newAttached;\r\n\r\n            if (newAttached) {\r\n                this._onSetup();\r\n            }\r\n\r\n            let children = this._children.get();\r\n            if (children) {\r\n                let m = children.length;\r\n                if (m > 0) {\r\n                    for (let i = 0; i < m; i++) {\r\n                        children[i]._updateAttachedFlag();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newAttached) {\r\n                this._onAttach();\r\n            } else {\r\n                this._onDetach();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates the 'enabled' flag for this branch.\r\n     */\r\n    _updateEnabledFlag() {\r\n        let newEnabled = this._isEnabled();\r\n        if (this.__enabled !== newEnabled) {\r\n            if (newEnabled) {\r\n                this._onEnabled();\r\n                this._setEnabledFlag();\r\n            } else {\r\n                this._onDisabled();\r\n                this._unsetEnabledFlag();\r\n            }\r\n\r\n            let children = this._children.get();\r\n            if (children) {\r\n                let m = children.length;\r\n                if (m > 0) {\r\n                    for (let i = 0; i < m; i++) {\r\n                        children[i]._updateEnabledFlag();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    _setEnabledFlag() {\r\n        this.__enabled = true;\r\n\r\n        // Force re-check of texture because dimensions might have changed (cutting).\r\n        this._updateDimensions();\r\n        this._updateTextureCoords();\r\n\r\n        if (this.__texture) {\r\n            this.__texture.addElement(this);\r\n        }\r\n\r\n        if (this.withinBoundsMargin) {\r\n            this._setActiveFlag();\r\n        }\r\n\r\n        if (this.__core.shader) {\r\n            this.__core.shader.addElement(this.__core);\r\n        }\r\n\r\n    }\r\n\r\n    _unsetEnabledFlag() {\r\n        if (this.__active) {\r\n            this._unsetActiveFlag();\r\n        }\r\n\r\n        if (this.__texture) {\r\n            this.__texture.removeElement(this);\r\n        }\r\n\r\n        if (this.__core.shader) {\r\n            this.__core.shader.removeElement(this.__core);\r\n        }\r\n\r\n        if (this._texturizer) {\r\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\r\n        }\r\n\r\n        this.__enabled = false;\r\n    }\r\n\r\n    _setActiveFlag() {\r\n        this.__active = true;\r\n\r\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\r\n        if (this.__texture) {\r\n            this.__texture.incActiveCount();\r\n        }\r\n\r\n        if (this.__texture) {\r\n            this._enableTexture();\r\n        }\r\n        this._onActive();\r\n    }\r\n\r\n    _unsetActiveFlag() {\r\n        if (this.__texture) {\r\n            this.__texture.decActiveCount();\r\n        }\r\n\r\n        this.__active = false;\r\n        if (this.__texture) {\r\n            this._disableTexture();\r\n        }\r\n\r\n        if (this._hasTexturizer()) {\r\n            this.texturizer.deactivate();\r\n        }\r\n\r\n        this._onInactive();\r\n    }\r\n\r\n    _onSetup() {\r\n    }\r\n\r\n    _onAttach() {\r\n    }\r\n\r\n    _onDetach() {\r\n    }\r\n\r\n    _onEnabled() {\r\n    }\r\n\r\n    _onDisabled() {\r\n    }\r\n\r\n    _onActive() {\r\n    }\r\n\r\n    _onInactive() {\r\n    }\r\n\r\n    _onResize() {\r\n    }\r\n\r\n    _getRenderWidth() {\r\n        if (this._w) {\r\n            return this._w;\r\n        } else if (this.__displayedTexture) {\r\n            return this.__displayedTexture.getRenderWidth();\r\n        } else if (this.__texture) {\r\n            // Texture already loaded, but not yet updated (probably because this element is not active).\r\n            return this.__texture.getRenderWidth();\r\n        } else {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    _getRenderHeight() {\r\n        if (this._h) {\r\n            return this._h;\r\n        } else if (this.__displayedTexture) {\r\n            return this.__displayedTexture.getRenderHeight();\r\n        } else if (this.__texture) {\r\n            // Texture already loaded, but not yet updated (probably because this element is not active).\r\n            return this.__texture.getRenderHeight();\r\n        } else {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    get renderWidth() {\r\n        if (this.__enabled) {\r\n            // Render width is only maintained if this element is enabled.\r\n            return this.__core.getRenderWidth();\r\n        } else {\r\n            return this._getRenderWidth();\r\n        }\r\n    }\r\n\r\n    get renderHeight() {\r\n        if (this.__enabled) {\r\n            return this.__core.getRenderHeight();\r\n        } else {\r\n            return this._getRenderHeight();\r\n        }\r\n    }\r\n\r\n    get finalX() {\r\n        return this.__core.x;\r\n    }\r\n\r\n    get finalY() {\r\n        return this.__core.y;\r\n    }\r\n\r\n    get finalW() {\r\n        return this.__core.w;\r\n    }\r\n\r\n    get finalH() {\r\n        return this.__core.h;\r\n    }\r\n\r\n    textureIsLoaded() {\r\n        return this.__texture && this.__texture.isLoaded();\r\n    }\r\n\r\n    loadTexture() {\r\n        if (this.__texture) {\r\n            this.__texture.load();\r\n\r\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\r\n                // Loading the texture will have no effect on the dimensions of this element.\r\n                // Manually update them, so that calcs can be performed immediately in userland.\r\n                this._updateDimensions();\r\n            }\r\n        }\r\n    }\r\n\r\n    _enableTextureError() {\r\n        // txError event should automatically be re-triggered when a element becomes active.\r\n        const loadError = this.__texture.loadError;\r\n        if (loadError) {\r\n            this.emit('txError', loadError, this.__texture._source);\r\n        }\r\n    }\r\n\r\n    _enableTexture() {\r\n        if (this.__texture.isLoaded()) {\r\n            this._setDisplayedTexture(this.__texture);\r\n        } else {\r\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\r\n            this._setDisplayedTexture(null);\r\n\r\n            this._enableTextureError();\r\n        }\r\n    }\r\n\r\n    _disableTexture() {\r\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\r\n        // mw, mh for checking within bounds.\r\n        this._setDisplayedTexture(null);\r\n    }\r\n\r\n    get texture() {\r\n        return this.__texture;\r\n    }\r\n\r\n    set texture(v) {\r\n        let texture;\r\n        if (Utils.isObjectLiteral(v)) {\r\n            if (v.type) {\r\n                texture = new v.type(this.stage);\r\n            } else {\r\n                texture = this.texture;\r\n            }\r\n\r\n            if (texture) {\r\n                Base.patchObject(texture, v);\r\n            }\r\n        } else if (!v) {\r\n            texture = null;\r\n        } else {\r\n            if (v.isTexture) {\r\n                texture = v;\r\n            } else if (v.isTextureSource) {\r\n                texture = new SourceTexture(this.stage);\r\n                texture.textureSource = v;\r\n            } else {\r\n                console.error(\"[Lightning] Please specify a texture type.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        const prevTexture = this.__texture;\r\n        if (texture !== prevTexture) {\r\n            this.__texture = texture;\r\n\r\n            if (this.__texture) {\r\n                if (this.__enabled) {\r\n                    this.__texture.addElement(this);\r\n\r\n                    if (this.withinBoundsMargin) {\r\n                        if (this.__texture.isLoaded()) {\r\n                            this._setDisplayedTexture(this.__texture);\r\n                        } else {\r\n                            this._enableTextureError();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\r\n                this._setDisplayedTexture(null);\r\n            }\r\n\r\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\r\n                prevTexture.removeElement(this);\r\n            }\r\n\r\n            this._updateDimensions();\r\n        }\r\n    }\r\n\r\n    get displayedTexture() {\r\n        return this.__displayedTexture;\r\n    }\r\n\r\n    _setDisplayedTexture(v) {\r\n        let prevTexture = this.__displayedTexture;\r\n\r\n        if (prevTexture && (v !== prevTexture)) {\r\n            if (this.__texture !== prevTexture) {\r\n                // The old displayed texture is deprecated.\r\n                prevTexture.removeElement(this);\r\n            }\r\n        }\r\n\r\n        const prevSource = this.__core.displayedTextureSource;\r\n        const sourceChanged = (v ? v._source : null) !== prevSource;\r\n\r\n        this.__displayedTexture = v;\r\n        this._updateDimensions();\r\n\r\n        if (this.__displayedTexture) {\r\n            if (sourceChanged) {\r\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\r\n                this._updateTextureCoords();\r\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\r\n            }\r\n        } else {\r\n            this.__core.setDisplayedTextureSource(null);\r\n        }\r\n\r\n        if (sourceChanged) {\r\n            if (this.__displayedTexture) {\r\n                this.stage.removeUpdateSourceTexture(this.__displayedTexture)\r\n                this.emit('txLoaded', this.__displayedTexture);\r\n            } else {\r\n                this.emit('txUnloaded', this.__displayedTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    onTextureSourceLoaded() {\r\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\r\n        if (this.active) {\r\n            // We may be dealing with a texture reloading, so we must force update.\r\n            this._setDisplayedTexture(this.__texture);\r\n        }\r\n    };\r\n\r\n    onTextureSourceLoadError(e) {\r\n        this.emit('txError', e, this.__texture._source);\r\n    };\r\n\r\n    forceRenderUpdate() {\r\n        this.__core.setHasRenderUpdates(3);\r\n    }\r\n\r\n    onDisplayedTextureClippingChanged() {\r\n        this._updateDimensions();\r\n        this._updateTextureCoords();\r\n    };\r\n\r\n    onPrecisionChanged() {\r\n        this._updateDimensions();\r\n    };\r\n\r\n    onDimensionsChanged(w, h) {\r\n        if (this.texture instanceof TextTexture) {\r\n            this.texture.w = w;\r\n            this.texture.h = h;\r\n            this.w = w;\r\n            this.h = h;\r\n        }\r\n    }\r\n\r\n    _updateDimensions() {\r\n        let w = this._getRenderWidth();\r\n        let h = this._getRenderHeight();\r\n\r\n        let unknownSize = false;\r\n        if (!w || !h) {\r\n            if (!this.__displayedTexture && this.__texture) {\r\n                // We use a 'max width' replacement instead in the ElementCore calcs.\r\n                // This makes sure that it is able to determine withinBounds.\r\n                w = w || this.__texture.mw;\r\n                h = h || this.__texture.mh;\r\n\r\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\r\n                    unknownSize = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.__core.setDimensions(w, h, unknownSize)) {\r\n            this._onResize();\r\n        }\r\n    }\r\n\r\n    _updateTextureCoords() {\r\n        if (this.displayedTexture && this.displayedTexture._source) {\r\n            let displayedTexture = this.displayedTexture;\r\n            let displayedTextureSource = this.displayedTexture._source;\r\n\r\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\r\n            if (displayedTexture.clipping) {\r\n                // Apply texture clipping.\r\n                let w = displayedTextureSource.getRenderWidth();\r\n                let h = displayedTextureSource.getRenderHeight();\r\n                let iw, ih, rw, rh;\r\n                iw = 1 / w;\r\n                ih = 1 / h;\r\n\r\n                if (displayedTexture.pw) {\r\n                    rw = (displayedTexture.pw) * iw;\r\n                } else {\r\n                    rw = (w - displayedTexture.px) * iw;\r\n                }\r\n\r\n                if (displayedTexture.ph) {\r\n                    rh = displayedTexture.ph * ih;\r\n                } else {\r\n                    rh = (h - displayedTexture.py) * ih;\r\n                }\r\n\r\n                iw *= (displayedTexture.px);\r\n                ih *= (displayedTexture.py);\r\n\r\n                tx1 = iw;\r\n                ty1 = ih;\r\n                tx2 = tx2 * rw + iw;\r\n                ty2 = ty2 * rh + ih;\r\n\r\n                tx1 = Math.max(0, tx1);\r\n                ty1 = Math.max(0, ty1);\r\n                tx2 = Math.min(1, tx2);\r\n                ty2 = Math.min(1, ty2);\r\n            }\r\n\r\n            if (displayedTextureSource._flipTextureY) {\r\n                let tempty = ty2;\r\n                ty2 = ty1;\r\n                ty1 = tempty;\r\n            }\r\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\r\n        }\r\n    }\r\n\r\n    getCornerPoints() {\r\n        return this.__core.getCornerPoints();\r\n    }\r\n\r\n    _unsetTagsParent() {\r\n        if (this.__tags) {\r\n            this.__tags.forEach((tag) => {\r\n                // Remove from treeTags.\r\n                let p = this;\r\n                while (p = p.__parent) {\r\n                    let parentTreeTags = p.__treeTags.get(tag);\r\n                    parentTreeTags.delete(this);\r\n\r\n                    if (p.__tagRoot) {\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        let tags = null;\r\n        let n = 0;\r\n        if (this.__treeTags) {\r\n            if (!this.__tagRoot) {\r\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\r\n                n = tags.length;\r\n\r\n                if (n > 0) {\r\n                    for (let i = 0; i < n; i++) {\r\n                        let tagSet = this.__treeTags.get(tags[i]);\r\n\r\n                        // Remove from treeTags.\r\n                        let p = this;\r\n                        while ((p = p.__parent)) {\r\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\r\n\r\n                            tagSet.forEach(function (comp) {\r\n                                parentTreeTags.delete(comp);\r\n                            });\r\n\r\n                            if (p.__tagRoot) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    _setTagsParent() {\r\n        // Just copy over the 'local' tags.\r\n        if (this.__tags) {\r\n            this.__tags.forEach((tag) => {\r\n                let p = this;\r\n                while (p = p.__parent) {\r\n                    if (!p.__treeTags) {\r\n                        p.__treeTags = new Map();\r\n                    }\r\n\r\n                    let s = p.__treeTags.get(tag);\r\n                    if (!s) {\r\n                        s = new Set();\r\n                        p.__treeTags.set(tag, s);\r\n                    }\r\n\r\n                    s.add(this);\r\n\r\n                    if (p.__tagRoot) {\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.__treeTags && this.__treeTags.size) {\r\n            if (!this.__tagRoot) {\r\n                this.__treeTags.forEach((tagSet, tag) => {\r\n                    let p = this;\r\n                    while (!p.__tagRoot && (p = p.__parent)) {\r\n                        if (p.__tagRoot) {\r\n                            // Do not copy all subs.\r\n                        }\r\n                        if (!p.__treeTags) {\r\n                            p.__treeTags = new Map();\r\n                        }\r\n\r\n                        let s = p.__treeTags.get(tag);\r\n                        if (!s) {\r\n                            s = new Set();\r\n                            p.__treeTags.set(tag, s);\r\n                        }\r\n\r\n                        tagSet.forEach(function (comp) {\r\n                            s.add(comp);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    _getByTag(tag) {\r\n        if (!this.__treeTags) {\r\n            return [];\r\n        }\r\n        let t = this.__treeTags.get(tag);\r\n        return t ? Utils.setToArray(t) : [];\r\n    };\r\n\r\n    getTags() {\r\n        return this.__tags ? this.__tags : [];\r\n    };\r\n\r\n    setTags(tags) {\r\n        tags = tags.reduce((acc, tag) => {\r\n            return acc.concat(tag.split(' '));\r\n        }, []);\r\n\r\n        if (this.__ref) {\r\n            tags.push(this.__ref);\r\n        }\r\n\r\n        let i, n = tags.length;\r\n        let removes = [];\r\n        let adds = [];\r\n        for (i = 0; i < n; i++) {\r\n            if (!this.hasTag(tags[i])) {\r\n                adds.push(tags[i]);\r\n            }\r\n        }\r\n\r\n        let currentTags = this.tags || [];\r\n        n = currentTags.length;\r\n        for (i = 0; i < n; i++) {\r\n            if (tags.indexOf(currentTags[i]) == -1) {\r\n                removes.push(currentTags[i]);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < removes.length; i++) {\r\n            this.removeTag(removes[i]);\r\n        }\r\n\r\n        for (i = 0; i < adds.length; i++) {\r\n            this.addTag(adds[i]);\r\n        }\r\n    }\r\n\r\n    addTag(tag) {\r\n        if (tag.indexOf(' ') === -1) {\r\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\r\n                this._throwError(\"Tag may not start with an upper case character.\");\r\n            }\r\n\r\n            this._addTag(tag);\r\n        } else {\r\n            const tags = tag.split(' ');\r\n            for (let i = 0, m = tags.length; i < m; i++) {\r\n                const tag = tags[i];\r\n\r\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\r\n                    this._throwError(\"Tag may not start with an upper case character.\");\r\n                }\r\n\r\n                this._addTag(tag);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addTag(tag) {\r\n        if (!this.__tags) {\r\n            this.__tags = [];\r\n        }\r\n        if (this.__tags.indexOf(tag) === -1) {\r\n            this.__tags.push(tag);\r\n\r\n            // Add to treeTags hierarchy.\r\n            let p = this.__parent;\r\n            if (p) {\r\n                do {\r\n                    if (!p.__treeTags) {\r\n                        p.__treeTags = new Map();\r\n                    }\r\n\r\n                    let s = p.__treeTags.get(tag);\r\n                    if (!s) {\r\n                        s = new Set();\r\n                        p.__treeTags.set(tag, s);\r\n                    }\r\n\r\n                    s.add(this);\r\n\r\n                } while (!p.__tagRoot && (p = p.__parent));\r\n            }\r\n        }\r\n    }\r\n\r\n    removeTag(tag) {\r\n        let i = this.__tags.indexOf(tag);\r\n        if (i !== -1) {\r\n            this.__tags.splice(i, 1);\r\n\r\n            // Remove from treeTags hierarchy.\r\n            let p = this.__parent;\r\n            if (p) {\r\n                do {\r\n                    let list = p.__treeTags.get(tag);\r\n                    if (list) {\r\n                        list.delete(this);\r\n                    }\r\n                } while (!p.__tagRoot && (p = p.__parent));\r\n            }\r\n        }\r\n    }\r\n\r\n    hasTag(tag) {\r\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\r\n    }\r\n\r\n    /**\r\n     * Returns one of the elements from the subtree that have this tag.\r\n     * @param {string} tag\r\n     * @returns {Element}\r\n     */\r\n    _tag(tag) {\r\n        if (tag.indexOf(\".\") !== -1) {\r\n            return this.mtag(tag)[0];\r\n        } else {\r\n            if (this.__treeTags) {\r\n                let t = this.__treeTags.get(tag);\r\n                if (t) {\r\n                    const item = t.values().next();\r\n                    return item ? item.value : undefined;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    get tag() {\r\n        return this._tag;\r\n    }\r\n\r\n    set tag(t) {\r\n        this.tags = t;\r\n    }\r\n\r\n    /**\r\n     * Returns all elements from the subtree that have this tag.\r\n     * @param {string} tag\r\n     * @returns {Element[]}\r\n     */\r\n    mtag(tag) {\r\n        let idx = tag.indexOf(\".\");\r\n        if (idx >= 0) {\r\n            let parts = tag.split('.');\r\n            let res = this._getByTag(parts[0]);\r\n            let level = 1;\r\n            let c = parts.length;\r\n            while (res.length && level < c) {\r\n                let resn = [];\r\n                for (let j = 0, n = res.length; j < n; j++) {\r\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\r\n                }\r\n\r\n                res = resn;\r\n                level++;\r\n            }\r\n            return res;\r\n        } else {\r\n            return this._getByTag(tag);\r\n        }\r\n    };\r\n\r\n    stag(tag, settings) {\r\n        let t = this.mtag(tag);\r\n        let n = t.length;\r\n        for (let i = 0; i < n; i++) {\r\n            Base.patchObject(t[i], settings);\r\n        }\r\n    }\r\n\r\n    get tagRoot() {\r\n        return this.__tagRoot;\r\n    }\r\n\r\n    set tagRoot(v) {\r\n        if (this.__tagRoot !== v) {\r\n            if (!v) {\r\n                this._setTagsParent();\r\n            } else {\r\n                this._unsetTagsParent();\r\n            }\r\n\r\n            this.__tagRoot = v;\r\n        }\r\n    }\r\n\r\n    sel(path) {\r\n        const results = this.select(path);\r\n        if (results.length) {\r\n            return results[0];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    select(path) {\r\n        if (path.indexOf(\",\") !== -1) {\r\n            let selectors = path.split(',');\r\n            let res = [];\r\n            for (let i = 0; i < selectors.length; i++) {\r\n                res = res.concat(this._select(selectors[i]));\r\n            }\r\n            return res;\r\n        } else {\r\n            return this._select(path);\r\n        }\r\n    }\r\n\r\n    _select(path) {\r\n        if (path === \"\") return [this];\r\n\r\n\r\n        let pointIdx = path.indexOf(\".\");\r\n        let arrowIdx = path.indexOf(\">\");\r\n        if (pointIdx === -1 && arrowIdx === -1) {\r\n            // Quick case.\r\n            return this.mtag(path);\r\n        }\r\n\r\n        // Detect by first char.\r\n        let isRef;\r\n        if (arrowIdx === 0) {\r\n            isRef = true;\r\n            path = path.substr(1);\r\n        } else if (pointIdx === 0) {\r\n            isRef = false;\r\n            path = path.substr(1);\r\n        } else {\r\n            isRef = false;\r\n        }\r\n\r\n        return this._selectChilds(path, isRef);\r\n    }\r\n\r\n    _selectChilds(path, isRef) {\r\n        const pointIdx = path.indexOf(\".\");\r\n        const arrowIdx = path.indexOf(\">\");\r\n\r\n        if (pointIdx === -1 && arrowIdx === -1) {\r\n            if (isRef) {\r\n                const ref = this.getByRef(path);\r\n                return ref ? [ref] : [];\r\n            } else {\r\n                return this.mtag(path);\r\n            }\r\n        }\r\n\r\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\r\n            let next;\r\n            const str = path.substr(0, pointIdx);\r\n            if (isRef) {\r\n                const ref = this.getByRef(str);\r\n                next = ref ? [ref] : [];\r\n            } else {\r\n                next = this.mtag(str);\r\n            }\r\n            let total = [];\r\n            const subPath = path.substr(pointIdx + 1);\r\n            for (let i = 0, n = next.length; i < n; i++) {\r\n                total = total.concat(next[i]._selectChilds(subPath, false));\r\n            }\r\n            return total;\r\n        } else {\r\n            let next;\r\n            const str = path.substr(0, arrowIdx);\r\n            if (isRef) {\r\n                const ref = this.getByRef(str);\r\n                next = ref ? [ref] : [];\r\n            } else {\r\n                next = this.mtag(str);\r\n            }\r\n            let total = [];\r\n            const subPath = path.substr(arrowIdx + 1);\r\n            for (let i = 0, n = next.length; i < n; i++) {\r\n                total = total.concat(next[i]._selectChilds(subPath, true));\r\n            }\r\n            return total;\r\n        }\r\n    }\r\n\r\n    getByRef(ref) {\r\n        return this.childList.getByRef(ref);\r\n    }\r\n\r\n    getLocationString() {\r\n        let i;\r\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\r\n        let localTags = this.getTags();\r\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\r\n        if (this.ref) {\r\n            str += \":[\" + i + \"]\" + this.ref;\r\n        } else if (localTags.length) {\r\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\r\n        } else {\r\n            str += \":[\" + i + \"]#\" + this.id;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    toString() {\r\n        let obj = this.getSettings();\r\n        return Element.getPrettyString(obj, \"\");\r\n    };\r\n\r\n    static getPrettyString(obj, indent) {\r\n        let children = obj.children;\r\n        delete obj.children;\r\n\r\n\r\n        // Convert singular json settings object.\r\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\r\n        let str = JSON.stringify(obj, function (k, v) {\r\n            if (colorKeys.indexOf(k) !== -1) {\r\n                return \"COLOR[\" + v.toString(16) + \"]\";\r\n            }\r\n            return v;\r\n        });\r\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\r\n\r\n        if (children) {\r\n            let childStr = \"\";\r\n            if (Utils.isObjectLiteral(children)) {\r\n                let refs = Object.keys(children);\r\n                childStr = \"\";\r\n                for (let i = 0, n = refs.length; i < n; i++) {\r\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\r\n                    delete children[refs[i]].ref;\r\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\r\n                }\r\n                let isEmpty = (str === \"{}\");\r\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\r\n            } else {\r\n                let n = children.length;\r\n                childStr = \"[\";\r\n                for (let i = 0; i < n; i++) {\r\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\r\n                }\r\n                childStr += indent + \"]}\";\r\n                let isEmpty = (str === \"{}\");\r\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\r\n            }\r\n\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    getSettings() {\r\n        let settings = this.getNonDefaults();\r\n\r\n        let children = this._children.get();\r\n        if (children) {\r\n            let n = children.length;\r\n            if (n) {\r\n                const childArray = [];\r\n                let missing = false;\r\n                for (let i = 0; i < n; i++) {\r\n                    childArray.push(children[i].getSettings());\r\n                    missing = missing || !children[i].ref;\r\n                }\r\n\r\n                if (!missing) {\r\n                    settings.children = {}\r\n                    childArray.forEach(child => {\r\n                        settings.children[child.ref] = child;\r\n                    });\r\n                } else {\r\n                    settings.children = childArray;\r\n                }\r\n            }\r\n        }\r\n\r\n        settings.id = this.id;\r\n\r\n        return settings;\r\n    }\r\n\r\n    getNonDefaults() {\r\n        let settings = {};\r\n\r\n        if (this.constructor !== Element) {\r\n            settings.type = this.constructor.name;\r\n        }\r\n\r\n        if (this.__ref) {\r\n            settings.ref = this.__ref;\r\n        }\r\n\r\n        if (this.__tags && this.__tags.length) {\r\n            settings.tags = this.__tags;\r\n        }\r\n\r\n        if (this.x !== 0) settings.x = this.x;\r\n        if (this.y !== 0) settings.y = this.y;\r\n        if (this.w !== 0) settings.w = this.w;\r\n        if (this.h !== 0) settings.h = this.h;\r\n\r\n        if (this.scaleX === this.scaleY) {\r\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\r\n        } else {\r\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\r\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\r\n        }\r\n\r\n        if (this.pivotX === this.pivotY) {\r\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\r\n        } else {\r\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\r\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\r\n        }\r\n\r\n        if (this.mountX === this.mountY) {\r\n            if (this.mountX !== 0) settings.mount = this.mountX;\r\n        } else {\r\n            if (this.mountX !== 0) settings.mountX = this.mountX;\r\n            if (this.mountY !== 0) settings.mountY = this.mountY;\r\n        }\r\n\r\n        if (this.alpha !== 1) settings.alpha = this.alpha;\r\n\r\n        if (!this.visible) settings.visible = false;\r\n\r\n        if (this.rotation !== 0) settings.rotation = this.rotation;\r\n\r\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\r\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\r\n        } else {\r\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\r\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\r\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\r\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\r\n        }\r\n\r\n        if (this.zIndex) settings.zIndex = this.zIndex;\r\n\r\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\r\n\r\n        if (this.clipping) settings.clipping = this.clipping;\r\n\r\n        if (!this.clipbox) settings.clipbox = this.clipbox;\r\n\r\n        if (this.__texture) {\r\n            let tnd = this.__texture.getNonDefaults();\r\n            if (Object.keys(tnd).length) {\r\n                settings.texture = tnd;\r\n            }\r\n        }\r\n\r\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\r\n            let tnd = this.shader.getNonDefaults();\r\n            if (Object.keys(tnd).length) {\r\n                settings.shader = tnd;\r\n            }\r\n        }\r\n\r\n        if (this._hasTexturizer()) {\r\n            if (this.texturizer.enabled) {\r\n                settings.renderToTexture = this.texturizer.enabled;\r\n            }\r\n            if (this.texturizer.lazy) {\r\n                settings.renderToTextureLazy = this.texturizer.lazy;\r\n            }\r\n            if (this.texturizer.colorize) {\r\n                settings.colorizeResultTexture = this.texturizer.colorize;\r\n            }\r\n            if (this.texturizer.renderOffscreen) {\r\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\r\n            }\r\n        }\r\n\r\n        return settings;\r\n    };\r\n\r\n    static getGetter(propertyPath) {\r\n        let getter = Element.PROP_GETTERS.get(propertyPath);\r\n        if (!getter) {\r\n            getter = new Function('obj', 'return obj.' + propertyPath);\r\n            Element.PROP_GETTERS.set(propertyPath, getter);\r\n        }\r\n        return getter;\r\n    }\r\n\r\n    static getSetter(propertyPath) {\r\n        let setter = Element.PROP_SETTERS.get(propertyPath);\r\n        if (!setter) {\r\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\r\n            Element.PROP_SETTERS.set(propertyPath, setter);\r\n        }\r\n        return setter;\r\n    }\r\n\r\n    get withinBoundsMargin() {\r\n        return this.__core._withinBoundsMargin;\r\n    }\r\n\r\n    _enableWithinBoundsMargin() {\r\n        // Iff enabled, this toggles the active flag.\r\n        if (this.__enabled) {\r\n            this._setActiveFlag();\r\n        }\r\n    }\r\n\r\n    _disableWithinBoundsMargin() {\r\n        // Iff active, this toggles the active flag.\r\n        if (this.__active) {\r\n            this._unsetActiveFlag();\r\n        }\r\n    }\r\n\r\n    set boundsMargin(v) {\r\n        if (!Array.isArray(v) && v !== null) {\r\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\r\n        }\r\n        this.__core.boundsMargin = v;\r\n    }\r\n\r\n    get boundsMargin() {\r\n        return this.__core.boundsMargin;\r\n    }\r\n\r\n    get x() {\r\n        return this.__core.offsetX;\r\n    }\r\n\r\n    set x(v) {\r\n        this.__core.offsetX = v;\r\n    }\r\n\r\n    get y() {\r\n        return this.__core.offsetY;\r\n    }\r\n\r\n    set y(v) {\r\n        this.__core.offsetY = v;\r\n    }\r\n\r\n    get w() {\r\n        return this._w;\r\n    }\r\n\r\n    set w(v) {\r\n        if (Utils.isFunction(v)) {\r\n            this._w = 0;\r\n            this.__core.funcW = v;\r\n        } else {\r\n            v = Math.max(v, 0);\r\n            if (this._w !== v) {\r\n                this.__core.disableFuncW();\r\n                this._w = v;\r\n                this._updateDimensions();\r\n            }\r\n        }\r\n    }\r\n\r\n    get h() {\r\n        return this._h;\r\n    }\r\n\r\n    set h(v) {\r\n        if (Utils.isFunction(v)) {\r\n            this._h = 0;\r\n            this.__core.funcH = v;\r\n        } else {\r\n            v = Math.max(v, 0);\r\n            if (this._h !== v) {\r\n                this.__core.disableFuncH();\r\n                this._h = v;\r\n                this._updateDimensions();\r\n            }\r\n        }\r\n    }\r\n\r\n    get collision() {\r\n        return this._collision;\r\n    }\r\n\r\n    set collision(v) {\r\n        this._collision = v;\r\n    }\r\n\r\n    _updateCollision() {\r\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\r\n            /**\r\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\r\n             * This narrows down the search for elements with active collision.\r\n            */\r\n            this.__parent.collision = 2;\r\n        }\r\n    }\r\n\r\n    get scaleX() {\r\n        return this.__core.scaleX;\r\n    }\r\n\r\n    set scaleX(v) {\r\n        this.__core.scaleX = v;\r\n    }\r\n\r\n    get scaleY() {\r\n        return this.__core.scaleY;\r\n    }\r\n\r\n    set scaleY(v) {\r\n        this.__core.scaleY = v;\r\n    }\r\n\r\n    get scale() {\r\n        return this.__core.scale;\r\n    }\r\n\r\n    set scale(v) {\r\n        this.__core.scale = v;\r\n    }\r\n\r\n    get pivotX() {\r\n        return this.__core.pivotX;\r\n    }\r\n\r\n    set pivotX(v) {\r\n        this.__core.pivotX = v;\r\n    }\r\n\r\n    get pivotY() {\r\n        return this.__core.pivotY;\r\n    }\r\n\r\n    set pivotY(v) {\r\n        this.__core.pivotY = v;\r\n    }\r\n\r\n    get pivot() {\r\n        return this.__core.pivot;\r\n    }\r\n\r\n    set pivot(v) {\r\n        this.__core.pivot = v;\r\n    }\r\n\r\n    get mountX() {\r\n        return this.__core.mountX;\r\n    }\r\n\r\n    set mountX(v) {\r\n        this.__core.mountX = v;\r\n    }\r\n\r\n    get mountY() {\r\n        return this.__core.mountY;\r\n    }\r\n\r\n    set mountY(v) {\r\n        this.__core.mountY = v;\r\n    }\r\n\r\n    get mount() {\r\n        return this.__core.mount;\r\n    }\r\n\r\n    set mount(v) {\r\n        this.__core.mount = v;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.__core.rotation;\r\n    }\r\n\r\n    set rotation(v) {\r\n        this.__core.rotation = v;\r\n    }\r\n\r\n    get alpha() {\r\n        return this.__core.alpha;\r\n    }\r\n\r\n    set alpha(v) {\r\n        this.__core.alpha = v;\r\n    }\r\n\r\n    get visible() {\r\n        return this.__core.visible;\r\n    }\r\n\r\n    set visible(v) {\r\n        this.__core.visible = v;\r\n    }\r\n    \r\n    get colorUl() {\r\n        return this.__core.colorUl;\r\n    }\r\n\r\n    set colorUl(v) {\r\n        this.__core.colorUl = v;\r\n    }\r\n\r\n    get colorUr() {\r\n        return this.__core.colorUr;\r\n    }\r\n\r\n    set colorUr(v) {\r\n        this.__core.colorUr = v;\r\n    }\r\n\r\n    get colorBl() {\r\n        return this.__core.colorBl;\r\n    }\r\n\r\n    set colorBl(v) {\r\n        this.__core.colorBl = v;\r\n    }\r\n\r\n    get colorBr() {\r\n        return this.__core.colorBr;\r\n    }\r\n\r\n    set colorBr(v) {\r\n        this.__core.colorBr = v;\r\n    }\r\n\r\n    get color() {\r\n        return this.__core.colorUl;\r\n    }\r\n\r\n    set color(v) {\r\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\r\n            this.colorUl = v;\r\n            this.colorUr = v;\r\n            this.colorBl = v;\r\n            this.colorBr = v;\r\n        }\r\n    }\r\n\r\n    get colorTop() {\r\n        return this.colorUl;\r\n    }\r\n\r\n    set colorTop(v) {\r\n        if (this.colorUl !== v || this.colorUr !== v) {\r\n            this.colorUl = v;\r\n            this.colorUr = v;\r\n        }\r\n    }\r\n\r\n    get colorBottom() {\r\n        return this.colorBl;\r\n    }\r\n\r\n    set colorBottom(v) {\r\n        if (this.colorBl !== v || this.colorBr !== v) {\r\n            this.colorBl = v;\r\n            this.colorBr = v;\r\n        }\r\n    }\r\n\r\n    get colorLeft() {\r\n        return this.colorUl;\r\n    }\r\n\r\n    set colorLeft(v) {\r\n        if (this.colorUl !== v || this.colorBl !== v) {\r\n            this.colorUl = v;\r\n            this.colorBl = v;\r\n        }\r\n    }\r\n\r\n    get colorRight() {\r\n        return this.colorUr;\r\n    }\r\n\r\n    set colorRight(v) {\r\n        if (this.colorUr !== v || this.colorBr !== v) {\r\n            this.colorUr = v;\r\n            this.colorBr = v;\r\n        }\r\n    }\r\n\r\n    get zIndex() {return this.__core.zIndex}\r\n    set zIndex(v) {\r\n        this.__core.zIndex = v;\r\n    }\r\n\r\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\r\n    set forceZIndexContext(v) {\r\n        this.__core.forceZIndexContext = v;\r\n    }\r\n\r\n    get clipping() {return this.__core.clipping}\r\n    set clipping(v) {\r\n        this.__core.clipping = v;\r\n    }\r\n\r\n    get clipbox() {return this.__core.clipbox}\r\n    set clipbox(v) {\r\n        this.__core.clipbox = v;\r\n    }\r\n\r\n    get tags() {\r\n        return this.getTags();\r\n    }\r\n\r\n    set tags(v) {\r\n        if (!Array.isArray(v)) v = [v];\r\n        this.setTags(v);\r\n    }\r\n\r\n    set t(v) {\r\n        this.tags = v;\r\n    }\r\n\r\n    get _children() {\r\n        if (!this.__childList) {\r\n            this.__childList = new ElementChildList(this, false);\r\n        }\r\n        return this.__childList;\r\n    }\r\n\r\n    get childList() {\r\n        if (!this._allowChildrenAccess()) {\r\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\r\n        }\r\n        return this._children;\r\n    }\r\n\r\n    hasChildren() {\r\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\r\n    }\r\n\r\n    _allowChildrenAccess() {\r\n        return true;\r\n    }\r\n\r\n    get children() {\r\n        return this.childList.get();\r\n    }\r\n\r\n    set children(children) {\r\n        this.childList.patch(children);\r\n    }\r\n\r\n    add(o) {\r\n        return this.childList.a(o);\r\n    }\r\n\r\n    get p() {\r\n        return this.__parent;\r\n    }\r\n\r\n    get parent() {\r\n        return this.__parent;\r\n    }\r\n\r\n    get src() {\r\n        if (this.texture && this.texture instanceof ImageTexture) {\r\n            return this.texture._src;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    set src(v) {\r\n        const texture = new ImageTexture(this.stage);\r\n        texture.src = v;\r\n        this.texture = texture;\r\n    }\r\n\r\n    set mw(v) {\r\n        if (this.texture) {\r\n            this.texture.mw = v;\r\n            this._updateDimensions();\r\n        } else {\r\n            this._throwError('Please set mw after setting a texture.');\r\n        }\r\n    }\r\n\r\n    set mh(v) {\r\n        if (this.texture) {\r\n            this.texture.mh = v;\r\n            this._updateDimensions();\r\n        } else {\r\n            this._throwError('Please set mh after setting a texture.');\r\n        }\r\n    }\r\n\r\n    get rect() {\r\n        return (this.texture === this.stage.rectangleTexture);\r\n    }\r\n\r\n    set rect(v) {\r\n        if (v) {\r\n            this.texture = this.stage.rectangleTexture;\r\n        } else {\r\n            this.texture = null;\r\n        }\r\n    }\r\n\r\n    enableTextTexture() {\r\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\r\n            this.texture = new TextTexture(this.stage);\r\n\r\n            if (!this.texture.w && !this.texture.h) {\r\n                // Inherit dimensions from element.\r\n                // This allows userland to set dimensions of the Element and then later specify the text.\r\n                this.texture.w = this.w;\r\n                this.texture.h = this.h;\r\n            }\r\n        }\r\n        return this.texture;\r\n    }\r\n\r\n    get text() {\r\n        if (this.texture && (this.texture instanceof TextTexture)) {\r\n            return this.texture;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set text(v) {\r\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\r\n            this.enableTextTexture();\r\n        }\r\n        if (Utils.isString(v)) {\r\n            this.texture.text = v;\r\n        } else {\r\n            this.texture.patch(v);\r\n        }\r\n    }\r\n\r\n    set onUpdate(f) {\r\n        this.__core.onUpdate = f;\r\n    }\r\n\r\n    set onAfterCalcs(f) {\r\n        this.__core.onAfterCalcs = f;\r\n    }\r\n\r\n    set onAfterUpdate(f) {\r\n        this.__core.onAfterUpdate = f;\r\n    }\r\n\r\n    forceUpdate() {\r\n        // Make sure that the update loop is run.\r\n        this.__core._setHasUpdates();\r\n    }\r\n\r\n    get shader() {\r\n        return this.__core.shader;\r\n    }\r\n\r\n    set shader(v) {\r\n        if (Utils.isObjectLiteral(v) && !v.type) {\r\n            // Setting properties on an existing shader.\r\n            if (this.shader) {\r\n                this.shader.patch(v);\r\n            }\r\n        } else {\r\n            const shader = Shader.create(this.stage, v);\r\n\r\n            if (this.__enabled && this.__core.shader) {\r\n                this.__core.shader.removeElement(this.__core);\r\n            }\r\n\r\n            this.__core.shader = shader;\r\n\r\n            if (this.__enabled && this.__core.shader) {\r\n                this.__core.shader.addElement(this.__core);\r\n            }\r\n        }\r\n    }\r\n\r\n    _hasTexturizer() {\r\n        return !!this.__core._texturizer;\r\n    }\r\n\r\n    get renderToTexture() {\r\n        return this.rtt\r\n    }\r\n\r\n    set renderToTexture(v) {\r\n        this.rtt = v\r\n    }\r\n\r\n    get rtt() {\r\n        return this._hasTexturizer() && this.texturizer.enabled;\r\n    }\r\n\r\n    set rtt(v) {\r\n        this.texturizer.enabled = v;\r\n    }\r\n\r\n    get rttLazy() {\r\n        return this._hasTexturizer() && this.texturizer.lazy;\r\n    }\r\n\r\n    set rttLazy(v) {\r\n        this.texturizer.lazy = v;\r\n    }\r\n\r\n    get renderOffscreen() {\r\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\r\n    }\r\n\r\n    set renderOffscreen(v) {\r\n        this.texturizer.renderOffscreen = v;\r\n    }\r\n\r\n    get colorizeResultTexture() {\r\n        return this._hasTexturizer() && this.texturizer.colorize;\r\n    }\r\n\r\n    set colorizeResultTexture(v) {\r\n        this.texturizer.colorize = v;\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texturizer._getTextureSource();\r\n    }\r\n\r\n    get texturizer() {\r\n        return this.__core.texturizer;\r\n    }\r\n\r\n    patch(settings) {\r\n        let paths = Object.keys(settings);\r\n\r\n        for (let i = 0, n = paths.length; i < n; i++) {\r\n            let path = paths[i];\r\n            const v = settings[path];\r\n\r\n            const firstCharCode = path.charCodeAt(0);\r\n            if (Utils.isUcChar(firstCharCode)) {\r\n                // Ref.\r\n                const child = this.getByRef(path);\r\n                if (!child) {\r\n                    if (v !== undefined) {\r\n                        // Add to list immediately.\r\n                        let c;\r\n                        if (Utils.isObjectLiteral(v)) {\r\n                            // Catch this case to capture createMode flag.\r\n                            c = this.childList.createItem(v);\r\n                            c.patch(v);\r\n                        } else if (Utils.isObject(v)) {\r\n                            c = v;\r\n                        }\r\n                        if (c.isElement) {\r\n                            c.ref = path;\r\n                        }\r\n\r\n                        this.childList.a(c);\r\n                    }\r\n                } else {\r\n                    if (v === undefined) {\r\n                        if (child.parent) {\r\n                            child.parent.childList.remove(child);\r\n                        }\r\n                    } else if (Utils.isObjectLiteral(v)) {\r\n                        child.patch(v);\r\n                    } else if (v.isElement) {\r\n                        // Replace element by new element.\r\n                        v.ref = path;\r\n                        this.childList.replace(v, child);\r\n                    } else {\r\n                        this._throwError(\"Unexpected value for path: \" + path);\r\n                    }\r\n                }\r\n            } else {\r\n                // Property.\r\n                Base.patchObjectProperty(this, path, v);\r\n            }\r\n        }\r\n    }\r\n\r\n    _throwError(message) {\r\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\r\n    }\r\n\r\n    animation(settings) {\r\n        return this.stage.animations.createAnimation(this, settings);\r\n    }\r\n\r\n    transition(property, settings = null) {\r\n        if (settings === null) {\r\n            return this._getTransition(property);\r\n        } else {\r\n            this._setTransition(property, settings);\r\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set transitions(object) {\r\n        let keys = Object.keys(object);\r\n        keys.forEach(property => {\r\n            this.transition(property, object[property]);\r\n        });\r\n    }\r\n\r\n    set smooth(object) {\r\n        let keys = Object.keys(object);\r\n        keys.forEach(property => {\r\n            let value = object[property];\r\n            if (Array.isArray(value)) {\r\n                this.setSmooth(property, value[0], value[1]);\r\n            } else {\r\n                this.setSmooth(property, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    fastForward(property) {\r\n        if (this._transitions) {\r\n            let t = this._transitions[property];\r\n            if (t && t.isTransition) {\r\n                t.finish();\r\n            }\r\n        }\r\n    }\r\n\r\n    _getTransition(property) {\r\n        if (!this._transitions) {\r\n            this._transitions = {};\r\n        }\r\n        let t = this._transitions[property];\r\n        if (!t) {\r\n            // Create default transition.\r\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\r\n        } else if (t.isTransitionSettings) {\r\n            // Upgrade to 'real' transition.\r\n            t = new Transition(\r\n                this.stage.transitions,\r\n                t,\r\n                this,\r\n                property\r\n            );\r\n        }\r\n        this._transitions[property] = t;\r\n        return t;\r\n    }\r\n\r\n    _setTransition(property, settings) {\r\n        if (!settings) {\r\n            this._removeTransition(property);\r\n        } else {\r\n            if (Utils.isObjectLiteral(settings)) {\r\n                // Convert plain object to proper settings object.\r\n                settings = this.stage.transitions.createSettings(settings);\r\n            }\r\n\r\n            if (!this._transitions) {\r\n                this._transitions = {};\r\n            }\r\n\r\n            let current = this._transitions[property];\r\n            if (current && current.isTransition) {\r\n                // Runtime settings change.\r\n                current.settings = settings;\r\n                return current;\r\n            } else {\r\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\r\n                this._transitions[property] = settings;\r\n            }\r\n        }\r\n    }\r\n\r\n    _removeTransition(property) {\r\n        if (this._transitions) {\r\n            delete this._transitions[property];\r\n        }\r\n    }\r\n\r\n    getSmooth(property, v) {\r\n        let t = this._getTransition(property);\r\n        if (t && t.isAttached()) {\r\n            return t.targetValue;\r\n        } else {\r\n            return v;\r\n        }\r\n    }\r\n\r\n    setSmooth(property, v, settings) {\r\n        if (settings) {\r\n            this._setTransition(property, settings);\r\n        }\r\n        let t = this._getTransition(property);\r\n        t.start(v);\r\n        return t;\r\n    }\r\n\r\n    get flex() {\r\n        return this.__core.flex;\r\n    }\r\n\r\n    set flex(v) {\r\n        this.__core.flex = v;\r\n    }\r\n\r\n    get flexItem() {\r\n        return this.__core.flexItem;\r\n    }\r\n\r\n    set flexItem(v) {\r\n        this.__core.flexItem = v;\r\n    }\r\n\r\n    get ignoreRTL() {\r\n        return this.__core.ignoreRTL;\r\n    }\r\n\r\n    set ignoreRTL(v) {\r\n        this.__core.ignoreRTL = v;\r\n    }\r\n\r\n    static isColorProperty(property) {\r\n        return property.toLowerCase().indexOf(\"color\") >= 0;\r\n    }\r\n\r\n    static getMerger(property) {\r\n        if (Element.isColorProperty(property)) {\r\n            return StageUtils.mergeColors;\r\n        } else {\r\n            return StageUtils.mergeNumbers;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        const ref = [`${this.constructor.name}`];\r\n        const tree = {};\r\n        tree[ref] = {};\r\n\r\n        if (this.hasChildren()) {\r\n            Element.collectChildren(tree[ref], this.__childList);\r\n        } else {\r\n            tree[ref] = {...Element.getProperties(this)};\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    static collectChildren(tree, children) {\r\n        const childList = children;\r\n        for (let i = 0, j = childList.length; i < j; i++) {\r\n            const element = childList.getAt(i);\r\n            const ref = `${element.__ref || `Element-${element.id}`}`;\r\n            const properties = this.getProperties(element);\r\n\r\n            tree[ref] = {...properties};\r\n\r\n            if (element.hasChildren()) {\r\n                tree[ref].children = {};\r\n                this.collectChildren(\r\n                    tree[ref].children, element.__childList\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    static getProperties(element) {\r\n        const props = {};\r\n        const list = [\r\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\r\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOffscreen\", \"renderToTexture\", \"scale\",\r\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\r\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\r\n        ];\r\n        let n = list.length;\r\n\r\n        while (n--) {\r\n            let key = list[n];\r\n            const getBoolean = /^!{2}/;\r\n            const isFunction = /\\(\\)$/;\r\n\r\n            if (getBoolean.test(key)) {\r\n                key = key.substring(2, key.length);\r\n                props[key] = !!element[key];\r\n            } else if (isFunction.test(key)) {\r\n                key = key.substring(0, key.length - 2);\r\n                if (typeof element[key] === \"function\") {\r\n                    props[key] = element[key]();\r\n                }\r\n            } else {\r\n                props[key] = element[key];\r\n            }\r\n        }\r\n        return {...props, ...element.getNonDefaults()};\r\n    }\r\n}\r\n\r\n// This gives a slight performance benefit compared to extending EventEmitter.\r\nEventEmitter.addAsMixin(Element);\r\n\r\nElement.prototype.isElement = 1;\r\n\r\nElement.id = 1;\r\n\r\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\r\nElement.PROP_GETTERS = new Map();\r\n\r\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\r\nElement.PROP_SETTERS = new Map();\r\n\r\nimport Texture from \"./Texture.mjs\";\r\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\r\nimport TextTexture from \"../textures/TextTexture.mjs\";\r\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\r\nimport Transition from \"../animation/Transition.mjs\";\r\nimport ElementChildList from \"./ElementChildList.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class StateMachine {\r\n\r\n    constructor() {\r\n        StateMachine.setupStateMachine(this);\r\n    }\r\n\r\n    static setupStateMachine(target) {\r\n        const targetConstructor = target.constructor;\r\n        const router = StateMachine.create(targetConstructor);\r\n        Object.setPrototypeOf(target, router.prototype);\r\n        target.constructor = targetConstructor;\r\n        target._initStateMachine();\r\n    }\r\n\r\n    /**\r\n     * Creates a state machine implementation.\r\n     * It extends the original type and should be used when creating new instances.\r\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\r\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\r\n     * @param {Class} type\r\n     * @returns {StateMachine}\r\n     */\r\n    static create(type) {\r\n        if (!type.hasOwnProperty('_sm')) {\r\n            // Only need to run once.\r\n            const stateMachineType = new StateMachineType(type);\r\n            type._sm = stateMachineType;\r\n        }\r\n\r\n        return type._sm.router;\r\n    }\r\n\r\n    /**\r\n     * Calls the specified method if it exists.\r\n     * @param {string} event\r\n     * @param {*...} args\r\n     */\r\n    fire(event, ...args) {\r\n        if (this._hasMethod(event)) {\r\n            return this[event](...args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current state path (for example \"Initialized.Loading\").\r\n     * @returns {string}\r\n     * @protected\r\n     */\r\n    _getState() {\r\n        return this._state.__path;\r\n    }\r\n\r\n    /**\r\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\r\n     * @param {string} statePath\r\n     * @param {string} currentStatePath\r\n     * @returns {Boolean}\r\n     * @protected\r\n     */\r\n    _inState(statePath, currentStatePath = this._state.__path) {\r\n        const state = this._sm.getStateByPath(statePath);\r\n        const currentState = this._sm.getStateByPath(currentStatePath);\r\n        const level = state.__level;\r\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\r\n        return (stateAtLevel === state);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified class member is defined for the currently set state.\r\n     * @param {string} name\r\n     * @returns {boolean}\r\n     * @protected\r\n     */\r\n    _hasMember(name) {\r\n        return !!this.constructor.prototype[name];\r\n    }\r\n\r\n    /**\r\n     * Returns true if the specified class member is a method for the currently set state.\r\n     * @param {string} name\r\n     * @returns {boolean}\r\n     * @protected\r\n     */\r\n    _hasMethod(name) {\r\n        const member = this.constructor.prototype[name];\r\n        return !!member && (typeof member === \"function\")\r\n    }\r\n\r\n    /**\r\n     * Switches to the specified state.\r\n     * @param {string} statePath\r\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\r\n     * @param {*[]} [args]\r\n     *   Args that are supplied in $enter and $exit events.\r\n     * @protected\r\n     */\r\n    _setState(statePath, args) {\r\n        const setStateId = ++this._setStateCounter;\r\n        this._setStateId = setStateId;\r\n\r\n        if (this._state.__path !== statePath) {\r\n            // Performance optimization.\r\n            let newState = this._sm._stateMap[statePath];\r\n            if (!newState) {\r\n                // Check for super state.\r\n                newState = this._sm.getStateByPath(statePath);\r\n            }\r\n\r\n            const prevState = this._state;\r\n\r\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\r\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\r\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\r\n                const sharedState = StateMachine._getSharedState(this._state, newState);\r\n                const context = {\r\n                    newState: newState.__path,\r\n                    prevState: prevState.__path,\r\n                    sharedState: sharedState.__path\r\n                };\r\n                const sharedLevel = sharedState.__level;\r\n\r\n                if (hasDifferentExitMethod) {\r\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\r\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\r\n                        this.__setState(exitStates[i]);\r\n                        this._callExit(this._state, args, context);\r\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\r\n                        if (stateChangeOverridden) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (hasDifferentEnterMethod) {\r\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\r\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\r\n                        this.__setState(enterStates[i]);\r\n                        this._callEnter(this._state, args, context);\r\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\r\n                        if (stateChangeOverridden) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            this.__setState(newState);\r\n\r\n            if (this._changedState) {\r\n                const context = {\r\n                    newState: newState.__path,\r\n                    prevState: prevState.__path\r\n                };\r\n\r\n                if (args) {\r\n                    this._changedState(context, ...args);\r\n                } else {\r\n                    this._changedState(context);\r\n                }\r\n            }\r\n\r\n            if (this._onStateChange) {\r\n                const context = {\r\n                    newState: newState.__path,\r\n                    prevState: prevState.__path\r\n                };\r\n                this._onStateChange(context);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    _callEnter(state, args = [], context) {\r\n        const hasParent = !!state.__parent;\r\n        if (state.prototype.$enter) {\r\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\r\n                state.prototype.$enter.apply(this, [context, ...args]);\r\n            }\r\n        }\r\n    }\r\n\r\n    _callExit(state, args = [], context) {\r\n        const hasParent = !!state.__parent;\r\n        if (state.prototype.$exit) {\r\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\r\n                state.prototype.$exit.apply(this, [context, ...args]);\r\n            }\r\n        }\r\n    }\r\n\r\n    __setState(state) {\r\n        this._state = state;\r\n        this._stateIndex = state.__index;\r\n        this.constructor = state;\r\n    }\r\n\r\n    _initStateMachine() {\r\n        this._state = null;\r\n        this._stateIndex = 0;\r\n        this._setStateCounter = 0;\r\n        this._sm = this._routedType._sm;\r\n        this.__setState(this._sm.getStateByPath(\"\"));\r\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\r\n        this._callEnter(this._state, [], context);\r\n        this._onStateChange = undefined;\r\n    }\r\n\r\n    /**\r\n     * Between multiple member names, select the one specified in the deepest state.\r\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\r\n     * @param {string[]} memberNames\r\n     * @returns {string|undefined}\r\n     * @protected\r\n     */\r\n    _getMostSpecificHandledMember(memberNames) {\r\n        let cur = this._state;\r\n        do {\r\n            for (let i = 0, n = memberNames.length; i < n; i++) {\r\n                const memberName = memberNames[i];\r\n                if (!cur.__parent) {\r\n                    if (cur.prototype[memberName]) {\r\n                        return memberName;\r\n                    }\r\n                } else {\r\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\r\n                    if (this[alias]) {\r\n                        return memberName;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.__parent;\r\n        } while (cur);\r\n    }\r\n\r\n    static _getStatesUntilLevel(state, level) {\r\n        const states = [];\r\n        while (state.__level > level) {\r\n            states.push(state);\r\n            state = state.__parent;\r\n        }\r\n        return states;\r\n    }\r\n\r\n    static _getSharedState(state1, state2) {\r\n        const state1Array = StateMachine._getAncestorStates(state1);\r\n        const state2Array = StateMachine._getAncestorStates(state2);\r\n        const n = Math.min(state1Array.length, state2Array.length);\r\n        for (let i = 0; i < n; i++) {\r\n            if (state1Array[i] !== state2Array[i]) {\r\n                return state1Array[i - 1];\r\n            }\r\n        }\r\n        return state1Array[n - 1];\r\n    }\r\n\r\n    static _getAncestorStates(state) {\r\n        const result = [];\r\n        do {\r\n            result.push(state);\r\n        } while(state = state.__parent);\r\n        return result.reverse();\r\n    }\r\n\r\n    static _getStateAtLevel(state, level) {\r\n        if (level > state.__level) {\r\n            return undefined;\r\n        }\r\n\r\n        while(level < state.__level) {\r\n            state = state.__parent;\r\n        }\r\n        return state;\r\n    }\r\n}\r\n\r\nclass StateMachineType {\r\n\r\n    constructor(type) {\r\n        this._type = type;\r\n        this._router = null;\r\n\r\n        this.init();\r\n    }\r\n\r\n    get router() {\r\n        return this._router;\r\n    }\r\n\r\n    init() {\r\n        this._router = this._createRouter();\r\n\r\n        this._stateMap = this._getStateMap();\r\n\r\n        this._addStateMemberDelegatorsToRouter();\r\n\r\n    }\r\n\r\n    _createRouter() {\r\n        const type = this._type;\r\n\r\n        const router = class StateMachineRouter extends type {\r\n            constructor() {\r\n                super(...arguments);\r\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\r\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\r\n                }\r\n            }\r\n        };\r\n        router._isRouter = true;\r\n        router.prototype._routedType = type;\r\n        router.original = type;\r\n\r\n        this._mixinStateMachineMethods(router);\r\n\r\n        return router;\r\n    }\r\n\r\n    _mixinStateMachineMethods(router) {\r\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\r\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\r\n        for (let i = 0, n = names.length; i < n; i++) {\r\n            const name = names[i];\r\n            if (name !== \"constructor\") {\r\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\r\n                Object.defineProperty(router.prototype, name, descriptor);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addStateMemberDelegatorsToRouter() {\r\n        const members = this._getAllMemberNames();\r\n\r\n        members.forEach(member => {\r\n            this._addMemberRouter(member);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @note We are generating code because it yields much better performance.\r\n     */\r\n    _addMemberRouter(member) {\r\n        const statePaths = Object.keys(this._stateMap);\r\n        const descriptors = [];\r\n        const aliases = [];\r\n        statePaths.forEach((statePath, index) => {\r\n            const state = this._stateMap[statePath];\r\n            const descriptor = this._getDescriptor(state, member);\r\n            if (descriptor) {\r\n                descriptors[index] = descriptor;\r\n\r\n                // Add to prototype.\r\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\r\n                aliases[index] = alias;\r\n\r\n                if (!this._router.prototype.hasOwnProperty(alias)) {\r\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\r\n                }\r\n            } else {\r\n                descriptors[index] = null;\r\n                aliases[index] = null;\r\n            }\r\n        });\r\n\r\n        let type = undefined;\r\n        descriptors.forEach(descriptor => {\r\n            if (descriptor) {\r\n                const descType = this._getDescriptorType(descriptor);\r\n                if (type && (type !== descType)) {\r\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\r\n                    return;\r\n                }\r\n                type = descType;\r\n            }\r\n        });\r\n\r\n        switch(type) {\r\n            case \"method\":\r\n                this._addMethodRouter(member, descriptors, aliases);\r\n                break;\r\n            case \"getter\":\r\n                this._addGetterSetterRouters(member);\r\n                break;\r\n            case \"property\":\r\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\r\n                break;\r\n        }\r\n    }\r\n\r\n    _getDescriptor(state, member, isValid = () => true) {\r\n        let type = state;\r\n        let curState = state;\r\n\r\n        do {\r\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\r\n            if (descriptor) {\r\n                if (isValid(descriptor)) {\r\n                    descriptor._source = curState;\r\n                    return descriptor;\r\n                }\r\n            }\r\n            type = Object.getPrototypeOf(type);\r\n            if (type && type.hasOwnProperty('__state')) {\r\n                curState = type;\r\n            }\r\n        } while(type && type.prototype);\r\n        return undefined;\r\n    }\r\n\r\n    _getDescriptorType(descriptor) {\r\n        if (descriptor.get || descriptor.set) {\r\n            return 'getter';\r\n        } else {\r\n            if (typeof descriptor.value === \"function\") {\r\n                return 'method';\r\n            } else {\r\n                return 'property';\r\n            }\r\n        }\r\n    }\r\n\r\n    static _supportsSpread() {\r\n        if (this.__supportsSpread === undefined) {\r\n            this.__supportsSpread = false;\r\n            try {\r\n                const func = new Function(\"return [].concat(...arguments);\");\r\n                func();\r\n                this.__supportsSpread = true;\r\n            } catch(e) {}\r\n        }\r\n        return this.__supportsSpread;\r\n    }\r\n\r\n    _addMethodRouter(member, descriptors, aliases) {\r\n        const code = [\r\n            // The line ensures that, while debugging, your IDE won't open many tabs.\r\n            \"//@ sourceURL=StateMachineRouter.js\",\r\n            \"var i = this._stateIndex;\"\r\n        ];\r\n        let cur = aliases[0];\r\n        const supportsSpread = StateMachineType._supportsSpread();\r\n        for (let i = 1, n = aliases.length; i < n; i++) {\r\n            const alias = aliases[i];\r\n            if (alias !== cur) {\r\n                if (cur) {\r\n                    if (supportsSpread) {\r\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\r\n                    } else {\r\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\r\n                    }\r\n                } else {\r\n                    code.push(`if (i < ${i}) return ; else`);\r\n                }\r\n            }\r\n            cur = alias;\r\n        }\r\n        if (cur) {\r\n            if (supportsSpread) {\r\n                code.push(`return this[\"${cur}\"](...arguments);`);\r\n            } else {\r\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\r\n            }\r\n        } else {\r\n            code.push(`;`);\r\n        }\r\n        const functionBody = code.join(\"\\n\");\r\n        const router = new Function([], functionBody);\r\n\r\n        const descriptor = {value: router};\r\n        Object.defineProperty(this._router.prototype, member, descriptor);\r\n    }\r\n\r\n    _addGetterSetterRouters(member) {\r\n        const getter = this._getGetterRouter(member);\r\n        const setter = this._getSetterRouter(member);\r\n        const descriptor = {\r\n            get: getter,\r\n            set: setter\r\n        };\r\n        Object.defineProperty(this._router.prototype, member, descriptor);\r\n    }\r\n\r\n    _getGetterRouter(member) {\r\n        const statePaths = Object.keys(this._stateMap);\r\n        const descriptors = [];\r\n        const aliases = [];\r\n        statePaths.forEach((statePath, index) => {\r\n            const state = this._stateMap[statePath];\r\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\r\n            if (descriptor) {\r\n                descriptors[index] = descriptor;\r\n\r\n                // Add to prototype.\r\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\r\n                aliases[index] = alias;\r\n\r\n                if (!this._router.prototype.hasOwnProperty(alias)) {\r\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\r\n                }\r\n            } else {\r\n                descriptors[index] = null;\r\n                aliases[index] = null;\r\n            }\r\n        });\r\n\r\n        const code = [\r\n            // The line ensures that, while debugging, your IDE won't open many tabs.\r\n            \"//@ sourceURL=StateMachineRouter.js\",\r\n            \"var i = this._stateIndex;\"\r\n        ];\r\n        let cur = aliases[0];\r\n        for (let i = 1, n = aliases.length; i < n; i++) {\r\n            const alias = aliases[i];\r\n            if (alias !== cur) {\r\n                if (cur) {\r\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\r\n                } else {\r\n                    code.push(`if (i < ${i}) return ; else`);\r\n                }\r\n            }\r\n            cur = alias;\r\n        }\r\n        if (cur) {\r\n            code.push(`return this[\"${cur}\"];`);\r\n        } else {\r\n            code.push(`;`);\r\n        }\r\n        const functionBody = code.join(\"\\n\");\r\n        const router = new Function([], functionBody);\r\n        return router;\r\n    }\r\n\r\n    _getSetterRouter(member) {\r\n        const statePaths = Object.keys(this._stateMap);\r\n        const descriptors = [];\r\n        const aliases = [];\r\n        statePaths.forEach((statePath, index) => {\r\n            const state = this._stateMap[statePath];\r\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\r\n            if (descriptor) {\r\n                descriptors[index] = descriptor;\r\n\r\n                // Add to prototype.\r\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\r\n                aliases[index] = alias;\r\n\r\n                if (!this._router.prototype.hasOwnProperty(alias)) {\r\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\r\n                }\r\n            } else {\r\n                descriptors[index] = null;\r\n                aliases[index] = null;\r\n            }\r\n        });\r\n\r\n        const code = [\r\n            // The line ensures that, while debugging, your IDE won't open many tabs.\r\n            \"//@ sourceURL=StateMachineRouter.js\",\r\n            \"var i = this._stateIndex;\"\r\n        ];\r\n        let cur = aliases[0];\r\n        for (let i = 1, n = aliases.length; i < n; i++) {\r\n            const alias = aliases[i];\r\n            if (alias !== cur) {\r\n                if (cur) {\r\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\r\n                } else {\r\n                    code.push(`if (i < ${i}) ; else`);\r\n                }\r\n            }\r\n            cur = alias;\r\n        }\r\n        if (cur) {\r\n            code.push(`this[\"${cur}\"] = arg;`);\r\n        } else {\r\n            code.push(`;`);\r\n        }\r\n        const functionBody = code.join(\"\\n\");\r\n        const router = new Function([\"arg\"], functionBody);\r\n        return router;\r\n    }\r\n\r\n    static getStateMemberAlias(path, member) {\r\n        return \"$\" + (path ? path + \".\" : \"\") + member;\r\n    }\r\n\r\n    _getAllMemberNames() {\r\n        const stateMap = this._stateMap;\r\n        const map = Object.keys(stateMap);\r\n        let members = new Set();\r\n        map.forEach(statePath => {\r\n            if (statePath === \"\") {\r\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\r\n                return;\r\n            }\r\n            const state = stateMap[statePath];\r\n            const names = this._getStateMemberNames(state);\r\n            names.forEach(name => {\r\n                members.add(name);\r\n            })\r\n        });\r\n        return [...members];\r\n    }\r\n\r\n    _getStateMemberNames(state) {\r\n        let type = state;\r\n        let members = new Set();\r\n        const isRoot = this._type === state;\r\n        do {\r\n            const names = this._getStateMemberNamesForType(type);\r\n            names.forEach(name => {\r\n                members.add(name)\r\n            });\r\n\r\n            type = Object.getPrototypeOf(type);\r\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\r\n\r\n        return members;\r\n    }\r\n\r\n    _getStateMemberNamesForType(type) {\r\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\r\n        return memberNames.filter(memberName => {\r\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\r\n        });\r\n    }\r\n\r\n    static _isStateLocalMember(memberName) {\r\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\r\n    }\r\n\r\n    getStateByPath(statePath) {\r\n        if (this._stateMap[statePath]) {\r\n            return this._stateMap[statePath];\r\n        }\r\n\r\n        // Search for closest match.\r\n        const parts = statePath.split(\".\");\r\n        while(parts.pop()) {\r\n            const statePath = parts.join(\".\");\r\n            if (this._stateMap[statePath]) {\r\n                return this._stateMap[statePath];\r\n            }\r\n        }\r\n    }\r\n\r\n    _getStateMap() {\r\n        if (!this._stateMap) {\r\n            this._stateMap = this._createStateMap();\r\n        }\r\n        return this._stateMap;\r\n    }\r\n\r\n    _createStateMap() {\r\n        const stateMap = {};\r\n        this._addState(this._type, null, \"\", stateMap);\r\n        return stateMap;\r\n    }\r\n\r\n    _addState(state, parentState, name, stateMap) {\r\n        state.__state = true;\r\n        state.__name = name;\r\n\r\n        this._addStaticStateProperty(state, parentState);\r\n\r\n        const parentPath = (parentState ? parentState.__path : \"\");\r\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\r\n        state.__path = path;\r\n        state.__level = parentState ? parentState.__level + 1 : 0;\r\n        state.__parent = parentState;\r\n        state.__index = Object.keys(stateMap).length;\r\n        stateMap[path] = state;\r\n\r\n        const states = state._states;\r\n        if (states) {\r\n            const isInheritedFromParent = (parentState && parentState._states === states);\r\n            if (!isInheritedFromParent) {\r\n                const subStates = state._states();\r\n                subStates.forEach(subState => {\r\n                    const stateName = StateMachineType._getStateName(subState);\r\n                    this._addState(subState, state, stateName, stateMap);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    static _getStateName(state) {\r\n        const name = state.name;\r\n\r\n        const index = name.indexOf('$');\r\n        if (index > 0) {\r\n            // Strip off rollup name suffix.\r\n            return name.substr(0, index);\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    _addStaticStateProperty(state, parentState) {\r\n        if (parentState) {\r\n            const isClassStateLevel = parentState && !parentState.__parent;\r\n            if (isClassStateLevel) {\r\n                this._router[state.__name] = state;\r\n            } else {\r\n                parentState[state.__name] = state;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Element from \"../tree/Element.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport StateMachine from \"./StateMachine.mjs\";\r\n\r\n/**\r\n * @extends StateMachine\r\n */\r\nexport default class Component extends Element {\r\n\r\n    constructor(stage, properties) {\r\n        super(stage);\r\n\r\n        // Encapsulate tags to prevent leaking.\r\n        this.tagRoot = true;\r\n\r\n        if (Utils.isObjectLiteral(properties)) {\r\n            Object.assign(this, properties);\r\n        }\r\n\r\n        this.__initialized = false;\r\n        this.__firstActive = false;\r\n        this.__firstEnable = false;\r\n\r\n        this.__signals = undefined;\r\n\r\n        this.__passSignals = undefined;\r\n\r\n        this.__construct();\r\n\r\n        // Quick-apply template.\r\n        const func = this.constructor.getTemplateFunc(this);\r\n        func.f(this, func.a);\r\n\r\n        this._build();\r\n    }\r\n\r\n    __start() {\r\n        StateMachine.setupStateMachine(this);\r\n        this._onStateChange = Component.prototype.__onStateChange;\r\n    }\r\n\r\n    get state() {\r\n        return this._getState();\r\n    }\r\n\r\n    __onStateChange() {\r\n        /* FIXME: Workaround for case, where application was shut but component still lives */\r\n        if (this.application) {\r\n            this.application.updateFocusPath();\r\n        }\r\n    }\r\n\r\n    _refocus() {\r\n        /* FIXME: Workaround for case, where application was shut but component still lives */\r\n        if (this.application) {\r\n            this.application.updateFocusPath();\r\n        }\r\n    }\r\n\r\n    static bindProp(name, func = null) {\r\n        return {__propertyBinding: true, __name: name, __func: func};\r\n    }\r\n\r\n    __bindProperty(propObj, targetObj, targetProp) {\r\n        // 1. find binding position: find object and property name to be bound\r\n        const obj = targetObj;\r\n        const prop = targetProp;\r\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\r\n\r\n        // 2. create setters for every given dependency\r\n        for (let i = 0; i < propDependencies.length; i++) {\r\n            const propName = propDependencies[i];\r\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\r\n\r\n            if (!this.hasOwnProperty(propName)) {\r\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\r\n                Object.defineProperty(this, propName, {\r\n                    set: (value) => {\r\n                        this[`__prop_${propName}`] = value;\r\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\r\n                            __obj[__prop] = __func(this);\r\n                        }\r\n                    },\r\n                    get: () => this[`__prop_${propName}`]\r\n                });\r\n            } else {\r\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a high-performance template patcher.\r\n     */\r\n    static getTemplateFunc(ctx) {\r\n        // We need a different template function per patch id.\r\n        const name = \"_templateFunc\";\r\n\r\n        // Be careful with class-based static inheritance.\r\n        const hasName = '__has' + name;\r\n        if (this[hasName] !== this) {\r\n            this[hasName] = this;\r\n            this[name] = this.parseTemplate(this._template(ctx));\r\n        }\r\n        return this[name];\r\n    }\r\n\r\n    static parseTemplate(obj) {\r\n        const context = {\r\n            loc: [],\r\n            store: [],\r\n            rid: 0\r\n        };\r\n\r\n        this.parseTemplateRec(obj, context, \"element\");\r\n\r\n        const code = context.loc.join(\";\\n\");\r\n        const f = new Function(\"element\", \"store\", code);\r\n        return {f: f, a: context.store};\r\n    }\r\n\r\n    static parseTemplateRec(obj, context, cursor) {\r\n        const store = context.store;\r\n        const loc = context.loc;\r\n        const keys = Object.keys(obj);\r\n        keys.forEach(key => {\r\n            let value = obj[key];\r\n            if (Utils.isUcChar(key.charCodeAt(0))) {\r\n                // Value must be expanded as well.\r\n                if (Utils.isObjectLiteral(value)) {\r\n                    // Ref.\r\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\r\n                    let type = value.type ? value.type : Element;\r\n                    if (type === Element) {\r\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\r\n                    } else {\r\n                        store.push(type);\r\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\r\n                    }\r\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\r\n                    context.rid++;\r\n\r\n                    // Enter sub.\r\n                    this.parseTemplateRec(value, context, childCursor);\r\n\r\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\r\n                } else if (Utils.isObject(value)) {\r\n                    // Dynamic assignment.\r\n                    store.push(value);\r\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\r\n                }\r\n            } else {\r\n                if (key === \"text\") {\r\n                    const propKey = cursor + \"__text\";\r\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\r\n                    if (value.__propertyBinding === true) {\r\n                        // Allow binding entire objects to text property\r\n                        store.push(value);\r\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\r\n                    } else {\r\n                        this.parseTemplatePropRec(value, context, propKey);\r\n                    }\r\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\r\n                    const shaderCursor = `${cursor}[\"shader\"]`\r\n                    store.push(value);\r\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\r\n                    this.parsePropertyBindings(value, context, shaderCursor);\r\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\r\n                    const propKey = cursor + \"__texture\";\r\n                    const type = value.type;\r\n                    if (type) {\r\n                        store.push(type);\r\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\r\n                        this.parseTemplatePropRec(value, context, propKey);\r\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\r\n                    } else {\r\n                        loc.push(`${propKey} = ${cursor}.texture`);\r\n                        this.parseTemplatePropRec(value, context, propKey);\r\n                    }\r\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\r\n                    store.push(value);\r\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\r\n                } else {\r\n                    // Property;\r\n                    if (Utils.isNumber(value)) {\r\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\r\n                    } else if (Utils.isBoolean(value)) {\r\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\r\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\r\n                        // Dynamic assignment.\r\n                        // Because literal objects may contain dynamics, we store the full object.\r\n                        store.push(value);\r\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\r\n                    } else {\r\n                        // String etc.\r\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static parseTemplatePropRec(obj, context, cursor) {\r\n        const store = context.store;\r\n        const loc = context.loc;\r\n        const keys = Object.keys(obj);\r\n        keys.forEach(key => {\r\n            if (key !== \"type\") {\r\n                const value = obj[key];\r\n                if (Utils.isNumber(value)) {\r\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\r\n                } else if (Utils.isBoolean(value)) {\r\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\r\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\r\n                    store.push(value);\r\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\r\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\r\n                    // Dynamic assignment.\r\n                    // Because literal objects may contain dynamics, we store the full object.\r\n                    store.push(value);\r\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\r\n                } else {\r\n                    // String etc.\r\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static parsePropertyBindings(obj, context, cursor) {\r\n        const store = context.store;\r\n        const loc = context.loc;\r\n        const keys = Object.keys(obj);\r\n        keys.forEach(key => {\r\n            if (key !== \"type\") {\r\n                const value = obj[key];\r\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\r\n                    store.push(value);\r\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    _onSetup() {\r\n        if (!this.__initialized) {\r\n            this._setup();\r\n        }\r\n    }\r\n\r\n    _setup() {\r\n    }\r\n\r\n    _onAttach() {\r\n        if (!this.__initialized) {\r\n            this.__init();\r\n            this.__initialized = true;\r\n        }\r\n\r\n        this._attach();\r\n    }\r\n\r\n    _attach() {\r\n    }\r\n\r\n    _onDetach() {\r\n        this._detach();\r\n    }\r\n\r\n    _detach() {\r\n    }\r\n\r\n    _onEnabled() {\r\n        if (!this.__firstEnable) {\r\n            this._firstEnable();\r\n            this.__firstEnable = true;\r\n        }\r\n\r\n        this._enable();\r\n    }\r\n\r\n    _firstEnable() {\r\n    }\r\n\r\n    _enable() {\r\n    }\r\n\r\n    _onDisabled() {\r\n        this._disable();\r\n    }\r\n\r\n    _disable() {\r\n    }\r\n\r\n    _onActive() {\r\n        if (!this.__firstActive) {\r\n            this._firstActive();\r\n            this.__firstActive = true;\r\n        }\r\n\r\n        this._active();\r\n    }\r\n\r\n    _firstActive() {\r\n    }\r\n\r\n    _active() {\r\n    }\r\n\r\n    _onInactive() {\r\n        this._inactive();\r\n    }\r\n\r\n    _inactive() {\r\n    }\r\n\r\n    get application() {\r\n        return this.stage.application;\r\n    }\r\n\r\n    __construct() {\r\n        this._construct();\r\n    }\r\n\r\n    _construct() {\r\n    }\r\n\r\n    _build() {\r\n    }\r\n\r\n    __init() {\r\n        this._init();\r\n    }\r\n\r\n    _init() {\r\n    }\r\n\r\n    _focus(newTarget, prevTarget) {\r\n    }\r\n\r\n    _unfocus(newTarget) {\r\n    }\r\n\r\n    _focusChange(target, newTarget) {\r\n    }\r\n\r\n    _getFocused() {\r\n        // Override to delegate focus to child components.\r\n        return this;\r\n    }\r\n\r\n    _setFocusSettings(settings) {\r\n        // Override to add custom settings. See Application._handleFocusSettings().\r\n    }\r\n\r\n    _handleFocusSettings(settings) {\r\n        // Override to react on custom settings. See Application._handleFocusSettings().\r\n    }\r\n\r\n    static _template() {\r\n        return {};\r\n    }\r\n\r\n    hasFinalFocus() {\r\n        let path = this.application._focusPath;\r\n        return path && path.length && path[path.length - 1] === this;\r\n    }\r\n\r\n    hasFocus() {\r\n        let path = this.application._focusPath;\r\n        return path && (path.indexOf(this) >= 0);\r\n    }\r\n\r\n    get cparent() {\r\n        return Component.getParent(this);\r\n    }\r\n\r\n    seekAncestorByType(type) {\r\n        let c = this.cparent;\r\n        while (c) {\r\n            if (c.constructor === type) {\r\n                return c;\r\n            }\r\n            c = c.cparent;\r\n        }\r\n    }\r\n\r\n    getSharedAncestorComponent(element) {\r\n        let ancestor = this.getSharedAncestor(element);\r\n        while (ancestor && !ancestor.isComponent) {\r\n            ancestor = ancestor.parent;\r\n        }\r\n        return ancestor;\r\n    }\r\n\r\n    get signals() {\r\n        return this.__signals;\r\n    }\r\n\r\n    set signals(v) {\r\n        if (!Utils.isObjectLiteral(v)) {\r\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\r\n        }\r\n        this.__signals = v;\r\n    }\r\n\r\n    set alterSignals(v) {\r\n        if (!Utils.isObjectLiteral(v)) {\r\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\r\n        }\r\n        if (!this.__signals) {\r\n            this.__signals = {};\r\n        }\r\n        for (let key in v) {\r\n            const d = v[key];\r\n            if (d === undefined) {\r\n                delete this.__signals[key];\r\n            } else {\r\n                this.__signals[key] = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    get passSignals() {\r\n        return this.__passSignals || {};\r\n    }\r\n\r\n    set passSignals(v) {\r\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\r\n    }\r\n\r\n    set alterPassSignals(v) {\r\n        if (!Utils.isObjectLiteral(v)) {\r\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\r\n        }\r\n        if (!this.__passSignals) {\r\n            this.__passSignals = {};\r\n        }\r\n        for (let key in v) {\r\n            const d = v[key];\r\n            if (d === undefined) {\r\n                delete this.__passSignals[key];\r\n            } else {\r\n                this.__passSignals[key] = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Signals the parent of the specified event.\r\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\r\n     * @param {string} event\r\n     * @param {...*} args\r\n     */\r\n    signal(event, ...args) {\r\n        return this._signal(event, args);\r\n    }\r\n\r\n    _signal(event, args) {\r\n        const signalParent = this._getParentSignalHandler();\r\n        if (signalParent) {\r\n            if (this.__signals) {\r\n                let fireEvent = this.__signals[event];\r\n                if (fireEvent === false) {\r\n                    // Ignore event.\r\n                    return;\r\n                }\r\n                if (fireEvent) {\r\n                    if (fireEvent === true) {\r\n                        fireEvent = event;\r\n                    }\r\n \r\n                    if (Utils.isFunction(fireEvent)) {\r\n                        return fireEvent(...args);\r\n                    }\r\n\r\n                    if (signalParent._hasMethod(fireEvent)) {\r\n                        return signalParent[fireEvent](...args);\r\n                    }\r\n                }\r\n            }\r\n\r\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\r\n            if (passSignal) {\r\n                // Bubble up.\r\n                if (passSignal && passSignal !== true) {\r\n                    // Replace signal name.\r\n                    event = passSignal;\r\n                }\r\n\r\n                return signalParent._signal(event, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    _getParentSignalHandler() {\r\n        return this.cparent ? this.cparent._getSignalHandler() : null;\r\n    }\r\n\r\n    _getSignalHandler() {\r\n        if (this._signalProxy) {\r\n            return this.cparent ? this.cparent._getSignalHandler() : null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return false;\r\n    }\r\n\r\n    fireAncestors(name, ...args) {\r\n        if (!name.startsWith('$')) {\r\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\r\n        }\r\n\r\n        const parent = this._getParentSignalHandler();\r\n        if (parent) {\r\n            return parent._doFireAncestors(name, args);\r\n        }\r\n    }\r\n\r\n    _doFireAncestors(name, args) {\r\n        if (this._hasMethod(name)) {\r\n            return this.fire(name, ...args);\r\n        } else {\r\n            const signalParent = this._getParentSignalHandler();\r\n            if (signalParent) {\r\n                return signalParent._doFireAncestors(name, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    static collectSubComponents(subs, element) {\r\n        if (element.hasChildren()) {\r\n            const childList = element.__childList;\r\n            for (let i = 0, n = childList.length; i < n; i++) {\r\n                const child = childList.getAt(i);\r\n                if (child.isComponent) {\r\n                    subs.push(child);\r\n                } else {\r\n                    Component.collectSubComponents(subs, child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getComponent(element) {\r\n        let parent = element;\r\n        while (parent && !parent.isComponent) {\r\n            parent = parent.parent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    static getParent(element) {\r\n        return Component.getComponent(element.parent);\r\n    }\r\n}\r\n\r\nComponent.prototype.isComponent = true;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class CoreQuadList {\r\n\r\n    constructor(ctx) {\r\n\r\n        this.ctx = ctx;\r\n\r\n        this.quadTextures = [];\r\n\r\n        this.quadElements = [];\r\n    }\r\n\r\n    get length() {\r\n        return this.quadTextures.length;\r\n    }\r\n\r\n    reset() {\r\n        this.quadTextures = [];\r\n        this.quadElements = [];\r\n        this.dataLength = 0;\r\n    }\r\n\r\n    getElement(index) {\r\n        return this.quadElements[index]._element;\r\n    }\r\n\r\n    getElementCore(index) {\r\n        return this.quadElements[index];\r\n    }\r\n\r\n    getTexture(index) {\r\n        return this.quadTextures[index];\r\n    }\r\n\r\n    getTextureWidth(index) {\r\n        let nativeTexture = this.quadTextures[index];\r\n        if (nativeTexture.w) {\r\n            // Render texture;\r\n            return nativeTexture.w;\r\n        } else {\r\n            return this.quadElements[index]._displayedTextureSource.w;\r\n        }\r\n    }\r\n\r\n    getTextureHeight(index) {\r\n        let nativeTexture = this.quadTextures[index];\r\n        if (nativeTexture.h) {\r\n            // Render texture;\r\n            return nativeTexture.h;\r\n        } else {\r\n            return this.quadElements[index]._displayedTextureSource.h;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\r\n\r\nexport default class WebGLCoreQuadList extends CoreQuadList {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\r\n        // We do not (want to) handle memory overflow.\r\n        const byteSize = ctx.stage.getOption('bufferMemory');\r\n\r\n        this.dataLength = 0;\r\n\r\n        this.data = new ArrayBuffer(byteSize);\r\n        this.floats = new Float32Array(this.data);\r\n        this.uints = new Uint32Array(this.data);\r\n    }\r\n\r\n    getAttribsDataByteOffset(index) {\r\n        // Where this quad can be found in the attribs buffer.\r\n        return index * 80;\r\n    }\r\n\r\n    getQuadContents() {\r\n        // Debug: log contents of quad buffer.\r\n        let floats = this.floats;\r\n        let uints = this.uints;\r\n        let lines = [];\r\n        for (let i = 1; i <= this.length; i++) {\r\n            let str = 'entry ' + i + ': ';\r\n            for (let j = 0; j < 4; j++) {\r\n                let b = i * 20 + j * 4;\r\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\r\n            }\r\n            lines.push(str);\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\nexport default class CoreQuadOperation {\r\n\r\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\r\n\r\n        this.ctx = ctx;\r\n        this.shader = shader;\r\n        this.shaderOwner = shaderOwner;\r\n        this.renderTextureInfo = renderTextureInfo;\r\n        this.scissor = scissor;\r\n        this.index = index;\r\n        this.length = 0;\r\n\r\n    }\r\n\r\n    get quads() {\r\n        return this.ctx.renderState.quads;\r\n    }\r\n\r\n    getTexture(index) {\r\n        return this.quads.getTexture(this.index + index);\r\n    }\r\n\r\n    getElementCore(index) {\r\n        return this.quads.getElementCore(this.index + index);\r\n    }\r\n\r\n    getElement(index) {\r\n        return this.quads.getElement(this.index + index);\r\n    }\r\n\r\n    getElementWidth(index) {\r\n        return this.getElement(index).renderWidth;\r\n    }\r\n\r\n    getElementHeight(index) {\r\n        return this.getElement(index).renderHeight;\r\n    }\r\n\r\n    getTextureWidth(index) {\r\n        return this.quads.getTextureWidth(this.index + index);\r\n    }\r\n\r\n    getTextureHeight(index) {\r\n        return this.quads.getTextureHeight(this.index + index);\r\n    }\r\n\r\n    getRenderWidth() {\r\n        if (this.renderTextureInfo) {\r\n            return this.renderTextureInfo.w;\r\n        } else {\r\n            return this.ctx.stage.w;\r\n        }\r\n    }\r\n\r\n    getRenderHeight() {\r\n        if (this.renderTextureInfo) {\r\n            return this.renderTextureInfo.h;\r\n        } else {\r\n            return this.ctx.stage.h;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\r\n\r\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\r\n\r\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\r\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\r\n\r\n        this.extraAttribsDataByteOffset = 0;\r\n    }\r\n\r\n    getAttribsDataByteOffset(index) {\r\n        // Where this quad can be found in the attribs buffer.\r\n        return this.quads.getAttribsDataByteOffset(this.index + index);\r\n    }\r\n\r\n    /**\r\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\r\n     * @param x\r\n     * @param y\r\n     * @return {number[]}\r\n     */\r\n    getNormalRenderTextureCoords(x, y) {\r\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\r\n        coords[0] /= this.getRenderWidth();\r\n        coords[1] /= this.getRenderHeight();\r\n        coords[0] = coords[0] * 2 - 1;\r\n        coords[1] = 1 - coords[1] * 2;\r\n        return coords;\r\n    }\r\n\r\n    getProjection() {\r\n        if (this.renderTextureInfo === null) {\r\n            return this.ctx.renderExec._projection;\r\n        } else {\r\n            return this.renderTextureInfo.nativeTexture.projection;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\nexport default class CoreRenderExecutor {\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n\r\n        this.renderState = ctx.renderState;\r\n\r\n        this.gl = this.ctx.stage.gl;\r\n    }\r\n\r\n    destroy() {\r\n        this.ctx = null;\r\n        this.renderState = null;\r\n        this.gl = null;\r\n\r\n        delete this.ctx;\r\n        delete this.renderState;\r\n        delete this.gl;\r\n    }\r\n\r\n    _reset() {\r\n        this._bindRenderTexture(null);\r\n        this._setScissor(null);\r\n        this._clearRenderTexture();\r\n    }\r\n\r\n    execute() {\r\n        this._reset();\r\n\r\n        let qops = this.renderState.quadOperations;\r\n\r\n        let i = 0, j = 0, n = qops.length;\r\n        while (i < n) {\r\n            this._processQuadOperation(qops[i]);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    _processQuadOperation(quadOperation) {\r\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\r\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\r\n            return;\r\n        }\r\n\r\n        this._setupQuadOperation(quadOperation);\r\n        this._execQuadOperation(quadOperation);\r\n\r\n    }\r\n\r\n    _setupQuadOperation(quadOperation) {\r\n    }\r\n\r\n    _execQuadOperation(op) {\r\n        // Set render texture.\r\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\r\n\r\n        if (this._renderTexture !== nativeTexture) {\r\n            this._bindRenderTexture(nativeTexture);\r\n        }\r\n\r\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\r\n            this._setScissor(null);\r\n            this._clearRenderTexture();\r\n            op.renderTextureInfo.cleared = true;\r\n            this._setScissor(op.scissor);\r\n        } else {\r\n            this._setScissor(op.scissor);\r\n        }\r\n\r\n        this._renderQuadOperation(op);\r\n    }\r\n\r\n    _renderQuadOperation(op) {\r\n    }\r\n\r\n    _bindRenderTexture(renderTexture) {\r\n        this._renderTexture = renderTexture;\r\n    }\r\n\r\n    _clearRenderTexture(renderTexture) {\r\n    }\r\n\r\n    _setScissor(area) {\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\r\n\r\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\r\n\r\n    constructor(ctx) {\r\n        super(ctx)\r\n\r\n        this.gl = this.ctx.stage.gl;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        let gl = this.gl;\r\n\r\n        // Create new sharable buffer for params.\r\n        this._attribsBuffer = gl.createBuffer();\r\n\r\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\r\n\r\n        // Init webgl arrays.\r\n        let allIndices = new Uint16Array(maxQuads * 6);\r\n\r\n        // fill the indices with the quads to draw.\r\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\r\n            allIndices[i] = j;\r\n            allIndices[i + 1] = j + 1;\r\n            allIndices[i + 2] = j + 2;\r\n            allIndices[i + 3] = j;\r\n            allIndices[i + 4] = j + 2;\r\n            allIndices[i + 5] = j + 3;\r\n        }\r\n\r\n        // The quads buffer can be (re)used to draw a range of quads.\r\n        this._quadsBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\r\n\r\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\r\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\r\n\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this.gl.deleteBuffer(this._attribsBuffer);\r\n        this.gl.deleteBuffer(this._quadsBuffer);\r\n\r\n        this.gl = null;\r\n        delete this.gl;\r\n    }\r\n\r\n    _reset() {\r\n        super._reset();\r\n\r\n        let gl = this.gl;\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.BLEND);\r\n        gl.disable(gl.DEPTH_TEST);\r\n\r\n        this._stopShaderProgram();\r\n        this._setupBuffers();\r\n    }\r\n\r\n    _setupBuffers() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\r\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\r\n    }\r\n\r\n    _setupQuadOperation(quadOperation) {\r\n        super._setupQuadOperation(quadOperation);\r\n        this._useShaderProgram(quadOperation.shader, quadOperation);\r\n    }\r\n\r\n    _renderQuadOperation(op) {\r\n        let shader = op.shader;\r\n\r\n        if (op.length || op.shader.addEmpty()) {\r\n            shader.beforeDraw(op);\r\n            shader.draw(op);\r\n            shader.afterDraw(op);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {WebGLShader} shader;\r\n     * @param {CoreQuadOperation} operation;\r\n     */\r\n    _useShaderProgram(shader, operation) {\r\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\r\n            if (this._currentShaderProgram) {\r\n                this._currentShaderProgram.stopProgram();\r\n            }\r\n            shader.useProgram();\r\n            this._currentShaderProgram = shader;\r\n        }\r\n        shader.setupUniforms(operation);\r\n    }\r\n\r\n    _stopShaderProgram() {\r\n        if (this._currentShaderProgram) {\r\n            // The currently used shader program should be stopped gracefully.\r\n            this._currentShaderProgram.stopProgram();\r\n            this._currentShaderProgram = null;\r\n        }\r\n    }\r\n\r\n    _bindRenderTexture(renderTexture) {\r\n        super._bindRenderTexture(renderTexture);\r\n\r\n        let gl = this.gl;\r\n        if (!this._renderTexture) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\r\n        } else {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\r\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\r\n        }\r\n    }\r\n\r\n    _clearRenderTexture() {\r\n        super._clearRenderTexture();\r\n        let gl = this.gl;\r\n        if (!this._renderTexture) {\r\n            let glClearColor = this.ctx.stage.getClearColor();\r\n            if (glClearColor) {\r\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\r\n                gl.clear(gl.COLOR_BUFFER_BIT);\r\n            }\r\n        } else {\r\n            // Clear texture.\r\n            gl.clearColor(0, 0, 0, 0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n    }\r\n\r\n    _setScissor(area) {\r\n        super._setScissor(area);\r\n\r\n        if (this._scissor === area) {\r\n            return;\r\n        }\r\n        this._scissor = area;\r\n\r\n        let gl = this.gl;\r\n        if (!area) {\r\n            gl.disable(gl.SCISSOR_TEST);\r\n        } else {\r\n            gl.enable(gl.SCISSOR_TEST);\r\n            let precision = this.ctx.stage.getRenderPrecision();\r\n            let y = area[1];\r\n            if (this._renderTexture === null) {\r\n                // Flip.\r\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\r\n            }\r\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class CoreRenderState {\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n\r\n        this.stage = ctx.stage;\r\n\r\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\r\n\r\n        this.renderer = ctx.stage.renderer;\r\n\r\n        this.quads = this.renderer.createCoreQuadList(ctx);\r\n\r\n    }\r\n\r\n    reset() {\r\n        this._renderTextureInfo = null;\r\n\r\n        this._scissor = null;\r\n\r\n        this._shader = null;\r\n\r\n        this._shaderOwner = null;\r\n\r\n        this._realShader = null;\r\n\r\n        this._check = false;\r\n\r\n        this.quadOperations = [];\r\n\r\n        this._texturizer = null;\r\n\r\n        this._texturizerTemporary = false;\r\n\r\n        this._quadOperation = null;\r\n\r\n        this.quads.reset();\r\n\r\n        this._temporaryTexturizers = [];\r\n        \r\n        this._isCachingTexturizer = false;\r\n\r\n    }\r\n\r\n    get length() {\r\n        return this.quads.quadTextures.length;\r\n    }\r\n\r\n    setShader(shader, owner) {\r\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\r\n            // Same shader owner: active shader is also the same.\r\n            // Prevent any shader usage to save performance.\r\n\r\n            this._realShader = shader;\r\n\r\n            if (shader.useDefault()) {\r\n                // Use the default shader when possible to prevent unnecessary program changes.\r\n                shader = this.defaultShader;\r\n            }\r\n            if (this._shader !== shader || this._shaderOwner !== owner) {\r\n                this._shader = shader;\r\n                this._shaderOwner = owner;\r\n                this._check = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    get renderTextureInfo() {\r\n        return this._renderTextureInfo;\r\n    }\r\n\r\n    setScissor(area) {\r\n        if (this._scissor !== area) {\r\n            if (area) {\r\n                this._scissor = area;\r\n            } else {\r\n                this._scissor = null;\r\n            }\r\n            this._check = true;\r\n        }\r\n    }\r\n\r\n    getScissor() {\r\n        return this._scissor;\r\n    }\r\n\r\n    setRenderTextureInfo(renderTextureInfo) {\r\n        if (this._renderTextureInfo !== renderTextureInfo) {\r\n            this._renderTextureInfo = renderTextureInfo;\r\n            this._scissor = null;\r\n            this._check = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the texturizer to be drawn during subsequent addQuads.\r\n     * @param {ElementTexturizer} texturizer\r\n     */\r\n    setTexturizer(texturizer, cache = false) {\r\n        this._texturizer = texturizer;\r\n        this._cacheTexturizer = cache;\r\n    }\r\n\r\n    set isCachingTexturizer(v) {\r\n        this._isCachingTexturizer = v;\r\n    }\r\n\r\n    get isCachingTexturizer() {\r\n        return this._isCachingTexturizer;\r\n    }\r\n\r\n    addQuad(elementCore) {\r\n        if (!this._quadOperation) {\r\n            this._createQuadOperation();\r\n        } else if (this._check && this._hasChanges()) {\r\n            this._finishQuadOperation();\r\n            this._check = false;\r\n        }\r\n\r\n        let nativeTexture = null;\r\n        if (this._texturizer) {\r\n            nativeTexture = this._texturizer.getResultTexture();\r\n\r\n            if (!this._cacheTexturizer) {\r\n                // We can release the temporary texture immediately after finalizing this quad operation.\r\n                this._temporaryTexturizers.push(this._texturizer);\r\n            }\r\n        }\r\n\r\n        if (!nativeTexture) {\r\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\r\n        }\r\n\r\n        if (this._renderTextureInfo) {\r\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\r\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\r\n                this._renderTextureInfo.nativeTexture = nativeTexture;\r\n                this._renderTextureInfo.offset = this.length;\r\n            } else {\r\n                // It is not possible to reuse another texture when there is more than one quad.\r\n                this._renderTextureInfo.nativeTexture = null;\r\n            }\r\n            this._renderTextureInfo.empty = false;\r\n        }\r\n\r\n        this.quads.quadTextures.push(nativeTexture);\r\n        this.quads.quadElements.push(elementCore);\r\n\r\n        this._quadOperation.length++;\r\n\r\n        this.renderer.addQuad(this, this.quads, this.length - 1)\r\n    }\r\n\r\n    finishedRenderTexture() {\r\n        if (this._renderTextureInfo.nativeTexture) {\r\n            // There was only one texture drawn in this render texture.\r\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\r\n            // (it should exactly span this render texture).\r\n            if (!this._isRenderTextureReusable()) {\r\n                this._renderTextureInfo.nativeTexture = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    _isRenderTextureReusable() {\r\n        const offset = this._renderTextureInfo.offset;\r\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\r\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\r\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\r\n    }\r\n\r\n    _hasChanges() {\r\n        let q = this._quadOperation;\r\n        if (this._shader !== q.shader) return true;\r\n        if (this._shaderOwner !== q.shaderOwner) return true;\r\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\r\n        if (this._scissor !== q.scissor) {\r\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _finishQuadOperation(create = true) {\r\n        if (this._quadOperation) {\r\n            if (this._quadOperation.length || this._shader.addEmpty()) {\r\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\r\n                    // Ignore empty clipping regions.\r\n                    this.quadOperations.push(this._quadOperation);\r\n                }\r\n            }\r\n\r\n            if (this._temporaryTexturizers.length) {\r\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\r\n                    // We can now reuse these render-to-textures in subsequent stages.\r\n                    // Huge performance benefit when filtering (fast blur).\r\n                    this._temporaryTexturizers[i].releaseRenderTexture();\r\n                }\r\n                this._temporaryTexturizers = [];\r\n            }\r\n\r\n            this._quadOperation = null;\r\n        }\r\n\r\n        if (create) {\r\n            this._createQuadOperation();\r\n        }\r\n    }\r\n\r\n    _createQuadOperation() {\r\n        this._quadOperation = this.renderer.createCoreQuadOperation(\r\n            this.ctx,\r\n            this._shader,\r\n            this._shaderOwner,\r\n            this._renderTextureInfo,\r\n            this._scissor,\r\n            this.length\r\n        );\r\n        this._check = false;\r\n    }\r\n\r\n    finish() {\r\n        if (this._quadOperation) {\r\n            // Add remaining.\r\n            this._finishQuadOperation(false);\r\n        }\r\n\r\n        this.renderer.finishRenderState(this);\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Base functionality for shader setup/destroy.\r\n */\r\nexport default class WebGLShaderProgram {\r\n\r\n    constructor(vertexShaderSource, fragmentShaderSource) {\r\n\r\n        this.vertexShaderSource = vertexShaderSource;\r\n        this.fragmentShaderSource = fragmentShaderSource;\r\n\r\n        this._program = null;\r\n        this.gl = null;\r\n\r\n        this._uniformLocations = new Map();\r\n        this._attributeLocations = new Map();\r\n\r\n        this._currentUniformValues = {};\r\n    }\r\n\r\n    compile(gl) {\r\n        if (this._program) return;\r\n\r\n        this.gl = gl;\r\n\r\n        this._program = gl.createProgram();\r\n\r\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\r\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\r\n\r\n        gl.attachShader(this._program, glVertShader);\r\n        gl.attachShader(this._program, glFragShader);\r\n        gl.linkProgram(this._program);\r\n\r\n        // if linking fails, then log and cleanup\r\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\r\n            console.error('[Lightning] Error: Could not initialize shader.');\r\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\r\n            console.error('[Lightning] gl.getError()', gl.getError());\r\n\r\n            // if there is a program info log, log it\r\n            if (gl.getProgramInfoLog(this._program) !== '') {\r\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\r\n            }\r\n\r\n            gl.deleteProgram(this._program);\r\n            this._program = null;\r\n        }\r\n\r\n        // clean up some shaders\r\n        gl.deleteShader(glVertShader);\r\n        gl.deleteShader(glFragShader);\r\n    }\r\n\r\n    _glCompile(type, src) {\r\n        let shader = this.gl.createShader(type);\r\n\r\n        this.gl.shaderSource(shader, src);\r\n        this.gl.compileShader(shader);\r\n\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\r\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\r\n            let idx = 0;\r\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    getUniformLocation(name) {\r\n        let location = this._uniformLocations.get(name);\r\n        if (location === undefined) {\r\n            location = this.gl.getUniformLocation(this._program, name);\r\n            this._uniformLocations.set(name, location);\r\n        }\r\n\r\n        return location;\r\n    }\r\n\r\n    getAttribLocation(name) {\r\n        let location = this._attributeLocations.get(name);\r\n        if (location === undefined) {\r\n            location = this.gl.getAttribLocation(this._program, name);\r\n            this._attributeLocations.set(name, location);\r\n        }\r\n\r\n        return location;\r\n    }\r\n\r\n    destroy() {\r\n        if (this._program) {\r\n            this.gl.deleteProgram(this._program);\r\n        }\r\n\r\n        this._attributeLocations = null;\r\n        this._currentUniformValues = null;\r\n        this.fragmentShaderSource = null;\r\n        this._program = null;\r\n        this.gl = null;\r\n        this._uniformLocations = null;\r\n        this.vertexShaderSource = null;  \r\n\r\n        delete this.vertexShaderSource;\r\n        delete this._program;        \r\n        delete this._currentUniformValues;\r\n        delete this.fragmentShaderSource;\r\n        delete this.gl;\r\n        delete this._uniformLocations;\r\n        delete this._attributeLocations;\r\n\r\n    }\r\n\r\n    get glProgram() {\r\n        return this._program;\r\n    }\r\n\r\n    get compiled() {\r\n        return !!this._program;\r\n    }\r\n\r\n    _valueEquals(v1, v2) {\r\n        // Uniform value is either a typed array or a numeric value.\r\n        if (v1.length && v2.length) {\r\n            for (let i = 0, n = v1.length; i < n; i++) {\r\n                if (v1[i] !== v2[i]) return false;\r\n            }\r\n            return true;\r\n        } else {\r\n            return (v1 === v2);\r\n        }\r\n    }\r\n\r\n    _valueClone(v) {\r\n        if (v.length) {\r\n            return v.slice(0);\r\n        } else {\r\n            return v;\r\n        }\r\n    }\r\n\r\n    setUniformValue(name, value, glFunction) {\r\n        let v = this._currentUniformValues[name];\r\n        if (v === undefined || !this._valueEquals(v, value)) {\r\n            let clonedValue = this._valueClone(value);\r\n            this._currentUniformValues[name] = clonedValue;\r\n\r\n            let loc = this.getUniformLocation(name);\r\n            if (loc) {\r\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\r\n                if (isMatrix) {\r\n                    glFunction.call(this.gl, loc, false, clonedValue);\r\n                } else {\r\n                    glFunction.call(this.gl, loc, clonedValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\r\nimport Shader from \"../../tree/Shader.mjs\";\r\n\r\nexport default class WebGLShader extends Shader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        const stage = ctx.stage;\r\n\r\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\r\n        if (!this._program) {\r\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\r\n\r\n            // Let the vbo context perform garbage collection.\r\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\r\n        }\r\n\r\n        this.gl = stage.gl;\r\n    }\r\n\r\n    get glProgram() {\r\n        return this._program.glProgram;\r\n    }\r\n\r\n    _init() {\r\n        if (!this._initialized) {\r\n            this.initialize();\r\n            this._initialized = true;\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this._program.compile(this.gl);\r\n    }\r\n\r\n    get initialized() {\r\n        return this._initialized;\r\n    }\r\n\r\n    _uniform(name) {\r\n        return this._program.getUniformLocation(name);\r\n    }\r\n\r\n    _attrib(name) {\r\n        return this._program.getAttribLocation(name);\r\n    }\r\n\r\n    _setUniform(name, value, glFunction) {\r\n        this._program.setUniformValue(name, value, glFunction);\r\n    }\r\n\r\n    useProgram() {\r\n        this._init();\r\n        this.gl.useProgram(this.glProgram);\r\n        this.beforeUsage();\r\n        this.enableAttribs();\r\n    }\r\n\r\n    stopProgram() {\r\n        this.afterUsage();\r\n        this.disableAttribs();\r\n    }\r\n\r\n    hasSameProgram(other) {\r\n        // For performance reasons, we first check for identical references.\r\n        return (other && ((other === this) || (other._program === this._program)));\r\n    }\r\n\r\n    beforeUsage() {\r\n        // Override to set settings other than the default settings (blend mode etc).\r\n    }\r\n\r\n    afterUsage() {\r\n        // All settings changed in beforeUsage should be reset here.\r\n    }\r\n\r\n    enableAttribs() {\r\n\r\n    }\r\n\r\n    disableAttribs() {\r\n\r\n    }\r\n\r\n    getExtraAttribBytesPerVertex() {\r\n        return 0;\r\n    }\r\n\r\n    getVertexAttribPointerOffset(operation) {\r\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\r\n    }\r\n\r\n    setExtraAttribsInBuffer(operation) {\r\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\r\n        // operation.extraAttribsBufferByteOffset.\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        // Set all shader-specific uniforms.\r\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\r\n        // The uniforms are shared by all shaders that have the same type (and shader program).\r\n    }\r\n\r\n    _getProjection(operation) {\r\n        return operation.getProjection();\r\n    }\r\n\r\n    getFlipY(operation) {\r\n        return this._getProjection(operation)[1] < 0;\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n    }\r\n\r\n    draw(operation) {\r\n    }\r\n\r\n    afterDraw(operation) {\r\n    }\r\n\r\n    cleanup() {\r\n        this._initialized = false;\r\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport WebGLShader from \"../WebGLShader.mjs\";\r\n\r\nexport default class DefaultShader extends WebGLShader {\r\n\r\n    enableAttribs() {\r\n        // Enables the attribs in the shader program.\r\n        let gl = this.gl;\r\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\r\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\r\n\r\n        if (this._attrib(\"aTextureCoord\") !== -1) {\r\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\r\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\r\n        }\r\n\r\n        if (this._attrib(\"aColor\") !== -1) {\r\n            // Some shaders may ignore the color.\r\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\r\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\r\n        }\r\n    }\r\n\r\n    disableAttribs() {\r\n        // Disables the attribs in the shader program.\r\n        let gl = this.gl;\r\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\r\n\r\n        if (this._attrib(\"aTextureCoord\") !== -1) {\r\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\r\n        }\r\n\r\n        if (this._attrib(\"aColor\") !== -1) {\r\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\r\n        }\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\r\n    }\r\n\r\n    draw(operation) {\r\n        let gl = this.gl;\r\n\r\n        let length = operation.length;\r\n\r\n        if (length) {\r\n            let glTexture = operation.getTexture(0);\r\n            let pos = 0;\r\n            for (let i = 0; i < length; i++) {\r\n                let tx = operation.getTexture(i);\r\n                if (glTexture !== tx) {\r\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\r\n                    glTexture = tx;\r\n                    pos = i;\r\n                }\r\n            }\r\n            \r\n            gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n            gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nDefaultShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nDefaultShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    void main(void){\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class Renderer {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n        this._defaultShader = undefined;\r\n    }\r\n\r\n    gc(aggressive) {\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    getDefaultShader(ctx = this.stage.ctx) {\r\n        if (!this._defaultShader) {\r\n            this._defaultShader = this._createDefaultShader(ctx);\r\n        }\r\n        return this._defaultShader;\r\n    }\r\n\r\n    _createDefaultShader(ctx) {\r\n    }\r\n\r\n    isValidShaderType(shaderType) {\r\n        return (shaderType.prototype instanceof this._getShaderBaseType());\r\n    }\r\n\r\n    createShader(ctx, settings) {\r\n        const shaderType = settings.type;\r\n        // If shader type is not correct, use a different platform.\r\n        if (!this.isValidShaderType(shaderType)) {\r\n            const convertedShaderType = this._getShaderAlternative(shaderType);\r\n            if (!convertedShaderType) {\r\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\r\n                return this._createDefaultShader(ctx);\r\n            }\r\n            return new convertedShaderType(ctx);\r\n        } else {\r\n            const shader = new shaderType(ctx);\r\n            Base.patchObject(this, settings);\r\n            return shader;\r\n        }\r\n    }\r\n\r\n    _getShaderBaseType() {\r\n    }\r\n\r\n    _getShaderAlternative(shaderType) {\r\n        return this.getDefaultShader();\r\n    }\r\n\r\n    copyRenderTexture(renderTexture, nativeTexture, options) {\r\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\r\n    }\r\n}\r\n\r\nimport Base from \"../tree/Base.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../../tree/Utils.mjs\";\r\nimport StageUtils from \"../../tree/StageUtils.mjs\";\r\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\r\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\r\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\r\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\r\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\r\nimport WebGLShader from \"./WebGLShader.mjs\";\r\nimport Renderer from \"../Renderer.mjs\";\r\n\r\nexport default class WebGLRenderer extends Renderer {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this.shaderPrograms = new Map();\r\n        this._compressedTextureExtensions = {\r\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\r\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\r\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\r\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\r\n        }\r\n    }\r\n\r\n    getCompressedTextureExtensions() {\r\n        return this._compressedTextureExtensions\r\n    }\r\n\r\n    destroy() {\r\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\r\n\r\n        this.shaderPrograms = null;\r\n        this._compressedTextureExtensions = null;\r\n\r\n        delete this.shaderPrograms;\r\n        delete this._compressedTextureExtensions;\r\n    }\r\n\r\n    _createDefaultShader(ctx) {\r\n        return new DefaultShader(ctx);\r\n    }\r\n\r\n    _getShaderBaseType() {\r\n        return WebGLShader\r\n    }\r\n\r\n    _getShaderAlternative(shaderType) {\r\n        return shaderType.getWebGL && shaderType.getWebGL();\r\n    }\r\n\r\n    createCoreQuadList(ctx) {\r\n        return new WebGLCoreQuadList(ctx);\r\n    }\r\n\r\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\r\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\r\n    }\r\n\r\n    createCoreRenderExecutor(ctx) {\r\n        return new WebGLCoreRenderExecutor(ctx);\r\n    }\r\n\r\n    createCoreRenderState(ctx) {\r\n        return new CoreRenderState(ctx);\r\n    }\r\n\r\n    createRenderTexture(w, h, pw, ph) {\r\n        const gl = this.stage.gl;\r\n        const glTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        glTexture.params = {};\r\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\r\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\r\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\r\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\r\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\r\n\r\n        // We need a specific framebuffer for every render texture.\r\n        glTexture.framebuffer = gl.createFramebuffer();\r\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\r\n\r\n        return glTexture;\r\n    }\r\n\r\n    freeRenderTexture(glTexture) {\r\n        let gl = this.stage.gl;\r\n        gl.deleteFramebuffer(glTexture.framebuffer);\r\n        gl.deleteTexture(glTexture);\r\n    }\r\n\r\n    _getBytesPerPixel(fmt, type) {\r\n        const gl = this.stage.gl;\r\n\r\n        if (fmt === gl.RGBA) {\r\n            switch (type) {\r\n                case gl.UNSIGNED_BYTE:\r\n                    return 4;\r\n\r\n                case gl.UNSIGNED_SHORT_4_4_4_4:\r\n                    return 2;\r\n\r\n                case gl.UNSIGNED_SHORT_5_5_5_1:\r\n                    return 2;\r\n\r\n                default:\r\n                    throw new Error('Invalid type specified for GL_RGBA format');\r\n            }\r\n        }\r\n        else if (fmt === gl.RGB) {\r\n            switch (type) {\r\n                case gl.UNSIGNED_BYTE:\r\n                    return 3;\r\n\r\n                case gl.UNSIGNED_BYTE_5_6_5:\r\n                    return 2;\r\n\r\n                default:\r\n                    throw new Error('Invalid type specified for GL_RGB format');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\r\n        }\r\n    }\r\n\r\n    uploadTextureSource(textureSource, options) {\r\n        const gl = this.stage.gl;\r\n\r\n        const source = options.source;\r\n        let compressed = false;\r\n        if (options.renderInfo) {\r\n            compressed = options.renderInfo.compressed || false\r\n        }\r\n\r\n        const format = {\r\n            premultiplyAlpha: true,\r\n            hasAlpha: true\r\n        };\r\n\r\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\r\n            format.premultiplyAlpha = options.premultiplyAlpha;\r\n        }\r\n\r\n        if (options && options.hasOwnProperty('flipBlueRed')) {\r\n            format.flipBlueRed = options.flipBlueRed;\r\n        }\r\n\r\n        if (options && options.hasOwnProperty('hasAlpha')) {\r\n            format.hasAlpha = options.hasAlpha;\r\n        }\r\n\r\n        if (!format.hasAlpha) {\r\n            format.premultiplyAlpha = false;\r\n        }\r\n\r\n        format.texParams = options.texParams || {}\r\n        format.texOptions = options.texOptions || {}\r\n\r\n        let glTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\r\n\r\n        if (Utils.isNode) {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\r\n        }\r\n\r\n        const texParams = format.texParams;\r\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\r\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\r\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\r\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\r\n\r\n        Object.keys(texParams).forEach(key => {\r\n            const value = texParams[key];\r\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\r\n        });\r\n\r\n        if (compressed) {\r\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\r\n            return glTexture;\r\n        }\r\n         \r\n        const texOptions = format.texOptions;\r\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\r\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\r\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\r\n        if (options && options.imageRef) {\r\n            texOptions.imageRef = options.imageRef;\r\n        }\r\n        \r\n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\r\n        \r\n        glTexture.params = Utils.cloneObjShallow(texParams);\r\n        glTexture.options = Utils.cloneObjShallow(texOptions);\r\n\r\n        // calculate bytes per pixel for vram usage tracking\r\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\r\n\r\n        return glTexture;\r\n    }\r\n\r\n    freeTextureSource(textureSource) {\r\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\r\n    }\r\n\r\n    addQuad(renderState, quads, index) {\r\n        let offset = (index * 20);\r\n        const elementCore = quads.quadElements[index];\r\n\r\n        let r = elementCore._renderContext;\r\n\r\n        let floats = renderState.quads.floats;\r\n        let uints = renderState.quads.uints;\r\n        const mca = StageUtils.mergeColorAlpha;\r\n\r\n        if (r.tb !== 0 || r.tc !== 0) {\r\n            floats[offset++] = r.px;\r\n            floats[offset++] = r.py;\r\n            floats[offset++] = elementCore._ulx;\r\n            floats[offset++] = elementCore._uly;\r\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\r\n            floats[offset++] = r.px + elementCore._w * r.ta;\r\n            floats[offset++] = r.py + elementCore._w * r.tc;\r\n            floats[offset++] = elementCore._brx;\r\n            floats[offset++] = elementCore._uly;\r\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\r\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\r\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\r\n            floats[offset++] = elementCore._brx;\r\n            floats[offset++] = elementCore._bry;\r\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\r\n            floats[offset++] = r.px + elementCore._h * r.tb;\r\n            floats[offset++] = r.py + elementCore._h * r.td;\r\n            floats[offset++] = elementCore._ulx;\r\n            floats[offset++] = elementCore._bry;\r\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\r\n        } else {\r\n            // Simple.\r\n            let cx = r.px + elementCore._w * r.ta;\r\n            let cy = r.py + elementCore._h * r.td;\r\n\r\n            floats[offset++] = r.px;\r\n            floats[offset++] = r.py;\r\n            floats[offset++] = elementCore._ulx;\r\n            floats[offset++] = elementCore._uly;\r\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\r\n            floats[offset++] = cx;\r\n            floats[offset++] = r.py;\r\n            floats[offset++] = elementCore._brx;\r\n            floats[offset++] = elementCore._uly;\r\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\r\n            floats[offset++] = cx;\r\n            floats[offset++] = cy;\r\n            floats[offset++] = elementCore._brx;\r\n            floats[offset++] = elementCore._bry;\r\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\r\n            floats[offset++] = r.px;\r\n            floats[offset++] = cy;\r\n            floats[offset++] = elementCore._ulx;\r\n            floats[offset++] = elementCore._bry;\r\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\r\n        }\r\n    }\r\n\r\n    isRenderTextureReusable(renderState, renderTextureInfo) {\r\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\r\n        let floats = renderState.quads.floats;\r\n        let uints = renderState.quads.uints;\r\n        return ((floats[offset] === 0) &&\r\n            (floats[offset + 1] === 0) &&\r\n            (floats[offset + 2] === 0) &&\r\n            (floats[offset + 3] === 0) &&\r\n            (uints[offset + 4] === 0xFFFFFFFF) &&\r\n            (floats[offset + 5] === renderTextureInfo.w) &&\r\n            (floats[offset + 6] === 0) &&\r\n            (floats[offset + 7] === 1) &&\r\n            (floats[offset + 8] === 0) &&\r\n            (uints[offset + 9] === 0xFFFFFFFF) &&\r\n            (floats[offset + 10] === renderTextureInfo.w) &&\r\n            (floats[offset + 11] === renderTextureInfo.h) &&\r\n            (floats[offset + 12] === 1) &&\r\n            (floats[offset + 13] === 1) &&\r\n            (uints[offset + 14] === 0xFFFFFFFF) &&\r\n            (floats[offset + 15] === 0) &&\r\n            (floats[offset + 16] === renderTextureInfo.h) &&\r\n            (floats[offset + 17] === 0) &&\r\n            (floats[offset + 18] === 1) &&\r\n            (uints[offset + 19] === 0xFFFFFFFF));\r\n    }\r\n\r\n    finishRenderState(renderState) {\r\n        // Set extra shader attribute data.\r\n        let offset = renderState.length * 80;\r\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\r\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\r\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\r\n            offset += extra;\r\n            if (extra) {\r\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\r\n            }\r\n        }\r\n        renderState.quads.dataLength = offset;\r\n    }\r\n\r\n    copyRenderTexture(renderTexture, nativeTexture, options) {\r\n        const gl = this.stage.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\r\n        const precision = renderTexture.precision;\r\n        gl.copyTexSubImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            precision * (options.sx || 0),\r\n            precision * (options.sy || 0),\r\n            precision * (options.x || 0),\r\n            precision * (options.y || 0),\r\n            precision * (options.w || renderTexture.ow),\r\n            precision * (options.h || renderTexture.oh));\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\r\n\r\nexport default class C2dCoreQuadList extends CoreQuadList {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this.renderContexts = [];\r\n        this.modes = [];\r\n    }\r\n\r\n    setRenderContext(index, v) {\r\n        this.renderContexts[index] = v;\r\n    }\r\n\r\n    setSimpleTc(index, v) {\r\n        if (v) {\r\n            this.modes[index] |= 1;\r\n        } else {\r\n            this.modes[index] -= (this.modes[index] & 1);\r\n        }\r\n    }\r\n\r\n    setWhite(index, v) {\r\n        if (v) {\r\n            this.modes[index] |= 2;\r\n        } else {\r\n            this.modes[index] -= (this.modes[index] & 2);\r\n        }\r\n    }\r\n\r\n    getRenderContext(index) {\r\n        return this.renderContexts[index];\r\n    }\r\n\r\n    getSimpleTc(index) {\r\n        return (this.modes[index] & 1);\r\n    }\r\n\r\n    getWhite(index) {\r\n        return (this.modes[index] & 2);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\r\n\r\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\r\n\r\n    getRenderContext(index) {\r\n        return this.quads.getRenderContext(this.index + index);\r\n    }\r\n\r\n    getSimpleTc(index) {\r\n        return this.quads.getSimpleTc(this.index + index);\r\n    }\r\n\r\n    getWhite(index) {\r\n        return this.quads.getWhite(this.index + index);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\r\nimport StageUtils from \"../../tree/StageUtils.mjs\";\r\nimport Utils from \"../../tree/Utils.mjs\";\r\n\r\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\r\n\r\n    init() {\r\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\r\n    }\r\n\r\n    _renderQuadOperation(op) {\r\n        let shader = op.shader;\r\n\r\n        if (op.length || op.shader.addEmpty()) {\r\n            const target = this._renderTexture || this._mainRenderTexture;\r\n            shader.beforeDraw(op, target);\r\n            shader.draw(op, target);\r\n            shader.afterDraw(op, target);\r\n        }\r\n    }\r\n\r\n    _clearRenderTexture() {\r\n        const ctx = this._getContext();\r\n\r\n        let clearColor = [0, 0, 0, 0];\r\n        if (this._mainRenderTexture.ctx === ctx) {\r\n            clearColor = this.ctx.stage.getClearColor();\r\n        }\r\n\r\n        const renderTexture = ctx.canvas;\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\r\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\r\n        } else {\r\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\r\n            // Do not use fillRect because it produces artifacts.\r\n            ctx.globalCompositeOperation = 'copy';\r\n            ctx.beginPath();\r\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.globalCompositeOperation = 'source-over';\r\n        }\r\n    }\r\n    \r\n    _getContext() {\r\n        if (this._renderTexture) {\r\n            return this._renderTexture.ctx;\r\n        } else {\r\n            return this._mainRenderTexture.ctx;\r\n        } \r\n    }\r\n\r\n    _restoreContext() {\r\n        const ctx = this._getContext();\r\n        ctx.restore();\r\n        ctx.save();\r\n        ctx._scissor = null;\r\n    }\r\n\r\n    _setScissor(area) {\r\n        const ctx = this._getContext();\r\n\r\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\r\n            // Clipping is stored in the canvas context state.\r\n            // We can't reset clipping alone so we need to restore the full context.\r\n            this._restoreContext();\r\n\r\n            let precision = this.ctx.stage.getRenderPrecision();\r\n            if (area) {\r\n                ctx.beginPath();\r\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\r\n                ctx.closePath();\r\n                ctx.clip();\r\n            }\r\n            ctx._scissor = area;\r\n        }\r\n    }\r\n\r\n    static _equalScissorAreas(canvas, area, current) {\r\n        if (!area) {\r\n            area = [0, 0, canvas.width, canvas.height]\r\n        }\r\n        if (!current) {\r\n            current = [0, 0, canvas.width, canvas.height]\r\n        }\r\n        return Utils.equalValues(area, current)\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Shader from \"../../tree/Shader.mjs\";\r\n\r\nexport default class C2dShader extends Shader {\r\n\r\n    beforeDraw(operation) {\r\n    }\r\n\r\n    draw(operation) {\r\n    }\r\n\r\n    afterDraw(operation) {\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport C2dShader from \"../C2dShader.mjs\";\r\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\r\n\r\nexport default class DefaultShader extends C2dShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\r\n        this._tintManager = this.ctx.stage.renderer.tintManager;\r\n    }\r\n\r\n    draw(operation, target) {\r\n        const ctx = target.ctx;\r\n        let length = operation.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const tx = operation.getTexture(i);\r\n            const vc = operation.getElementCore(i);\r\n            const rc = operation.getRenderContext(i);\r\n            const white = operation.getWhite(i);\r\n            const stc = operation.getSimpleTc(i);\r\n\r\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\r\n            const precision = this.ctx.stage.getRenderPrecision();\r\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\r\n\r\n            const rect = (tx === this._rectangleTexture);\r\n            const info = {operation, target, index: i, rect};\r\n\r\n            if (rect) {\r\n                // Check for gradient.\r\n                if (white) {\r\n                    ctx.fillStyle = 'white';\r\n                } else {\r\n                    this._setColorGradient(ctx, vc);\r\n                }\r\n\r\n                ctx.globalAlpha = rc.alpha;\r\n                this._beforeDrawEl(info);\r\n                ctx.fillRect(0, 0, vc.w, vc.h);\r\n                this._afterDrawEl(info);\r\n                ctx.globalAlpha = 1.0;\r\n            } else {\r\n                // @todo: set image smoothing based on the texture.\r\n\r\n                // @todo: optimize by registering whether identity texcoords are used.\r\n                ctx.globalAlpha = rc.alpha;\r\n                this._beforeDrawEl(info);\r\n\r\n                // @todo: test if rounding yields better performance.\r\n\r\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\r\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\r\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\r\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\r\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\r\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\r\n\r\n                let colorize = !white;\r\n                if (colorize) {\r\n                    // @todo: cache the tint texture for better performance.\r\n\r\n                    // Draw to intermediate texture with background color/gradient.\r\n                    // This prevents us from having to create a lot of render texture canvases.\r\n\r\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\r\n                    let color = vc._colorUl;\r\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\r\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\r\n                    }\r\n\r\n                    const alpha = ((color / 16777216) | 0) / 255.0;\r\n                    ctx.globalAlpha *= alpha;\r\n\r\n                    const rgb = color & 0x00FFFFFF;\r\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\r\n\r\n                    // Actually draw result.\r\n                    ctx.fillStyle = 'white';\r\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\r\n                } else {\r\n                    ctx.fillStyle = 'white';\r\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\r\n                }\r\n                this._afterDrawEl(info);\r\n                ctx.globalAlpha = 1.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\r\n        let color = vc._colorUl;\r\n        let gradient;\r\n        //@todo: quick single color check.\r\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\r\n\r\n        if (vc._colorUl === vc._colorUr) {\r\n            if (vc._colorBl === vc._colorBr) {\r\n                if (vc._colorUl === vc.colorBl) {\r\n                    // Single color.\r\n                } else {\r\n                    // Vertical gradient.\r\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\r\n                    if (transparency) {\r\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\r\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\r\n                    } else {\r\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\r\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\r\n\r\n                    }\r\n                }\r\n            } else {\r\n                // Not supported gradient.\r\n            }\r\n        } else {\r\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\r\n                // Horizontal gradient.\r\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\r\n                if (transparency) {\r\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\r\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\r\n                } else {\r\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\r\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (gradient) {\r\n            ctx.fillStyle = gradient;\r\n        } else {\r\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\r\n        }\r\n    }\r\n\r\n    _beforeDrawEl(info) {\r\n    }\r\n\r\n    _afterDrawEl(info) {\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class C2dTextureTintManager {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n        this._usedMemory = 0;\r\n        this._cachedNativeTextures = new Set();\r\n    }\r\n\r\n    destroy() {\r\n        this.gc(true);\r\n\r\n        this.stage = null;\r\n        delete this.stage;\r\n    }\r\n\r\n    _addMemoryUsage(delta) {\r\n        this._usedMemory += delta;\r\n\r\n        this.stage.addMemoryUsage(delta);\r\n    }\r\n\r\n    delete(nativeTexture) {\r\n        // Should be called when native texture is cleaned up.\r\n        if (this._hasCache(nativeTexture)) {\r\n            const cache = this._getCache(nativeTexture);\r\n            const prevMemUsage = cache.memoryUsage;\r\n            cache.clear();\r\n            this._cachedNativeTextures.delete(nativeTexture);\r\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\r\n        }\r\n    }\r\n\r\n    getTintTexture(nativeTexture, color) {\r\n        const frame = this.stage.frameCounter;\r\n\r\n        this._cachedNativeTextures.add(nativeTexture);\r\n\r\n        const cache = this._getCache(nativeTexture);\r\n\r\n        const item = cache.get(color);\r\n        item.lf = frame;\r\n\r\n        if (item.tx) {\r\n            if (nativeTexture.update > item.u) {\r\n                // Native texture was updated in the mean time: renew.\r\n                this._tintTexture(item.tx, nativeTexture, color)\r\n            }\r\n\r\n            return item.tx;\r\n        } else {\r\n            const before = cache.memoryUsage;\r\n\r\n            // Find blanco tint texture.\r\n            let target = cache.reuseTexture(frame);\r\n            if (target) {\r\n                target.ctx.clearRect(0, 0, target.width, target.height);\r\n            } else {\r\n                // Allocate new.\r\n                target = document.createElement('canvas');\r\n                target.width = nativeTexture.w;\r\n                target.height = nativeTexture.h;\r\n                target.ctx = target.getContext('2d');\r\n            }\r\n\r\n            this._tintTexture(target, nativeTexture, color);\r\n            cache.set(color, target, frame);\r\n\r\n            const after = cache.memoryUsage;\r\n\r\n            if (after !== before) {\r\n                this._addMemoryUsage(after - before);\r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n\r\n    _tintTexture(target, source, color) {\r\n        let col = color.toString(16);\r\n        while (col.length < 6) {\r\n            col = \"0\" + col;\r\n        }\r\n        target.ctx.fillStyle = '#' + col;\r\n        target.ctx.globalCompositeOperation = 'copy';\r\n        target.ctx.fillRect(0, 0, source.w, source.h);\r\n        target.ctx.globalCompositeOperation = 'multiply';\r\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\r\n\r\n        // Alpha-mix the texture.\r\n        target.ctx.globalCompositeOperation = 'destination-in';\r\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\r\n    }\r\n\r\n    _hasCache(nativeTexture) {\r\n        return !!nativeTexture._tintCache;\r\n    }\r\n\r\n    _getCache(nativeTexture) {\r\n        if (!nativeTexture._tintCache) {\r\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\r\n        }\r\n        return nativeTexture._tintCache;\r\n    }\r\n\r\n    gc(aggressive = false) {\r\n        const frame = this.stage.frameCounter;\r\n        let delta = 0;\r\n        this._cachedNativeTextures.forEach(texture => {\r\n            const cache = this._getCache(texture);\r\n            if (aggressive) {\r\n                delta += cache.memoryUsage;\r\n                cache.clear();\r\n            } else {\r\n                const before = cache.memoryUsage;\r\n                cache.cleanup(frame);\r\n                cache.releaseBlancoTextures();\r\n                delta += (cache.memoryUsage - before);\r\n            }\r\n        });\r\n\r\n        if (aggressive) {\r\n            this._cachedNativeTextures.clear();\r\n        }\r\n\r\n        if (delta) {\r\n            this._addMemoryUsage(delta);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass C2dTintCache {\r\n\r\n    constructor(nativeTexture) {\r\n        this._tx = nativeTexture;\r\n        this._colors = new Map();\r\n        this._blancoTextures = null;\r\n        this._lastCleanupFrame = 0;\r\n        this._memTextures = 0;\r\n    }\r\n\r\n    get memoryUsage() {\r\n        return this._memTextures * this._tx.w * this._tx.h;\r\n    }\r\n\r\n    releaseBlancoTextures() {\r\n        this._memTextures -= this._blancoTextures.length;\r\n        this._blancoTextures = [];\r\n    }\r\n\r\n    clear() {\r\n        // Dereference the textures.\r\n        this._blancoTextures = null;\r\n        this._colors.clear();\r\n        this._memTextures = 0;\r\n    }\r\n\r\n    get(color) {\r\n        let item = this._colors.get(color);\r\n        if (!item) {\r\n            item = {lf: -1, tx: undefined, u: -1};\r\n            this._colors.set(color, item);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    set(color, texture, frame) {\r\n        const item = this.get(color);\r\n        item.lf = frame;\r\n        item.tx = texture;\r\n        item.u = frame;\r\n        this._memTextures++;\r\n    }\r\n\r\n    cleanup(frame) {\r\n        // We only need to clean up once per frame.\r\n        if (this._lastCleanupFrame !== frame) {\r\n\r\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\r\n            this._blancoTextures = [];\r\n\r\n            this._colors.forEach((item, color) => {\r\n                // Clean up entries that were not used last frame.\r\n                if (item.lf < frame - 1) {\r\n                    if (item.tx) {\r\n                        // Keep as reusable blanco texture.\r\n                        this._blancoTextures.push(item.tx);\r\n                    }\r\n                    this._colors.delete(color);\r\n                }\r\n            });\r\n\r\n            this._lastCleanupFrame = frame;\r\n        }\r\n    }\r\n\r\n    reuseTexture(frame) {\r\n        // Try to reuse textures, because creating them every frame is expensive.\r\n        this.cleanup(frame);\r\n        if (this._blancoTextures && this._blancoTextures.length) {\r\n            this._memTextures--;\r\n            return this._blancoTextures.pop();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\r\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\r\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\r\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\r\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\r\nimport C2dShader from \"./C2dShader.mjs\";\r\nimport Renderer from \"../Renderer.mjs\";\r\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\r\n\r\nexport default class C2dRenderer extends Renderer {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this.tintManager = new TextureTintManager(stage);\r\n\r\n        this.setupC2d(this.stage.c2d.canvas);\r\n    }\r\n\r\n    destroy() {\r\n        this.tintManager.destroy();\r\n\r\n        this.tintManager = null;\r\n        delete this.tintManager;\r\n    }\r\n\r\n    _createDefaultShader(ctx) {\r\n        return new DefaultShader(ctx);\r\n    }\r\n\r\n    _getShaderBaseType() {\r\n        return C2dShader\r\n    }\r\n\r\n    _getShaderAlternative(shaderType) {\r\n        return shaderType.getC2d && shaderType.getC2d();\r\n    }\r\n\r\n    createCoreQuadList(ctx) {\r\n        return new C2dCoreQuadList(ctx);\r\n    }\r\n\r\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\r\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\r\n    }\r\n\r\n    createCoreRenderExecutor(ctx) {\r\n        return new C2dCoreRenderExecutor(ctx);\r\n    }\r\n    \r\n    createCoreRenderState(ctx) {\r\n        return new CoreRenderState(ctx);\r\n    }\r\n\r\n    createRenderTexture(w, h, pw, ph) {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = pw;\r\n        canvas.height = ph;\r\n        this.setupC2d(canvas);\r\n        return canvas;\r\n    }\r\n    \r\n    freeRenderTexture(nativeTexture) {\r\n        this.tintManager.delete(nativeTexture);\r\n    }\r\n\r\n    gc(aggressive) {\r\n        this.tintManager.gc(aggressive);\r\n    }\r\n\r\n    uploadTextureSource(textureSource, options) {\r\n        // For canvas, we do not need to upload.\r\n        if (options.source.buffer) {\r\n            // Convert RGBA buffer to canvas.\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = options.w;\r\n            canvas.height = options.h;\r\n\r\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\r\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\r\n            return canvas;\r\n        }\r\n\r\n        return options.source;\r\n    }\r\n\r\n    freeTextureSource(textureSource) {\r\n        this.tintManager.delete(textureSource.nativeTexture);\r\n    }\r\n\r\n    addQuad(renderState, quads, index) {\r\n        // Render context changes while traversing so we save it by ref.\r\n        const elementCore = quads.quadElements[index];\r\n        quads.setRenderContext(index, elementCore._renderContext);\r\n        quads.setWhite(index, elementCore.isWhite());\r\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\r\n    }\r\n\r\n    isRenderTextureReusable(renderState, renderTextureInfo) {\r\n        // @todo: check render coords/matrix, maybe move this to core?\r\n        return false;\r\n    }\r\n\r\n    finishRenderState(renderState) {\r\n    }\r\n\r\n    setupC2d(canvas) {\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.ctx = ctx;\r\n\r\n        ctx._scissor = null;\r\n\r\n        // Save base state so we can restore the defaults later.\r\n        canvas.ctx.save();\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\r\n\r\nexport default class SparkShader extends WebGLShader {\r\n\r\n    enableAttribs() {\r\n        // Enables the attribs in the shader program.\r\n        let gl = this.gl;\r\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\r\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\r\n\r\n        if (this._attrib(\"aTextureCoord\") !== -1) {\r\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\r\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\r\n        }\r\n\r\n        if (this._attrib(\"aColor\") !== -1) {\r\n            // Some shaders may ignore the color.\r\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\r\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\r\n        }\r\n    }\r\n\r\n    disableAttribs() {\r\n        // Disables the attribs in the shader program.\r\n        let gl = this.gl;\r\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\r\n\r\n        if (this._attrib(\"aTextureCoord\") !== -1) {\r\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\r\n        }\r\n\r\n        if (this._attrib(\"aColor\") !== -1) {\r\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\r\n        }\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\r\n    }\r\n\r\n    draw(operation) {\r\n        let gl = this.gl;\r\n\r\n        let length = operation.length;\r\n\r\n        if (length) {\r\n            let glTexture = operation.getTexture(0);\r\n            let pos = 0;\r\n            for (let i = 0; i < length; i++) {\r\n                let tx = operation.getTexture(i);\r\n                if (glTexture !== tx) {\r\n                    if (glTexture.options && glTexture.options.imageRef) {\r\n                        let elementPostion = (i > 0) ? (i - 1) : i;\r\n                        const precision = this.ctx.stage.getOption('precision');\r\n                        let vc = operation.getElementCore(elementPostion);\r\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\r\n                    } else {\r\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\r\n                    }\r\n                    glTexture = tx;\r\n                    pos = i;\r\n                }\r\n            }\r\n            if (pos < length) {\r\n                if (glTexture.options && glTexture.options.imageRef) {\r\n                    const precision = this.ctx.stage.getOption('precision');\r\n                    let vc = operation.getElementCore(pos);\r\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\r\n                } else {\r\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nSparkShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nSparkShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    void main(void){\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\r\nimport SparkShader from \"./shaders/SparkShader.mjs\";\r\n\r\nexport default class SparkRenderer extends WebGLRenderer {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n    }\r\n\r\n    _createDefaultShader(ctx) {\r\n        return new SparkShader(ctx);\r\n    }\r\n\r\n    createCoreRenderExecutor(ctx) {\r\n        global.beginDrawing();\r\n        let ret = super.createCoreRenderExecutor(ctx);\r\n        global.endDrawing();\r\n        return ret;\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class ImageWorker {\r\n\r\n    constructor(options = {}) {\r\n        this._items = new Map();\r\n        this._id = 0;\r\n\r\n        this._initWorker();\r\n    }\r\n\r\n    destroy() {\r\n        if (this._worker) {\r\n            this._worker.terminate();\r\n        }\r\n\r\n        this._items = null;\r\n        this._worker = null;\r\n\r\n        delete this._items;\r\n        delete this._worker;        \r\n    }\r\n\r\n    _initWorker() {\r\n        const code = `(${createWorker.toString()})()`;\r\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\r\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\r\n            type: 'application/javascript; charset=utf-8'\r\n        });\r\n        this._worker = new Worker(blobURL);\r\n\r\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\r\n\r\n        this._worker.onmessage = (e) => {\r\n            if (e.data && e.data.id) {\r\n                const id = e.data.id;\r\n                const item = this._items.get(id);\r\n                if (item) {\r\n                    if (e.data.type == 'data') {\r\n                        this.finish(item, e.data.info);\r\n                    } else {\r\n                        this.error(item, e.data.info);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    create(src) {\r\n        const id = ++this._id;\r\n        const item = new ImageWorkerImage(this, id, src);\r\n        this._items.set(id, item);\r\n        this._worker.postMessage({type: \"add\", id: id, src: src});\r\n        return item;\r\n    }\r\n\r\n    cancel(image) {\r\n        this._worker.postMessage({type: \"cancel\", id: image.id});\r\n        this._items.delete(image.id);\r\n    }\r\n\r\n    error(image, info) {\r\n        image.error(info);\r\n        this._items.delete(image.id);\r\n    }\r\n\r\n    finish(image, info) {\r\n        image.load(info);\r\n        this._items.delete(image.id);\r\n    }\r\n\r\n}\r\n\r\nclass ImageWorkerImage {\r\n\r\n    constructor(manager, id, src) {\r\n        this._manager = manager;\r\n        this._id = id;\r\n        this._src = src;\r\n        this._onError = null;\r\n        this._onLoad = null;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    get src() {\r\n        return this._src;\r\n    }\r\n\r\n    set onError(f) {\r\n        this._onError = f;\r\n    }\r\n\r\n    set onLoad(f) {\r\n        this._onLoad = f;\r\n    }\r\n\r\n    cancel() {\r\n        this._manager.cancel(this);\r\n    }\r\n\r\n    load(info) {\r\n        if (this._onLoad) {\r\n            this._onLoad(info);\r\n        }\r\n    }\r\n\r\n    error(info) {\r\n        if (this._onError) {\r\n            this._onError(info);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\r\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\r\n */\r\nconst createWorker = function() {\r\n\r\n    function ImageWorkerServer() {\r\n\r\n        this.items = new Map();\r\n\r\n        var t = this;\r\n        onmessage = function(e) {\r\n            t._receiveMessage(e);\r\n        }\r\n\r\n    }\r\n\r\n    ImageWorkerServer.isPathAbsolute = function(path) {\r\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\r\n    };\r\n\r\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\r\n        if (e.data.type === 'config') {\r\n            this.config = e.data.config;\r\n\r\n            var base = this.config.path;\r\n            // the constructing of the basepath fails\r\n            // if location.hash contains a slash\r\n            var hasHashPath = /#.*?\\//;\r\n            if(hasHashPath.test(base)){\r\n                base = base.replace(/#.*$/,'');\r\n            }\r\n\r\n            var parts = base.split(\"/\");\r\n            parts.pop();\r\n            this._relativeBase = parts.join(\"/\") + \"/\";\r\n\r\n        } else if (e.data.type === 'add') {\r\n            this.add(e.data.id, e.data.src);\r\n        } else if (e.data.type === 'cancel') {\r\n            this.cancel(e.data.id);\r\n        }\r\n    };\r\n\r\n    ImageWorkerServer.prototype.add = function(id, src) {\r\n        // Convert relative URLs.\r\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\r\n            src = this._relativeBase + src;\r\n        }\r\n\r\n        if (src.substr(0,2) === \"//\") {\r\n            // This doesn't work for image workers.\r\n            src = this.config.protocol + src;\r\n        }\r\n\r\n        var item = new ImageWorkerServerItem(id, src);\r\n        var t = this;\r\n        item.onFinish = function(result) {\r\n            t.finish(item, result);\r\n        };\r\n        item.onError = function(info) {\r\n            t.error(item, info);\r\n        };\r\n        this.items.set(id, item);\r\n        item.start();\r\n    };\r\n\r\n    ImageWorkerServer.prototype.cancel = function(id) {\r\n        var item = this.items.get(id);\r\n        if (item) {\r\n            item.cancel();\r\n            this.items.delete(id);\r\n        }\r\n    }\r\n\r\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\r\n        postMessage({\r\n            type: \"data\",\r\n            id: item.id,\r\n            info: {\r\n                imageBitmap,\r\n                hasAlphaChannel\r\n            }\r\n        }, [imageBitmap]);\r\n        this.items.delete(item.id);\r\n    };\r\n\r\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\r\n        postMessage({\r\n            type: \"error\",\r\n            id: item.id,\r\n            info: {\r\n                type,\r\n                message\r\n            }\r\n        });\r\n        this.items.delete(item.id);\r\n    };\r\n\r\n    ImageWorkerServer.isWPEBrowser = function() {\r\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\r\n    };\r\n\r\n    function ImageWorkerServerItem(id, src) {\r\n\r\n        this._onError = undefined;\r\n        this._onFinish = undefined;\r\n        this._id = id;\r\n        this._src = src;\r\n        this._xhr = undefined;\r\n        this._mimeType = undefined;\r\n        this._canceled = false;\r\n\r\n    }\r\n\r\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\r\n        get: function() {\r\n            return this._id;\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\r\n        get: function() {\r\n            return this._onFinish;\r\n        },\r\n        set: function(f) {\r\n            this._onFinish = f;\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\r\n        get: function() {\r\n            return this._onError;\r\n        },\r\n        set: function(f) {\r\n            this._onError = f;\r\n        }\r\n    });\r\n\r\n    ImageWorkerServerItem.prototype.start = function() {\r\n        this._xhr = new XMLHttpRequest();\r\n        this._xhr.open(\"GET\", this._src, true);\r\n        this._xhr.responseType = \"blob\";\r\n\r\n        var t = this;\r\n        this._xhr.onerror = function(oEvent) {\r\n            t.error({type: \"connection\", message: \"Connection error\"});\r\n        };\r\n\r\n        this._xhr.onload = function(oEvent) {\r\n            var blob = t._xhr.response;\r\n            t._mimeType = blob.type;\r\n\r\n            t._createImageBitmap(blob);\r\n        };\r\n\r\n        this._xhr.send();\r\n    };\r\n\r\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\r\n        var t = this;\r\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\r\n            t.finish({\r\n                imageBitmap,\r\n                hasAlphaChannel: t._hasAlphaChannel()\r\n            });\r\n        }).catch(function(e) {\r\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\r\n        });\r\n    };\r\n\r\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\r\n        if (ImageWorkerServer.isWPEBrowser()) {\r\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\r\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\r\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\r\n            return true;\r\n        } else {\r\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\r\n        }\r\n    };\r\n\r\n    ImageWorkerServerItem.prototype.cancel = function() {\r\n        if (this._canceled) return;\r\n        if (this._xhr) {\r\n            this._xhr.abort();\r\n        }\r\n        this._canceled = true;\r\n    };\r\n\r\n    ImageWorkerServerItem.prototype.error = function(type, message) {\r\n        if (!this._canceled && this._onError) {\r\n            this._onError({type, message});\r\n        }\r\n    };\r\n\r\n    ImageWorkerServerItem.prototype.finish = function(info) {\r\n        if (!this._canceled && this._onFinish) {\r\n            this._onFinish(info);\r\n        }\r\n    };\r\n\r\n    var worker = new ImageWorkerServer();\r\n};\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../../tree/Utils.mjs\";\r\nimport ImageWorker from \"./ImageWorker.mjs\";\r\n\r\n/**\r\n * Platform-specific functionality.\r\n */\r\nexport default class WebPlatform {\r\n\r\n    init(stage) {\r\n        this.stage = stage;\r\n        this._looping = false;\r\n        this._awaitingLoop = false;\r\n\r\n        // Alternative handler to avoid RAF when idle\r\n        this._loopHandler = null;\r\n        this._idleLoopCounter = 0;\r\n        this._idleLoopDelay = 60;\r\n\r\n        if (this.stage.getOption(\"useImageWorker\")) {\r\n            if (!window.createImageBitmap || !window.Worker) {\r\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\r\n            } else {\r\n                this._imageWorker = new ImageWorker();\r\n            }\r\n        }\r\n\r\n        this._registerVisibilityChangeHandler();\r\n    }\r\n\r\n    destroy() {\r\n        if (this._imageWorker) {\r\n            this._imageWorker.destroy();\r\n        }\r\n\r\n        clearInterval(this._loopHandler);\r\n\r\n        this._removeKeyHandler();\r\n        this._removeClickHandler();\r\n        this._removeHoverHandler();\r\n        this._removeScrollWheelHandler();\r\n        this._removeVisibilityChangeHandler();\r\n\r\n        this.stage = null;\r\n        delete this.stage;\r\n    }\r\n\r\n    startLoop() {\r\n        this._looping = true;\r\n        if (!this._awaitingLoop) {\r\n            this.loop();\r\n        }\r\n    }\r\n\r\n    stopLoop() {\r\n        this._looping = false;\r\n    }\r\n\r\n    switchLoop() {\r\n        if (this._idleLoopCounter < this._idleLoopDelay) {\r\n            this._idleLoopCounter++;\r\n            return;\r\n        }\r\n        if (!this.stage.ctx.hasRenderUpdates()) {\r\n            this.stopLoop();\r\n            this._loopHandler = setInterval(() => {\r\n                this.stage.updateFrame();\r\n                this.stage.idleFrame();\r\n                if (this.stage.ctx.hasRenderUpdates()) {\r\n                    clearInterval(this._loopHandler);\r\n                    this.startLoop();\r\n                };\r\n            }, 1000 / 60);\r\n        } else {\r\n            this._idleLoopCounter = 0;\r\n        }\r\n    }\r\n\r\n    loop() {\r\n        let self = this;\r\n        let lp = function () {\r\n            self._awaitingLoop = false;\r\n            if (self._looping) {\r\n                self.stage.updateFrame();\r\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\r\n                    self.switchLoop();\r\n                }\r\n                self.stage.renderFrame();\r\n                requestAnimationFrame(lp);\r\n                self._awaitingLoop = true;\r\n            }\r\n        }\r\n        requestAnimationFrame(lp);\r\n    }\r\n\r\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\r\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\r\n        gl.compressedTexImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            source.glInternalFormat,\r\n            source.pixelWidth,\r\n            source.pixelHeight,\r\n            0,\r\n            view,\r\n        )\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    uploadGlTexture(gl, textureSource, source, options) {\r\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\r\n            // Web-specific data types.\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\r\n        } else if (source instanceof HTMLCanvasElement) {\r\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\r\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\r\n            } else if (source.width > 0 && source.height > 0) {\r\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\r\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\r\n                const ctx = source.getContext('2d');\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\r\n            }\r\n        } else {\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * KTX File format specification\r\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\r\n     **/\r\n    handleKtxLoad(cb, src) {\r\n        var self = this;\r\n        return function () {\r\n            var arraybuffer = this.response;\r\n            var view = new DataView(arraybuffer);\r\n\r\n            // identifier, big endian\r\n            var targetIdentifier = 3632701469\r\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\r\n                cb('Parsing failed: identifier ktx mismatch:', src)\r\n            }\r\n\r\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\r\n            var data = {\r\n                glType: view.getUint32(16, littleEndian),\r\n                glTypeSize: view.getUint32(20, littleEndian),\r\n                glFormat: view.getUint32(24, littleEndian),\r\n                glInternalFormat: view.getUint32(28, littleEndian),\r\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\r\n                pixelWidth: view.getUint32(36, littleEndian),\r\n                pixelHeight: view.getUint32(40, littleEndian),\r\n                pixelDepth: view.getUint32(44, littleEndian),\r\n                numberOfArrayElements: view.getUint32(48, littleEndian),\r\n                numberOfFaces: view.getUint32(52, littleEndian),\r\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\r\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\r\n                kvps: [],\r\n                mipmaps: [],\r\n                get width() { return this.pixelWidth },\r\n                get height() { return this.pixelHeight },\r\n            };\r\n\r\n            const props = (obj) => {\r\n                const p = [];\r\n                for (let v in obj) {\r\n                    p.push(obj[v]);\r\n                }\r\n                return p;\r\n            }\r\n\r\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\r\n                .filter((obj) => obj != null)\r\n                .map((obj) => props(obj))\r\n                .reduce((prev, current) => prev.concat(current));\r\n\r\n            if (!formats.includes(data.glInternalFormat)) {\r\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\r\n            }\r\n\r\n            var offset = 64\r\n            // Key Value Pairs of data start at byte offset 64\r\n            // But the only known kvp is the API version, so skipping parsing.\r\n            offset += data.bytesOfKeyValueData;\r\n\r\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\r\n                var imageSize = view.getUint32(offset);\r\n                offset += 4;\r\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\r\n                offset += imageSize\r\n            }\r\n\r\n            cb(null, {\r\n                source: data,\r\n                renderInfo: { src: src, compressed: true },\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePvrLoad(cb, src) {\r\n        return function () {\r\n            // pvr header length in 32 bits\r\n            const pvrHeaderLength = 13;\r\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\r\n            const pvrFormatEtc1 = 0x8D64;\r\n            const pvrWidth = 7;\r\n            const pvrHeight = 6;\r\n            const pvrMipmapCount = 11;\r\n            const pvrMetadata = 12;\r\n            const arrayBuffer = this.response;\r\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\r\n            const dataOffset = header[pvrMetadata] + 52;\r\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n            var data = {\r\n                glInternalFormat: pvrFormatEtc1,\r\n                pixelWidth: header[pvrWidth],\r\n                pixelHeight: header[pvrHeight],\r\n                numberOfMipmapLevels: header[pvrMipmapCount],\r\n                mipmaps: [],\r\n                pvr: true,\r\n                get width() { return this.pixelWidth },\r\n                get height() { return this.pixelHeight },\r\n            };\r\n\r\n            let offset = 0\r\n            let width = data.pixelWidth;\r\n            let height = data.pixelHeight;\r\n\r\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\r\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\r\n                data.mipmaps.push(view);\r\n                offset += level;\r\n                width = width >> 1;\r\n                height = height >> 1;\r\n            }\r\n\r\n            cb(null, {\r\n                source: data,\r\n                renderInfo: { src: src, compressed: true },\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSrcTexture({ src, hasAlpha }, cb) {\r\n        let cancelCb = undefined;\r\n        let isPng = (src.toLowerCase().indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\r\n        // shahid splash service uses the type query param to determine the format.\r\n        let isKtx = src.indexOf('.ktx') >= 0 || src.indexOf('type=etc') >= 0;\r\n        let isPvr = src.indexOf('.pvr') >= 0;\r\n        if (isKtx || isPvr) {\r\n            let request = new XMLHttpRequest();\r\n            request.addEventListener(\r\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\r\n            );\r\n            request.open(\"GET\", src);\r\n            request.responseType = \"arraybuffer\";\r\n            request.send();\r\n            cancelCb = function () {\r\n                request.abort();\r\n            }\r\n        } else if (this._imageWorker) {\r\n            // WPE-specific image parser.\r\n            const image = this._imageWorker.create(src);\r\n            image.onError = function (err) {\r\n                return cb(\"Image load error\");\r\n            };\r\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\r\n                cb(null, {\r\n                    source: imageBitmap,\r\n                    renderInfo: { src: src, compressed: false },\r\n                    hasAlpha: hasAlphaChannel,\r\n                    premultiplyAlpha: true\r\n                });\r\n            };\r\n            cancelCb = function () {\r\n                image.cancel();\r\n            }\r\n        } else {\r\n            let image = new Image();\r\n\r\n            // On the PS4 platform setting the `crossOrigin` attribute on\r\n            // images can cause CORS failures.\r\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\r\n                // Base64.\r\n                image.crossOrigin = \"Anonymous\";\r\n            }\r\n            image.onerror = function (err) {\r\n                // Ignore error message when cancelled.\r\n                if (image.src) {\r\n                    return cb(\"Image load error\");\r\n                }\r\n            };\r\n            image.onload = function () {\r\n                cb(null, {\r\n                    source: image,\r\n                    renderInfo: { src: src, compressed: false },\r\n                    hasAlpha: isPng || hasAlpha\r\n                });\r\n            };\r\n            image.src = src;\r\n\r\n            cancelCb = function () {\r\n                image.onerror = null;\r\n                image.onload = null;\r\n                image.removeAttribute('src');\r\n            }\r\n        }\r\n\r\n        return cancelCb;\r\n    }\r\n\r\n    createWebGLContext(w, h) {\r\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\r\n\r\n        if (w && h) {\r\n            canvas.width = w;\r\n            canvas.height = h;\r\n        }\r\n\r\n        let opts = {\r\n            alpha: true,\r\n            antialias: false,\r\n            premultipliedAlpha: true,\r\n            stencil: true,\r\n            preserveDrawingBuffer: false\r\n        };\r\n\r\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts) || canvas.getContext('webgl2', opts);\r\n\r\n        if (!gl) {\r\n            throw new Error('This browser does not support webGL.');\r\n        }\r\n\r\n        return gl;\r\n    }\r\n\r\n    createCanvasContext(w, h) {\r\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\r\n\r\n        if (w && h) {\r\n            canvas.width = w;\r\n            canvas.height = h;\r\n        }\r\n\r\n        let c2d = canvas.getContext('2d');\r\n        if (!c2d) {\r\n            throw new Error('This browser does not support 2d canvas.');\r\n        }\r\n\r\n        return c2d;\r\n    }\r\n\r\n    getHrTime() {\r\n        return window.performance ? window.performance.now() : (new Date()).getTime();\r\n    }\r\n\r\n    getDrawingCanvas() {\r\n        // We can't reuse this canvas because textures may load async.\r\n        return document.createElement('canvas');\r\n    }\r\n\r\n    getTextureOptionsForDrawingCanvas(canvas) {\r\n        let options = {};\r\n        options.source = canvas;\r\n        return options;\r\n    }\r\n\r\n    nextFrame(changes) {\r\n        /* WebGL blits automatically */\r\n    }\r\n\r\n    registerKeydownHandler(keyhandler) {\r\n        this._keydownListener = (e) => {\r\n            keyhandler(e);\r\n        };\r\n        window.addEventListener('keydown', this._keydownListener);\r\n    }\r\n\r\n    registerKeyupHandler(keyhandler) {\r\n        this._keyupListener = (e) => {\r\n            keyhandler(e);\r\n        };\r\n        window.addEventListener('keyup', this._keyupListener);\r\n    }\r\n\r\n    _removeKeyHandler() {\r\n        if (this._keydownListener) {\r\n            window.removeEventListener('keydown', this._keydownListener);\r\n        }\r\n\r\n        if (this._keyupListener) {\r\n            window.removeEventListener('keyup', this._keyupListener);\r\n        }\r\n    }\r\n\r\n    registerClickHandler(clickHandler) {\r\n        this._clickListener = e => {\r\n            clickHandler(e);\r\n        };\r\n        window.addEventListener('mousedown', this._clickListener);\r\n    }\r\n\r\n    _removeClickHandler() {\r\n        if (this._clickListener) {\r\n            window.removeEventListener('mousedown', this._clickListener);\r\n        }\r\n    }\r\n\r\n    registerHoverHandler(hoverHandler) {\r\n        this._hoverListener = e => {\r\n            hoverHandler(e);\r\n        };\r\n        window.addEventListener('mousemove', this._hoverListener);\r\n    }\r\n\r\n    _removeHoverHandler() {\r\n        if (this._hoverListener) {\r\n            window.removeEventListener('mousemove', this._hoverListener);\r\n        }\r\n    }\r\n\r\n    registerScrollWheelHandler(registerScrollWheelHandler) {\r\n        this._scrollWheelListener = e => {\r\n            registerScrollWheelHandler(e);\r\n        }\r\n        window.addEventListener('wheel', this._scrollWheelListener);\r\n    }\r\n\r\n    _removeScrollWheelHandler() {\r\n        if (this._scrollWheelListener) {\r\n            window.removeEventListener('wheel', this._scrollWheelListener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\r\n     */\r\n    _registerVisibilityChangeHandler() {\r\n        this._visibilityChangeHandler = () => {\r\n            if (document.visibilityState === 'visible') {\r\n                this.stage.root.core.setHasRenderUpdates(2);\r\n                this.stage.renderFrame();\r\n            }\r\n        }\r\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\r\n    }\r\n\r\n    _removeVisibilityChangeHandler() {\r\n        if (this._visibilityChangeHandler) {\r\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\r\n\r\nexport default class PlatformLoader {\r\n    static load(options) {\r\n        if (options.platform) {\r\n            return options.platform;\r\n        } else {\r\n            return WebPlatform;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass Utils {\r\n\r\n    static isFunction(value) {\r\n        return typeof value === 'function';\r\n    }\r\n\r\n    static isNumber(value) {\r\n        return typeof value === 'number';\r\n    }\r\n\r\n    static isInteger(value) {\r\n        return (typeof value === 'number' && (value % 1) === 0);\r\n    }\r\n\r\n    static isBoolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n\r\n    static isString(value) {\r\n        return typeof value == 'string';\r\n    }\r\n\r\n    static isObject(value) {\r\n        let type = typeof value;\r\n        return !!value && (type == 'object' || type == 'function');\r\n    }\r\n\r\n    static isPlainObject(value) {\r\n        let type = typeof value;\r\n        return !!value && (type == 'object');\r\n    }\r\n\r\n    static isObjectLiteral(value){\r\n        return typeof value === 'object' && value && value.constructor === Object\r\n    }\r\n\r\n    static getArrayIndex(index, arr) {\r\n        return Utils.getModuloIndex(index, arr.length);\r\n    }\r\n\r\n    static equalValues(v1, v2) {\r\n        if ((typeof v1) !== (typeof v2)) return false\r\n        if (Utils.isObjectLiteral(v1)) {\r\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\r\n        } else if (Array.isArray(v1)) {\r\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\r\n        } else {\r\n            return v1 === v2\r\n        }\r\n    }\r\n\r\n    static equalObjectLiterals(obj1, obj2) {\r\n        let keys1 = Object.keys(obj1);\r\n        let keys2 = Object.keys(obj2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false\r\n        }\r\n\r\n        for (let i = 0, n = keys1.length; i < n; i++) {\r\n            const k1 = keys1[i];\r\n            const k2 = keys2[i];\r\n            if (k1 !== k2) {\r\n                return false\r\n            }\r\n\r\n            const v1 = obj1[k1];\r\n            const v2 = obj2[k2];\r\n\r\n            if (!Utils.equalValues(v1, v2)) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    static equalArrays(v1, v2) {\r\n        if (v1.length !== v2.length) {\r\n            return false\r\n        }\r\n        for (let i = 0, n = v1.length; i < n; i++) {\r\n            if (!this.equalValues(v1[i], v2[i])) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Maintains the state of a WebGLRenderingContext.\r\n */\r\nclass WebGLState {\r\n\r\n    constructor(id, gl) {\r\n        this._id = id;\r\n        this._gl = gl;\r\n        this._program = undefined;\r\n        this._buffers = new Map();\r\n        this._framebuffers = new Map();\r\n        this._renderbuffers = new Map();\r\n\r\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\r\n        this._vertexAttribs = new Array(16);\r\n        this._nonDefaultFlags = new Set();\r\n        this._settings = new Map();\r\n        this._textures = new Array(8);\r\n        this._maxTexture = 0;\r\n        this._activeTexture = gl.TEXTURE0;\r\n        this._pixelStorei = new Array(5);\r\n    }\r\n\r\n    _getDefaultFlag(cap) {\r\n        return (cap === this._gl.DITHER);\r\n    }\r\n\r\n    setFlag(cap, v) {\r\n        const def = this._getDefaultFlag(cap);\r\n        if (v === def) {\r\n            return this._nonDefaultFlags.delete(cap);\r\n        } else {\r\n            if (!this._nonDefaultFlags.has(cap)) {\r\n                this._nonDefaultFlags.add(cap);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    setBuffer(target, buffer) {\r\n        const change = this._buffers.get(target) !== buffer;\r\n        this._buffers.set(target, buffer);\r\n\r\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\r\n            // When the array buffer is changed all attributes are cleared.\r\n            this._vertexAttribs = [];\r\n        }\r\n\r\n        return change;\r\n    }\r\n\r\n    setFramebuffer(target, buffer) {\r\n        const change = this._framebuffers.get(target) !== buffer;\r\n        this._framebuffers.set(target, buffer);\r\n        return change;\r\n    }\r\n\r\n    setRenderbuffer(target, buffer) {\r\n        const change = this._renderbuffers.get(target) !== buffer;\r\n        this._renderbuffers.set(target, buffer);\r\n        return change;\r\n    }\r\n\r\n    setProgram(program) {\r\n        const change = this._program !== program;\r\n        this._program = program;\r\n        return change\r\n    }\r\n\r\n    setSetting(func, v) {\r\n        const s = this._settings.get(func);\r\n        const change = !s || !Utils.equalValues(s, v);\r\n        this._settings.set(func, v);\r\n        return change\r\n    }\r\n\r\n    disableVertexAttribArray(index) {\r\n        const va = this._vertexAttribs[index];\r\n        if (va && va[5]) {\r\n            va[5] = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    enableVertexAttribArray(index) {\r\n        const va = this._vertexAttribs[index];\r\n        if (va) {\r\n            if (!va[0]) {\r\n                va[0] = true;\r\n                return true;\r\n            }\r\n        } else {\r\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    vertexAttribPointer(index, props) {\r\n        let va = this._vertexAttribs[index];\r\n        let equal = false;\r\n        if (va) {\r\n            equal = va[0] === props[0] &&\r\n                va[1] === props[1] &&\r\n                va[2] === props[2] &&\r\n                va[3] === props[3] &&\r\n                va[4] === props[4];\r\n        }\r\n\r\n        if (equal) {\r\n            return false;\r\n        } else {\r\n            props[5] = va ? va[5] : false;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    setActiveTexture(texture) {\r\n        const changed = this._activeTexture !== texture;\r\n        this._activeTexture = texture;\r\n        return changed;\r\n    }\r\n\r\n    bindTexture(target, texture) {\r\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\r\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\r\n        const current = this._textures[activeIndex];\r\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\r\n        if (current) {\r\n            if (current[targetIndex] === texture) {\r\n                return false;\r\n            }\r\n            current[targetIndex] = texture;\r\n            return true;\r\n        } else {\r\n            if (texture) {\r\n                this._textures[activeIndex] = [];\r\n                this._textures[activeIndex][targetIndex] = texture;\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    setPixelStorei(pname, param) {\r\n        const i = WebGLState._getPixelStoreiIndex(pname);\r\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\r\n        this._pixelStorei[i] = param;\r\n        return change;\r\n    }\r\n\r\n    migrate(s) {\r\n        const t = this;\r\n\r\n        // Warning: migrate should call the original prototype methods directly.\r\n\r\n        this._migrateFlags(t, s);\r\n\r\n        // useProgram\r\n        if (s._program !== t._program) {\r\n            this._gl._useProgram(s._program);\r\n        }\r\n\r\n        this._migrateFramebuffers(t, s);\r\n        this._migrateRenderbuffers(t, s);\r\n\r\n        const buffersChanged = this._migrateBuffers(t, s);\r\n        this._migrateAttributes(t, s, buffersChanged);\r\n\r\n        this._migrateFlags(t, s);\r\n\r\n        this._migrateSettings(t, s);\r\n\r\n        this._migratePixelStorei(t, s);\r\n        \r\n        this._migrateTextures(t, s);\r\n        \r\n    }\r\n\r\n    _migratePixelStorei(t, s) {\r\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\r\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\r\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\r\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\r\n            }\r\n        }\r\n    }\r\n\r\n    _migrateTextures(t, s) {\r\n        const max = Math.max(t._maxTexture, s._maxTexture);\r\n\r\n        let activeTexture = t._activeTexture;\r\n\r\n        for (let i = 0; i < max; i++) {\r\n            const sTargets = s._textures[i];\r\n            const tTargets = t._textures[i];\r\n            const textureNumb = WebGLState._getTextureByIndex(i);\r\n\r\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\r\n            for (let j = 0, n = targetMax; j < n; j++) {\r\n                const target = WebGLState._getTextureTargetByIndex(j);\r\n                if (activeTexture !== textureNumb) {\r\n                    this._gl._activeTexture(textureNumb);\r\n                    activeTexture = textureNumb;\r\n                }\r\n\r\n                const texture = (sTargets && sTargets[j]) || null;\r\n                this._gl._bindTexture(target, texture);\r\n            }\r\n        }\r\n\r\n        if (s._activeTexture !== activeTexture) {\r\n            this._gl._activeTexture(s._activeTexture);\r\n        }\r\n    }\r\n\r\n    _migrateBuffers(t, s) {\r\n        s._buffers.forEach((framebuffer, target) => {\r\n            if (t._buffers.get(target) !== framebuffer) {\r\n                this._gl._bindBuffer(target, framebuffer);\r\n            }\r\n        });\r\n\r\n        t._buffers.forEach((buffer, target) => {\r\n            const b = s._buffers.get(target);\r\n            if (b === undefined) {\r\n                this._gl._bindBuffer(target, null);\r\n            }\r\n        });\r\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\r\n    }\r\n\r\n    _migrateFramebuffers(t, s) {\r\n        s._framebuffers.forEach((framebuffer, target) => {\r\n            if (t._framebuffers.get(target) !== framebuffer) {\r\n                this._gl._bindFramebuffer(target, framebuffer);\r\n            }\r\n        });\r\n\r\n        t._framebuffers.forEach((framebuffer, target) => {\r\n            const fb = s._framebuffers.get(target);\r\n            if (fb === undefined) {\r\n                this._gl._bindFramebuffer(target, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    _migrateRenderbuffers(t, s) {\r\n        s._renderbuffers.forEach((renderbuffer, target) => {\r\n            if (t._renderbuffers.get(target) !== renderbuffer) {\r\n                this._gl._bindRenderbuffer(target, renderbuffer);\r\n            }\r\n        });\r\n\r\n        t._renderbuffers.forEach((renderbuffer, target) => {\r\n            const fb = s._renderbuffers.get(target);\r\n            if (fb === undefined) {\r\n                this._gl._bindRenderbuffer(target, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    _migrateAttributes(t, s, buffersChanged) {\r\n\r\n        if (!buffersChanged) {\r\n            t._vertexAttribs.forEach((attrib, index) => {\r\n                if (!s._vertexAttribs[index]) {\r\n                    // We can't 'delete' a vertex attrib so we'll disable it.\r\n                    this._gl._disableVertexAttribArray(index);\r\n                }\r\n            });\r\n\r\n            s._vertexAttribs.forEach((attrib, index) => {\r\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\r\n                if (attrib[5]) {\r\n                    this._gl._enableVertexAttribArray(index);\r\n                } else {\r\n                    this._gl._disableVertexAttribArray(index);\r\n                }\r\n            });\r\n        } else {\r\n            // When buffers are changed, previous attributes were reset automatically.\r\n            s._vertexAttribs.forEach((attrib, index) => {\r\n                if (attrib[0]) {\r\n                    // Do not set vertex attrib pointer when it was just the default value.\r\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\r\n                }\r\n                if (attrib[5]) {\r\n                    this._gl._enableVertexAttribArray(index);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    _migrateSettings(t, s) {\r\n        const defaults = this.constructor.getDefaultSettings();\r\n        t._settings.forEach((value, func) => {\r\n            const name = func.name || func.xname;\r\n            if (!s._settings.has(func)) {\r\n                let args = defaults.get(name);\r\n                if (Utils.isFunction(args)) {\r\n                    args = args(this._gl);\r\n                }\r\n                // We are actually setting the setting for optimization purposes.\r\n                s._settings.set(func, args);\r\n                func.apply(this._gl, args);\r\n            }\r\n        });\r\n        s._settings.forEach((value, func) => {\r\n            const tValue = t._settings.get(func);\r\n            if (!tValue || !Utils.equalValues(tValue, value)) {\r\n                func.apply(this._gl, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    _migrateFlags(t, s) {\r\n        t._nonDefaultFlags.forEach(setting => {\r\n            if (!s._nonDefaultFlags.has(setting)) {\r\n                if (this._getDefaultFlag(setting)) {\r\n                    this._gl._enable(setting);\r\n                } else {\r\n                    this._gl._disable(setting);\r\n                }\r\n            }\r\n        });\r\n        s._nonDefaultFlags.forEach(setting => {\r\n            if (!t._nonDefaultFlags.has(setting)) {\r\n                if (this._getDefaultFlag(setting)) {\r\n                    this._gl._disable(setting);\r\n                } else {\r\n                    this._gl._enable(setting);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static getDefaultSettings() {\r\n        if (!this._defaultSettings) {\r\n            this._defaultSettings = new Map();\r\n            const d = this._defaultSettings;\r\n            const g = WebGLRenderingContext.prototype;\r\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\r\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\r\n            d.set(\"blendColor\", [0, 0, 0, 0]);\r\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\r\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\r\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\r\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\r\n            d.set(\"clearColor\", [0, 0, 0, 0]);\r\n            d.set(\"clearDepth\", [1]);\r\n            d.set(\"clearStencil\", [0]);\r\n            d.set(\"colorMask\", [true, true, true, true]);\r\n            d.set(\"cullFace\", [g.BACK]);\r\n            d.set(\"depthFunc\", [g.LESS]);\r\n            d.set(\"depthMask\", [true]);\r\n            d.set(\"depthRange\", [0, 1]);\r\n            d.set(\"frontFace\", [g.CCW]);\r\n            d.set(\"lineWidth\", [1]);\r\n            d.set(\"polygonOffset\", [0, 0]);\r\n            d.set(\"sampleCoverage\", [1, false]);\r\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\r\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\r\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\r\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\r\n            d.set(\"stencilMask\", [1]);\r\n            d.set(\"_stencilMaskSeparateFront\", [1]);\r\n            d.set(\"_stencilMaskSeparateBack\", [1]);\r\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\r\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\r\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\r\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\r\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\r\n            d.set(\"vertexAttrib1f\", []);\r\n            d.set(\"vertexAttrib1fv\", []);\r\n            d.set(\"vertexAttrib2f\", []);\r\n            d.set(\"vertexAttrib2fv\", []);\r\n            d.set(\"vertexAttrib3f\", []);\r\n            d.set(\"vertexAttrib3fv\", []);\r\n            d.set(\"vertexAttrib4f\", []);\r\n            d.set(\"vertexAttrib4fv\", []);\r\n        }\r\n        return this._defaultSettings\r\n    }\r\n\r\n    static _getTextureTargetIndex(target) {\r\n        switch(target) {\r\n            case 0x0DE1:\r\n                /* TEXTURE_2D */\r\n                return 0;\r\n            case 0x8513:\r\n                /* TEXTURE_CUBE_MAP */\r\n                return 1;\r\n            default:\r\n                // Shouldn't happen.\r\n                throw new Error('Unknown texture target: ' + target);\r\n        }\r\n    }\r\n\r\n    static _getTextureTargetByIndex(index) {\r\n        if (!this._textureTargetIndices) {\r\n            this._textureTargetIndices = [0x0DE1, 0x8513];\r\n        }\r\n        return this._textureTargetIndices[index]\r\n    }\r\n\r\n    static _getTextureIndex(index) {\r\n        return index - 0x84C0 /* GL_TEXTURE0 */;\r\n    }\r\n\r\n    static _getTextureByIndex(index) {\r\n        return index + 0x84C0;\r\n    }\r\n\r\n    static _getPixelStoreiIndex(pname) {\r\n        switch(pname) {\r\n            case 0x0D05:\r\n                /* PACK_ALIGNMENT */\r\n                return 0;\r\n            case 0x0CF5:\r\n                /* UNPACK_ALIGNMENT */\r\n                return 1;\r\n            case 0x9240:\r\n                /* UNPACK_FLIP_Y_WEBGL */\r\n                return 2;\r\n            case 0x9241:\r\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\r\n                return 3;\r\n            case 0x9243:\r\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\r\n                return 4;\r\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\r\n            case 0x9245:\r\n                /* UNPACK_FLIP_BLUE_RED */\r\n                return 5;\r\n            default:\r\n                // Shouldn't happen.\r\n                throw new Error('Unknown pixelstorei: ' + pname);\r\n        }\r\n    }\r\n\r\n    static _getPixelStoreiByIndex(index) {\r\n        if (!this._pixelStoreiIndices) {\r\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\r\n        }\r\n        return this._pixelStoreiIndices[index]\r\n    }\r\n\r\n    static _getDefaultPixelStoreiByIndex(index) {\r\n        if (!this._pixelStoreiDefaults) {\r\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\r\n        }\r\n        return this._pixelStoreiDefaults[index]\r\n    }\r\n}\r\n\r\nclass WebGLStateManager {\r\n\r\n    _initStateManager(id = \"default\") {\r\n        this._states = {};\r\n        this._state = this._getState(id);\r\n    }\r\n\r\n    _getState(id) {\r\n        if (!this._states[id]) {\r\n            this._states[id] = new WebGLState(id, this);\r\n        }\r\n        return this._states[id];\r\n    }\r\n\r\n    switchState(id = \"default\") {\r\n        if (this._state._id !== id) {\r\n            const newState = this._getState(id);\r\n            this._state.migrate(newState);\r\n            this._state = newState;\r\n        }\r\n    }\r\n\r\n    $useProgram(program) {\r\n        if (this._state.setProgram(program))\r\n            this._useProgram(program);\r\n    }\r\n\r\n    $bindBuffer(target, fb) {\r\n        if (this._state.setBuffer(target, fb))\r\n            this._bindBuffer(target, fb);\r\n    }\r\n\r\n    $bindFramebuffer(target, fb) {\r\n        if (this._state.setFramebuffer(target, fb))\r\n            this._bindFramebuffer(target, fb);\r\n    }\r\n\r\n    $bindRenderbuffer(target, fb) {\r\n        if (this._state.setRenderbuffer(target, fb))\r\n            this._bindRenderbuffer(target, fb);\r\n    }\r\n\r\n    $enable(cap) {\r\n        if (this._state.setFlag(cap, true))\r\n            this._enable(cap);\r\n    }\r\n\r\n    $disable(cap) {\r\n        if (this._state.setFlag(cap, false))\r\n            this._disable(cap);\r\n    }\r\n\r\n    $viewport(x, y, w, h) {\r\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\r\n            this._viewport(x, y, w, h);\r\n    }\r\n\r\n    $scissor(x, y, w, h) {\r\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\r\n            this._scissor(x, y, w, h);\r\n    }\r\n\r\n    $disableVertexAttribArray(index) {\r\n        if (this._state.disableVertexAttribArray(index))\r\n            this._disableVertexAttribArray(index);\r\n    }\r\n\r\n    $enableVertexAttribArray(index) {\r\n        if (this._state.enableVertexAttribArray(index))\r\n            this._enableVertexAttribArray(index);\r\n    }\r\n\r\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\r\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\r\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\r\n    }\r\n\r\n    $activeTexture(texture) {\r\n        if (this._state.setActiveTexture(texture))\r\n            this._activeTexture(texture);\r\n    }\r\n\r\n    $bindTexture(target, texture) {\r\n        if (this._state.bindTexture(target, texture))\r\n            this._bindTexture(target, texture);\r\n    }\r\n\r\n    $pixelStorei(pname, param) {\r\n        if (this._state.setPixelStorei(pname, param)) {\r\n            this._pixelStorei(pname, param);\r\n        }\r\n    }\r\n\r\n    $stencilFuncSeparate(face, func, ref, mask) {\r\n        let f;\r\n        switch(face) {\r\n            case this.FRONT:\r\n                f = this._stencilFuncSeparateFront;\r\n                break;\r\n            case this.BACK:\r\n                f = this._stencilFuncSeparateBack;\r\n                break;\r\n            case this.FRONT_AND_BACK:\r\n                f = this._stencilFuncSeparateFrontAndBack;\r\n                break;\r\n        }\r\n\r\n        if (this._state.setSetting(f, [func, ref, mask]))\r\n            f.apply(this, [func, ref, mask]);\r\n    }\r\n\r\n    _stencilFuncSeparateFront(func, ref, mask) {\r\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\r\n    }\r\n\r\n    _stencilFuncSeparateBack(func, ref, mask) {\r\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\r\n    }\r\n\r\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\r\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\r\n    }\r\n\r\n    $stencilMaskSeparate(face, mask) {\r\n        let f;\r\n        switch(face) {\r\n            case this.FRONT:\r\n                f = this._stencilMaskSeparateFront;\r\n                break;\r\n            case this.BACK:\r\n                f = this._stencilMaskSeparateBack;\r\n                break;\r\n            case this.FRONT_AND_BACK:\r\n                f = this._stencilMaskSeparateFrontAndBack;\r\n                break;\r\n        }\r\n\r\n        if (this._state.setSetting(f, [mask]))\r\n            f.apply(this, [mask]);\r\n    }\r\n\r\n    _stencilMaskSeparateFront(mask) {\r\n        this._stencilMaskSeparate(this.FRONT, mask);\r\n    }\r\n\r\n    _stencilMaskSeparateBack(mask) {\r\n        this._stencilMaskSeparate(this.BACK, mask);\r\n    }\r\n\r\n    _stencilMaskSeparateFrontAndBack(mask) {\r\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\r\n    }\r\n\r\n    $stencilOpSeparate(face, fail, zfail, zpass) {\r\n        let f;\r\n        switch(face) {\r\n            case this.FRONT:\r\n                f = this._stencilOpSeparateFront;\r\n                break;\r\n            case this.BACK:\r\n                f = this._stencilOpSeparateBack;\r\n                break;\r\n            case this.FRONT_AND_BACK:\r\n                f = this._stencilOpSeparateFrontAndBack;\r\n                break;\r\n        }\r\n\r\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\r\n            f.apply(this, [fail, zfail, zpass]);\r\n    }\r\n\r\n    _stencilOpSeparateFront(fail, zfail, zpass) {\r\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\r\n    }\r\n\r\n    _stencilOpSeparateBack(fail, zfail, zpass) {\r\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\r\n    }\r\n\r\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\r\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\r\n    }\r\n\r\n    $blendColor(red, green, blue, alpha) {\r\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\r\n            this._blendColor(red, green, blue, alpha);\r\n    }\r\n\r\n    $blendEquation(mode) {\r\n        if (this._state.setSetting(this._blendEquation, [mode]))\r\n            this._blendEquation(mode);\r\n    }\r\n\r\n    $blendEquationSeparate(modeRGB, modeAlpha) {\r\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\r\n            this._blendEquationSeparate(modeRGB, modeAlpha);\r\n    }\r\n\r\n    $blendFunc(sfactor, dfactor) {\r\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\r\n            this._blendFunc(sfactor, dfactor);\r\n    }\r\n\r\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\r\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\r\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n    }\r\n\r\n    $clearColor(red, green, blue, alpha) {\r\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\r\n            this._clearColor(red, green, blue, alpha);\r\n    }\r\n\r\n    $clearDepth(depth) {\r\n        if (this._state.setSetting(this._clearDepth, [depth]))\r\n            this._clearDepth(depth);\r\n    }\r\n\r\n    $clearStencil(s) {\r\n        if (this._state.setSetting(this._clearStencil, [s]))\r\n            this._clearStencil(s);\r\n    }\r\n\r\n    $colorMask(red, green, blue, alpha) {\r\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\r\n            this._colorMask(red, green, blue, alpha);\r\n    }\r\n\r\n    $cullFace(mode) {\r\n        if (this._state.setSetting(this._cullFace, [mode]))\r\n            this._cullFace(mode);\r\n    }\r\n\r\n    $depthFunc(func) {\r\n        if (this._state.setSetting(this._depthFunc, [func]))\r\n            this._depthFunc(func);\r\n    }\r\n\r\n    $depthMask(flag) {\r\n        if (this._state.setSetting(this._depthMask, [flag]))\r\n            this._depthMask(flag);\r\n    }\r\n\r\n    $depthRange(zNear, zFar) {\r\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\r\n            this._depthRange(zNear, zFar);\r\n    }\r\n\r\n    $frontFace(mode) {\r\n        if (this._state.setSetting(this._frontFace, [mode]))\r\n            this._frontFace(mode);\r\n    }\r\n\r\n    $lineWidth(width) {\r\n        if (this._state.setSetting(this._lineWidth, [width]))\r\n            this._lineWidth(width);\r\n    }\r\n\r\n    $polygonOffset(factor, units) {\r\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\r\n            this._polygonOffset(factor, units);\r\n    }\r\n\r\n    $sampleCoverage(value, invert) {\r\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\r\n            this._sampleCoverage(value, invert);\r\n    }\r\n\r\n    $stencilFunc(func, ref, mask) {\r\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\r\n            this._stencilFunc(func, ref, mask);\r\n    }\r\n\r\n    $stencilMask(mask) {\r\n        if (this._state.setSetting(this._stencilMask, [mask]))\r\n            this._stencilMask(mask);\r\n    }\r\n\r\n    $stencilOp(fail, zfail, zpass) {\r\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\r\n            this._stencilOp(fail, zfail, zpass);\r\n    }\r\n\r\n    $vertexAttrib1f(indx, x) {\r\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\r\n            this._vertexAttrib1f(indx, x);\r\n    }\r\n\r\n    $vertexAttrib1fv(indx, values) {\r\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\r\n            this._vertexAttrib1fv(indx, values);\r\n    }\r\n\r\n    $vertexAttrib2f(indx, x, y) {\r\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\r\n            this._vertexAttrib2f(indx, x, y);\r\n    }\r\n\r\n    $vertexAttrib2fv(indx, values) {\r\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\r\n            this._vertexAttrib2fv(indx, values);\r\n    }\r\n\r\n    $vertexAttrib3f(indx, x, y, z) {\r\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\r\n            this._vertexAttrib3f(indx, x, y, z);\r\n    }\r\n\r\n    $vertexAttrib3fv(indx, values) {\r\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\r\n            this._vertexAttrib3fv(indx, values);\r\n    }\r\n\r\n    $vertexAttrib4f(indx, x, y, z, w) {\r\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\r\n            this._vertexAttrib4f(indx, x, y, z, w);\r\n    }\r\n\r\n    $vertexAttrib4fv(indx, values) {\r\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\r\n            this._vertexAttrib4fv(indx, values);\r\n    }\r\n\r\n    /**\r\n     * Sets up the rendering context for context sharing.\r\n     * @param {WebGLRenderingContext} gl\r\n     * @param {string} id\r\n     */\r\n    static enable(gl, id = \"default\") {\r\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\r\n        const WebGLRenderingContextProto = gl.__proto__;\r\n        names.forEach(name => {\r\n            if (name !== \"constructor\") {\r\n                const method = WebGLStateManager.prototype[name];\r\n                if (name.charAt(0) === \"$\") {\r\n                    name = name.substr(1);\r\n                }\r\n                if (gl[name] !== method) {\r\n                    if (gl[name]) {\r\n                        if (!gl[name].name) {\r\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\r\n                            gl[name].xname = name;\r\n                        }\r\n                        gl['_' + name] = gl[name];\r\n                    }\r\n                    gl[name] = method;\r\n                }\r\n            }\r\n        });\r\n\r\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\r\n\r\n        return gl;\r\n    }\r\n\r\n}\r\n\r\nexport default WebGLStateManager;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport TextureSource from \"./TextureSource.mjs\";\r\nimport Stage from './Stage.mjs';\r\n\r\nexport default class TextureManager {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        /**\r\n         * The currently used amount of texture memory.\r\n         * @type {number}\r\n         */\r\n        this._usedMemory = 0;\r\n\r\n        /**\r\n         * All uploaded texture sources.\r\n         * @type {TextureSource[]}\r\n         */\r\n        this._uploadedTextureSources = [];\r\n\r\n        /**\r\n         * The texture source lookup id to texture source hashmap.\r\n         * @type {Map<String, TextureSource>}\r\n         */\r\n        this.textureSourceHashmap = new Map();\r\n\r\n    }\r\n\r\n    get usedMemory() {\r\n        return this._usedMemory;\r\n    }\r\n\r\n    destroy() {\r\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\r\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\r\n        }\r\n        \r\n        this.textureSourceHashmap.clear();\r\n        this._usedMemory = 0;\r\n    }\r\n\r\n    getReusableTextureSource(id) {\r\n        return this.textureSourceHashmap.get(id);\r\n    }\r\n\r\n    getTextureSource(func, id) {\r\n        // Check if texture source is already known.\r\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\r\n        if (!textureSource) {\r\n            // Create new texture source.\r\n            textureSource = new TextureSource(this, func);\r\n\r\n            if (id) {\r\n                textureSource.lookupId = id;\r\n                this.textureSourceHashmap.set(id, textureSource);\r\n            }\r\n        }\r\n\r\n        return textureSource;\r\n    }\r\n\r\n    uploadTextureSource(textureSource, options) {\r\n        if (textureSource.isLoaded()) return;\r\n\r\n        this._addMemoryUsage(textureSource.w * textureSource.h);\r\n\r\n        // Load texture.\r\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\r\n\r\n        textureSource._nativeTexture = nativeTexture;\r\n\r\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\r\n        nativeTexture.w = textureSource.w;\r\n        nativeTexture.h = textureSource.h;\r\n\r\n        nativeTexture.update = this.stage.frameCounter;\r\n\r\n        this._uploadedTextureSources.push(textureSource);\r\n        \r\n        this.addToLookupMap(textureSource);\r\n\r\n        // add VRAM tracking if using the webgl renderer\r\n        this._updateVramUsage(textureSource, 1);\r\n    }\r\n\r\n    _addMemoryUsage(delta) {\r\n        this._usedMemory += delta;\r\n        this.stage.addMemoryUsage(delta);\r\n    }\r\n\r\n    _updateVramUsage(textureSource, sign) {\r\n        const nativeTexture = textureSource.nativeTexture;\r\n        var usage;\r\n\r\n        // do nothing if webgl isn't even supported\r\n        if (!Stage.isWebglSupported())\r\n            return;\r\n\r\n        // or if there is no native texture\r\n        if (!textureSource.isLoaded())\r\n            return;\r\n\r\n        // or, finally, if there is no bytes per pixel specified\r\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\r\n            return;\r\n\r\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\r\n\r\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\r\n    }\r\n\r\n    addToLookupMap(textureSource) {\r\n        const lookupId = textureSource.lookupId;\r\n        if (lookupId) {\r\n            if (!this.textureSourceHashmap.has(lookupId)) {\r\n                this.textureSourceHashmap.set(lookupId, textureSource);\r\n            }\r\n        }\r\n    }\r\n\r\n    gc() {\r\n        this.freeUnusedTextureSources();\r\n        this._cleanupLookupMap();\r\n    }\r\n    \r\n    freeUnusedTextureSources() {\r\n        let remainingTextureSources = [];\r\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\r\n            let ts = this._uploadedTextureSources[i];\r\n            if (ts.allowCleanup()) {\r\n                this._freeManagedTextureSource(ts);\r\n            } else {\r\n                remainingTextureSources.push(ts);\r\n            }\r\n        }\r\n\r\n        this._uploadedTextureSources = remainingTextureSources;\r\n\r\n        this._cleanupLookupMap();\r\n    }\r\n\r\n    _freeManagedTextureSource(textureSource) {\r\n        if (textureSource.isLoaded()) {\r\n            this._nativeFreeTextureSource(textureSource);\r\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\r\n\r\n            // add VRAM tracking if using the webgl renderer\r\n            this._updateVramUsage(textureSource, -1);\r\n        }\r\n\r\n        // Should be reloaded.\r\n        textureSource.loadingSince = null;\r\n    }\r\n\r\n    _cleanupLookupMap() {\r\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\r\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\r\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\r\n                this.textureSourceHashmap.delete(lookupId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Externally free texture source.\r\n     * @param textureSource\r\n     */\r\n    freeTextureSource(textureSource) {\r\n        const index = this._uploadedTextureSources.indexOf(textureSource);\r\n        const managed = (index !== -1);\r\n\r\n        if (textureSource.isLoaded()) {\r\n            if (managed) {\r\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\r\n                this._uploadedTextureSources.splice(index, 1);\r\n            }\r\n            this._nativeFreeTextureSource(textureSource);\r\n        }\r\n\r\n        // Should be reloaded.\r\n        textureSource.loadingSince = null;\r\n    }\r\n\r\n    _nativeUploadTextureSource(textureSource, options) {\r\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\r\n    }\r\n\r\n    _nativeFreeTextureSource(textureSource) {\r\n        this.stage.renderer.freeTextureSource(textureSource);\r\n        textureSource.clearNativeTexture();\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Allows throttling of loading texture sources, keeping the app responsive.\r\n */\r\nexport default class TextureThrottler {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.genericCancelCb = (textureSource) => {\r\n            this._remove(textureSource);\r\n        };\r\n\r\n        this._sources = [];\r\n        this._data = [];\r\n    }\r\n\r\n    destroy() {\r\n        this._sources = [];\r\n        this._data = [];\r\n        this.stage = null;\r\n\r\n        delete this._sources;\r\n        delete this._data;\r\n        delete this.stage;\r\n    }\r\n\r\n    processSome() {\r\n        if (this._sources.length) {\r\n            const start = Date.now();\r\n            do {\r\n                this._processItem();\r\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\r\n        }\r\n    }\r\n\r\n    _processItem() {\r\n        const source = this._sources.pop();\r\n        const data = this._data.pop();\r\n        if (source.isLoading()) {\r\n            source.processLoadedSource(data);\r\n        }\r\n    }\r\n\r\n    add(textureSource, data) {\r\n        this._sources.push(textureSource);\r\n        this._data.push(data);\r\n    }\r\n\r\n    _remove(textureSource) {\r\n        const index = this._sources.indexOf(textureSource);\r\n        if (index >= 0) {\r\n            this._sources.splice(index, 1);\r\n            this._data.splice(index, 1);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\nexport default class CoreContext {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.root = null;\r\n\r\n        this.updateTreeOrder = 0;\r\n\r\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\r\n\r\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\r\n        this.renderExec.init();\r\n\r\n        this._usedMemory = 0;\r\n        this._renderTexturePool = [];\r\n\r\n        this._renderTextureId = 1;\r\n\r\n        this._zSorts = [];\r\n\r\n        this.renderToTextureCount = 0;\r\n    }\r\n\r\n    get usedMemory() {\r\n        return this._usedMemory;\r\n    }\r\n\r\n    destroy() {\r\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\r\n        this._usedMemory = 0;\r\n\r\n        this.stage = null;\r\n        this.root = null;\r\n\r\n        this.renderState = null;\r\n        this.renderExec = null;\r\n        this._renderTexturePool = null;\r\n        this._zSorts = null;\r\n\r\n        delete this.stage;\r\n        delete this.root;\r\n        delete this.renderState;\r\n        delete this.renderExec;\r\n        delete this._renderTexturePool;\r\n        delete this._zSorts;\r\n    }\r\n\r\n    hasRenderUpdates() {\r\n        return !!this.root._parent._hasRenderUpdates;\r\n    }\r\n\r\n    render() {\r\n        // Clear flag to identify if anything changes before the next frame.\r\n        this.root._parent._hasRenderUpdates = 0;\r\n\r\n        this._render();\r\n    }\r\n\r\n    update() {\r\n        this._update();\r\n\r\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\r\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\r\n        // (but not recursively to prevent infinite loops).\r\n        if (this.root._hasUpdates) {\r\n            this._update();\r\n        }\r\n\r\n        this._performForcedZSorts();\r\n    }\r\n\r\n    /**\r\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\r\n     */\r\n    _performForcedZSorts() {\r\n        const n = this._zSorts.length;\r\n        if (n) {\r\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\r\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\r\n                if (this._zSorts[i].zSort) {\r\n                    this._zSorts[i].sortZIndexedChildren();\r\n                }\r\n            }\r\n            this._zSorts = [];\r\n        }\r\n    }\r\n\r\n    _update() {\r\n        this.updateTreeOrder = 0;\r\n\r\n        this.root.update();\r\n    }\r\n\r\n    _render() {\r\n        const debugFrame = this.stage.getOption('debugFrame');\r\n        // Obtain a sequence of the quad operations.\r\n        this._fillRenderState();\r\n\r\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\r\n            this._readPixels();\r\n        }\r\n\r\n        // Now run them with the render executor.\r\n        this._performRender();\r\n\r\n        if (debugFrame) {\r\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\r\n        }\r\n\r\n        // Block OpenGL pipeline to prevent framebuffer flickering\r\n        // on certain devices\r\n        if (this.stage.getOption('readPixelsAfterDraw') &&\r\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\r\n        ) {\r\n            if (debugFrame) {\r\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\r\n            }\r\n            this._readPixels();\r\n        }\r\n\r\n        this.renderToTextureCount = 0;\r\n    }\r\n\r\n    _readPixels() {\r\n        const pixels = new Uint8Array(4);\r\n        const gl = this.stage.gl;\r\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    }\r\n\r\n    _fillRenderState() {\r\n        this.renderState.reset();\r\n        this.root.render();\r\n        this.renderState.finish();\r\n    }\r\n\r\n    _performRender() {\r\n        this.renderExec.execute();\r\n    }\r\n\r\n    _addMemoryUsage(delta) {\r\n        this._usedMemory += delta;\r\n        this.stage.addMemoryUsage(delta);\r\n    }\r\n\r\n    allocateRenderTexture(w, h) {\r\n        let prec = this.stage.getRenderPrecision();\r\n        let pw = Math.max(1, Math.round(w * prec));\r\n        let ph = Math.max(1, Math.round(h * prec));\r\n\r\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\r\n        const n = this._renderTexturePool.length;\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            const texture = this._renderTexturePool[i];\r\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\r\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\r\n                texture.f = this.stage.frameCounter;\r\n                this._renderTexturePool.splice(i, 1);\r\n                return texture;\r\n            }\r\n        }\r\n\r\n        const texture = this._createRenderTexture(w, h, pw, ph);\r\n        texture.precision = prec;\r\n        return texture;\r\n    }\r\n\r\n    releaseRenderTexture(texture) {\r\n        this._renderTexturePool.push(texture);\r\n    }\r\n\r\n    freeUnusedRenderTextures(maxAge = 60) {\r\n        // Clean up all textures that are no longer used.\r\n        // This cache is short-lived because it is really just meant to supply running shaders that are\r\n        // updated during a number of frames.\r\n        let limit = this.stage.frameCounter - maxAge;\r\n\r\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\r\n            if (texture.f <= limit) {\r\n                this._freeRenderTexture(texture);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n\r\n    _createRenderTexture(w, h, pw, ph) {\r\n        this._addMemoryUsage(pw * ph);\r\n\r\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\r\n        texture.id = this._renderTextureId++;\r\n        texture.f = this.stage.frameCounter;\r\n        texture.ow = w;\r\n        texture.oh = h;\r\n        texture.w = pw;\r\n        texture.h = ph;\r\n\r\n        return texture;\r\n    }\r\n\r\n    _freeRenderTexture(nativeTexture) {\r\n        this.stage.renderer.freeRenderTexture(nativeTexture);\r\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\r\n    }\r\n\r\n    copyRenderTexture(renderTexture, nativeTexture, options) {\r\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\r\n    }\r\n\r\n    forceZSort(elementCore) {\r\n        this._zSorts.push(elementCore);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport Base from \"../tree/Base.mjs\";\r\n\r\nexport default class TransitionSettings {\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n        this._timingFunction = 'ease';\r\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\r\n        this.delay = 0;\r\n        this.duration = 0.2;\r\n        this.merger = null;\r\n    }\r\n\r\n    get timingFunction() {\r\n        return this._timingFunction;\r\n    }\r\n\r\n    set timingFunction(v) {\r\n        this._timingFunction = v;\r\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\r\n    }\r\n\r\n    get timingFunctionImpl() {\r\n        return this._timingFunctionImpl;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n}\r\n\r\nTransitionSettings.prototype.isTransitionSettings = true;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class TransitionManager {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.stage.on('frameStart', () => this.progress());\r\n\r\n        /**\r\n         * All transitions that are running and attached.\r\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\r\n         * @type {Set<Transition>}\r\n         */\r\n        this.active = new Set();\r\n\r\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\r\n    }\r\n\r\n    progress() {\r\n        if (this.active.size) {\r\n            let dt = this.stage.dt;\r\n\r\n            let filter = false;\r\n            this.active.forEach(function(a) {\r\n                a.progress(dt);\r\n                if (!a.isRunning()) {\r\n                    filter = true;\r\n                }\r\n            });\r\n\r\n            if (filter) {\r\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\r\n            }\r\n        }\r\n    }\r\n\r\n    createSettings(settings) {\r\n        const transitionSettings = new TransitionSettings();\r\n        Base.patchObject(transitionSettings, settings);\r\n        return transitionSettings;\r\n    }\r\n\r\n    addActive(transition) {\r\n        this.active.add(transition);\r\n    }\r\n\r\n    removeActive(transition) {\r\n        this.active.delete(transition);\r\n    }\r\n}\r\n\r\nimport Base from \"../tree/Base.mjs\";\r\nimport TransitionSettings from \"./TransitionSettings.mjs\";\r\nimport Transition from \"./Transition.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../tree/Utils.mjs\";\r\n\r\nexport default class MultiSpline {\r\n\r\n    constructor() {\r\n        this._clear();\r\n    }\r\n\r\n    _clear() {\r\n        this._p = [];\r\n        this._pe = [];\r\n        this._idp = [];\r\n        this._f = [];\r\n        this._v = [];\r\n        this._lv = [];\r\n        this._sm = [];\r\n        this._s = [];\r\n        this._ve = [];\r\n        this._sme = [];\r\n        this._se = [];\r\n\r\n        this._length = 0;\r\n    }\r\n\r\n    parse(rgba, def) {\r\n        let i, n;\r\n        if (!Utils.isObjectLiteral(def)) {\r\n            def = {0: def}\r\n        }\r\n\r\n        let defaultSmoothness = 0.5;\r\n\r\n        let items = [];\r\n        for (let key in def) {\r\n            if (def.hasOwnProperty(key)) {\r\n                let obj = def[key];\r\n                if (!Utils.isObjectLiteral(obj)) {\r\n                    obj = {v: obj}\r\n                }\r\n\r\n                let p = parseFloat(key);\r\n\r\n                if (key === \"sm\") {\r\n                    defaultSmoothness = obj.v;\r\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\r\n                    obj.p = p;\r\n\r\n                    obj.f = Utils.isFunction(obj.v);\r\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\r\n\r\n                    items.push(obj);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort by progress value.\r\n        items = items.sort(function(a, b) {return a.p - b.p});\r\n\r\n        n = items.length;\r\n\r\n        for (i = 0; i < n; i++) {\r\n            let last = (i === n - 1);\r\n            if (!items[i].hasOwnProperty('pe')) {\r\n                // Progress.\r\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\r\n            } else {\r\n                // Prevent multiple items at the same time.\r\n                const max = i < n - 1 ? items[i + 1].p : 1;\r\n                if (items[i].pe > max) {\r\n                    items[i].pe = max;\r\n                }\r\n            }\r\n            if (items[i].pe === items[i].p) {\r\n                items[i].idp = 0;\r\n            } else {\r\n                items[i].idp = 1 / (items[i].pe - items[i].p);\r\n            }\r\n        }\r\n\r\n        // Color merger: we need to split/combine RGBA components.\r\n\r\n        // Calculate bezier helper values.;\r\n        for (i = 0; i < n; i++) {\r\n            if (!items[i].hasOwnProperty('sm')) {\r\n                // Smoothness.;\r\n                items[i].sm = defaultSmoothness;\r\n            }\r\n            if (!items[i].hasOwnProperty('s')) {\r\n                // Slope.;\r\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\r\n                    // Horizontal slope at start and end.;\r\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\r\n                } else {\r\n                    const pi = items[i - 1];\r\n                    const ni = items[i + 1];\r\n                    if (pi.p === ni.p) {\r\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\r\n                    } else {\r\n                        if (rgba) {\r\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\r\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\r\n                            const d = 1 / (ni.p - pi.p);\r\n                            items[i].s = [\r\n                                d * (nc[0] - pc[0]),\r\n                                d * (nc[1] - pc[1]),\r\n                                d * (nc[2] - pc[2]),\r\n                                d * (nc[3] - pc[3])\r\n                            ];\r\n                        } else {\r\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < n - 1; i++) {\r\n            // Calculate value function.;\r\n            if (!items[i].f) {\r\n\r\n                let last = (i === n - 1);\r\n                if (!items[i].hasOwnProperty('ve')) {\r\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\r\n                }\r\n\r\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\r\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\r\n                    if (!items[i].hasOwnProperty('sme')) {\r\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\r\n                    }\r\n                    if (!items[i].hasOwnProperty('se')) {\r\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\r\n                    }\r\n\r\n                    // Generate spline.;\r\n                    if (rgba) {\r\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\r\n                    } else {\r\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\r\n                    }\r\n\r\n                    items[i].f = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.length) {\r\n            this._clear();\r\n        }\r\n\r\n        for (i = 0, n = items.length; i < n; i++) {\r\n            this._add(items[i]);\r\n        }\r\n    }\r\n\r\n    _add(item) {\r\n        this._p.push(item.p || 0);\r\n        this._pe.push(item.pe || 0);\r\n        this._idp.push(item.idp || 0);\r\n        this._f.push(item.f || false);\r\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\r\n        this._lv.push(item.lv || 0);\r\n        this._sm.push(item.sm || 0);\r\n        this._s.push(item.s || 0);\r\n        this._ve.push(item.ve || 0);\r\n        this._sme.push(item.sme || 0);\r\n        this._se.push(item.se || 0);\r\n        this._length++;\r\n    }\r\n\r\n    _getItem(p) {\r\n        const n = this._length;\r\n        if (!n) {\r\n            return -1;\r\n        }\r\n\r\n        if (p < this._p[0]) {\r\n            return 0;\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            if (this._p[i] <= p && p < this._pe[i]) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return n - 1;\r\n    }\r\n\r\n    getValue(p) {\r\n        const i = this._getItem(p);\r\n        if (i === -1) {\r\n            return undefined;\r\n        } else {\r\n            if (this._f[i]) {\r\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\r\n                return this._v[i](o);\r\n            } else {\r\n                return this._v[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    get length() {\r\n        return this._length;\r\n    }\r\n\r\n    static getRgbaComponents(argb) {\r\n        let r = ((argb / 65536) | 0) % 256;\r\n        let g = ((argb / 256) | 0) % 256;\r\n        let b = argb % 256;\r\n        let a = ((argb / 16777216) | 0);\r\n        return [r, g, b, a];\r\n    };\r\n\r\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\r\n        // Normalize slopes because we use a spline that goes from 0 to 1.\r\n        let dp = p2 - p1;\r\n        s1 *= dp;\r\n        s2 *= dp;\r\n\r\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\r\n        if (!helpers) {\r\n            return function (p) {\r\n                if (p === 0) return v1;\r\n                if (p === 1) return v2;\r\n\r\n                return v2 * p + v1 * (1 - p);\r\n            };\r\n        } else {\r\n            return function (p) {\r\n                if (p === 0) return v1;\r\n                if (p === 1) return v2;\r\n                return MultiSpline.calculateSpline(helpers, p);\r\n            };\r\n        }\r\n    };\r\n\r\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\r\n        // Normalize slopes because we use a spline that goes from 0 to 1.\r\n        let dp = p2 - p1;\r\n        s1[0] *= dp;\r\n        s1[1] *= dp;\r\n        s1[2] *= dp;\r\n        s1[3] *= dp;\r\n        s2[0] *= dp;\r\n        s2[1] *= dp;\r\n        s2[2] *= dp;\r\n        s2[3] *= dp;\r\n\r\n        let cv1 = MultiSpline.getRgbaComponents(v1);\r\n        let cv2 = MultiSpline.getRgbaComponents(v2);\r\n\r\n        let helpers = [\r\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\r\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\r\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\r\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\r\n        ];\r\n\r\n        if (!helpers[0]) {\r\n            return function (p) {\r\n                // Linear.\r\n                if (p === 0) return v1;\r\n                if (p === 1) return v2;\r\n\r\n                return MultiSpline.mergeColors(v2, v1, p);\r\n            };\r\n        } else {\r\n            return function (p) {\r\n                if (p === 0) return v1;\r\n                if (p === 1) return v2;\r\n\r\n                return MultiSpline.getArgbNumber([\r\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\r\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\r\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\r\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\r\n                ]);\r\n            };\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Creates helpers to be used in the spline function.\r\n     * @param {number} v1\r\n     *   From value.\r\n     * @param {number} v2\r\n     *   To value.\r\n     * @param {number} o1\r\n     *   From smoothness (0 = linear, 1 = smooth).\r\n     * @param {number} s1\r\n     *   From slope (0 = horizontal, infinite = vertical).\r\n     * @param {number} i2\r\n     *   To smoothness.\r\n     * @param {number} s2\r\n     *   To slope.\r\n     * @returns {Number[]}\r\n     *   The helper values to be supplied to the spline function.\r\n     *   If the configuration is actually linear, null is returned.\r\n     */\r\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\r\n        if (!o1 && !i2) {\r\n            // Linear.\r\n            return null;\r\n        }\r\n\r\n        // Cubic bezier points.\r\n        // http://cubic-bezier.com/\r\n        let csx = o1;\r\n        let csy = v1 + s1 * o1;\r\n        let cex = 1 - i2;\r\n        let cey = v2 - s2 * i2;\r\n\r\n        let xa = 3 * csx - 3 * cex + 1;\r\n        let xb = -6 * csx + 3 * cex;\r\n        let xc = 3 * csx;\r\n\r\n        let ya = 3 * csy - 3 * cey + v2 - v1;\r\n        let yb = 3 * (cey + v1) - 6 * csy;\r\n        let yc = 3 * (csy - v1);\r\n        let yd = v1;\r\n\r\n        return [xa, xb, xc, ya, yb, yc, yd];\r\n    };\r\n\r\n    /**\r\n     * Calculates the intermediate spline value based on the specified helpers.\r\n     * @param {number[]} helpers\r\n     *   Obtained from getSplineHelpers.\r\n     * @param {number} p\r\n     * @return {number}\r\n     */\r\n    static calculateSpline(helpers, p) {\r\n        let xa = helpers[0];\r\n        let xb = helpers[1];\r\n        let xc = helpers[2];\r\n        let ya = helpers[3];\r\n        let yb = helpers[4];\r\n        let yc = helpers[5];\r\n        let yd = helpers[6];\r\n\r\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\r\n            // Linear.\r\n            return p;\r\n        }\r\n\r\n        // Find t for p.\r\n        let t = 0.5, cbx, dx;\r\n\r\n        for (let it = 0; it < 20; it++) {\r\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\r\n            cbx = t * (t * (t * xa + xb) + xc);\r\n\r\n            dx = p - cbx;\r\n            if (dx > -1e-8 && dx < 1e-8) {\r\n                // Solution found!\r\n                return t * (t * (t * ya + yb) + yc) + yd;\r\n            }\r\n\r\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\r\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\r\n\r\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\r\n                // Problematic. Fall back to binary search method.\r\n                break;\r\n            }\r\n\r\n            t += dx / cbxd;\r\n        }\r\n\r\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\r\n        let minT = 0;\r\n        let maxT = 1;\r\n        for (let it = 0; it < 20; it++) {\r\n            t = 0.5 * (minT + maxT);\r\n\r\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\r\n            cbx = t * (t * (t * xa + xb) + xc);\r\n\r\n            dx = p - cbx;\r\n            if (dx > -1e-8 && dx < 1e-8) {\r\n                // Solution found!\r\n                return t * (t * (t * ya + yb) + yc) + yd;\r\n            }\r\n\r\n            if (dx < 0) {\r\n                maxT = t;\r\n            } else {\r\n                minT = t;\r\n            }\r\n        }\r\n\r\n        return t;\r\n    };\r\n\r\n    static mergeColors(c1, c2, p) {\r\n        let r1 = ((c1 / 65536) | 0) % 256;\r\n        let g1 = ((c1 / 256) | 0) % 256;\r\n        let b1 = c1 % 256;\r\n        let a1 = ((c1 / 16777216) | 0);\r\n\r\n        let r2 = ((c2 / 65536) | 0) % 256;\r\n        let g2 = ((c2 / 256) | 0) % 256;\r\n        let b2 = c2 % 256;\r\n        let a2 = ((c2 / 16777216) | 0);\r\n\r\n        let r = r1 * p + r2 * (1 - p);\r\n        let g = g1 * p + g2 * (1 - p);\r\n        let b = b1 * p + b2 * (1 - p);\r\n        let a = a1 * p + a2 * (1 - p);\r\n\r\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\r\n    };\r\n\r\n    static getArgbNumber(rgba) {\r\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\r\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\r\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\r\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\r\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\r\n        if (v < 0) {\r\n            v = 0xFFFFFFFF + v + 1;\r\n        }\r\n        return v;\r\n    };\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class AnimationActionSettings {\r\n\r\n    constructor(animationSettings) {\r\n\r\n        this.animationSettings = animationSettings;\r\n\r\n        /**\r\n         * The selector that selects the elements.\r\n         * @type {string}\r\n         */\r\n        this._selector = \"\";\r\n\r\n        /**\r\n         * The value items, ordered by progress offset.\r\n         * @type {MultiSpline}\r\n         * @private;\r\n         */\r\n        this._items = new MultiSpline();\r\n\r\n        /**\r\n         * The affected properties (paths).\r\n         * @private;\r\n         */\r\n        this._props = [];\r\n\r\n        /**\r\n         * Property setters, indexed according to props.\r\n         * @private;\r\n         */\r\n        this._propSetters = [];\r\n\r\n        this._resetValue = undefined;\r\n        this._hasResetValue = false;\r\n\r\n        this._hasColorProperty = undefined;\r\n    }\r\n\r\n    getResetValue() {\r\n        if (this._hasResetValue) {\r\n            return this._resetValue;\r\n        } else {\r\n            return this._items.getValue(0);\r\n        }\r\n    }\r\n\r\n    apply(element, p, factor) {\r\n        const elements = this.getAnimatedElements(element);\r\n\r\n        let v = this._items.getValue(p);\r\n\r\n        if (v === undefined || !elements.length) {\r\n            return;\r\n        }\r\n\r\n        if (factor !== 1) {\r\n            // Stop factor.;\r\n            let sv = this.getResetValue();\r\n\r\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\r\n                if (this.hasColorProperty()) {\r\n                    v = StageUtils.mergeColors(v, sv, factor);\r\n                } else {\r\n                    v = StageUtils.mergeNumbers(v, sv, factor);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Apply transformation to all components.;\r\n        const n = this._propSetters.length;\r\n\r\n        const m = elements.length;\r\n        for (let j = 0; j < m; j++) {\r\n            for (let i = 0; i < n; i++) {\r\n                this._propSetters[i](elements[j], v);\r\n            }\r\n        }\r\n    }\r\n    \r\n    getAnimatedElements(element) {\r\n        return element.select(this._selector);\r\n    }\r\n\r\n    reset(element) {\r\n        const elements = this.getAnimatedElements(element);\r\n\r\n        let v = this.getResetValue();\r\n\r\n        if (v === undefined || !elements.length) {\r\n            return;\r\n        }\r\n\r\n        // Apply transformation to all components.\r\n        const n = this._propSetters.length;\r\n\r\n        const m = elements.length;\r\n        for (let j = 0; j < m; j++) {\r\n            for (let i = 0; i < n; i++) {\r\n                this._propSetters[i](elements[j], v);\r\n            }\r\n        }\r\n    }\r\n    \r\n    set selector(v) {\r\n        this._selector = v;\r\n    }\r\n\r\n    set t(v) {\r\n        this.selector = v;\r\n    }\r\n\r\n    get resetValue() {\r\n        return this._resetValue;\r\n    }\r\n    \r\n    set resetValue(v) {\r\n        this._resetValue = v;\r\n        this._hasResetValue = (v !== undefined);\r\n    }\r\n\r\n    set rv(v) {\r\n        this.resetValue = v;\r\n    }\r\n\r\n    set value(v) {\r\n        this._items.parse(this.hasColorProperty(), v);\r\n    }\r\n\r\n    set v(v) {\r\n        this.value = v;\r\n    }\r\n\r\n    set properties(v) {\r\n        if (!Array.isArray(v)) {\r\n            v = [v];\r\n        }\r\n\r\n        this._props = [];\r\n\r\n        v.forEach((prop) => {\r\n            this._props.push(prop);\r\n            this._propSetters.push(Element.getSetter(prop));\r\n        });\r\n    }\r\n\r\n    set property(v) {\r\n        this._hasColorProperty = undefined;\r\n        this.properties = v;\r\n    }\r\n\r\n    set p(v) {\r\n        this.properties = v;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n    hasColorProperty() {\r\n        if (this._hasColorProperty === undefined) {\r\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\r\n        }\r\n        return this._hasColorProperty;\r\n    }\r\n}\r\n\r\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\r\n\r\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\r\nimport Element from \"../tree/Element.mjs\";\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport Base from \"../tree/Base.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\r\nimport Base from \"../tree/Base.mjs\";\r\n\r\nexport default class AnimationSettings {\r\n    constructor() {\r\n        /**\r\n         * @type {AnimationActionSettings[]}\r\n         */\r\n        this._actions = [];\r\n\r\n        this.delay = 0;\r\n        this.duration = 1;\r\n\r\n        this.repeat = 0;\r\n        this.repeatOffset = 0;\r\n        this.repeatDelay = 0;\r\n\r\n        this.autostop = false;\r\n\r\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\r\n        this._stopTimingFunction = 'ease';\r\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\r\n        this.stopDuration = 0;\r\n        this.stopDelay = 0;\r\n    }\r\n\r\n    get actions() {\r\n        return this._actions;\r\n    }\r\n\r\n    set actions(v) {\r\n        this._actions = [];\r\n        for (let i = 0, n = v.length; i < n; i++) {\r\n            const e = v[i];\r\n            if (!e.isAnimationActionSettings) {\r\n                const aas = new AnimationActionSettings(this);\r\n                aas.patch(e);\r\n                this._actions.push(aas);\r\n            } else {\r\n                this._actions.push(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\r\n     * @param {Element} element;\r\n     * @param {number} p;\r\n     * @param {number} factor;\r\n     */\r\n    apply(element, p, factor = 1) {\r\n        this._actions.forEach(function(action) {\r\n            action.apply(element, p, factor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resets the animation to the reset values.\r\n     * @param {Element} element;\r\n     */\r\n    reset(element) {\r\n        this._actions.forEach(function(action) {\r\n            action.reset(element);\r\n        });\r\n    }\r\n\r\n    get stopTimingFunction() {\r\n        return this._stopTimingFunction;\r\n    }\r\n\r\n    set stopTimingFunction(v) {\r\n        this._stopTimingFunction = v;\r\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\r\n    }\r\n\r\n    get stopTimingFunctionImpl() {\r\n        return this._stopTimingFunctionImpl;\r\n    }\r\n\r\n    patch(settings) {\r\n        Base.patchObject(this, settings);\r\n    }\r\n\r\n}\r\n\r\nAnimationSettings.STOP_METHODS = {\r\n    FADE: 'fade',\r\n    REVERSE: 'reverse',\r\n    FORWARD: 'forward',\r\n    IMMEDIATE: 'immediate',\r\n    ONETOTWO: 'onetotwo'\r\n};\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport EventEmitter from \"../EventEmitter.mjs\";\r\nimport AnimationSettings from \"./AnimationSettings.mjs\";\r\n\r\nexport default class Animation extends EventEmitter {\r\n\r\n    constructor(manager, settings, element) {\r\n        super();\r\n\r\n        this.manager = manager;\r\n\r\n        this._settings = settings;\r\n\r\n        this._element = element;\r\n\r\n        this._state = Animation.STATES.IDLE;\r\n\r\n        this._p = 0;\r\n        this._delayLeft = 0;\r\n        this._repeatsLeft = 0;\r\n\r\n        this._stopDelayLeft = 0;\r\n        this._stopP = 0;\r\n    }\r\n\r\n    start() {\r\n        if (this._element && this._element.attached) {\r\n            this._p = 0;\r\n            this._delayLeft = this.settings.delay;\r\n            this._repeatsLeft = this.settings.repeat;\r\n            this._state = Animation.STATES.PLAYING;\r\n            this.emit('start');\r\n            this.checkActive();\r\n        } else {\r\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\r\n        }\r\n    }\r\n\r\n    play() {\r\n        if (this._state === Animation.STATES.PAUSED) {\r\n            // Continue.;\r\n            this._state = Animation.STATES.PLAYING;\r\n            this.checkActive();\r\n            this.emit('resume');\r\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\r\n            // Continue.;\r\n            this._state = Animation.STATES.PLAYING;\r\n            this.emit('stopContinue');\r\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\r\n            // Restart.;\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this._state === Animation.STATES.PLAYING) {\r\n            this._state = Animation.STATES.PAUSED;\r\n            this.emit('pause');\r\n        }\r\n    }\r\n\r\n    replay() {\r\n        if (this._state == Animation.STATES.FINISHED) {\r\n            this.start();\r\n        } else {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    skipDelay() {\r\n        this._delayLeft = 0;\r\n        this._stopDelayLeft = 0;\r\n    }\r\n\r\n    finish() {\r\n        if (this._state === Animation.STATES.PLAYING) {\r\n            this._delayLeft = 0;\r\n            this._p = 1;\r\n        } else if (this._state === Animation.STATES.STOPPING) {\r\n            this._stopDelayLeft = 0;\r\n            this._p = 0;\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\r\n\r\n        this._stopDelayLeft = this.settings.stopDelay || 0;\r\n\r\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\r\n            // Stop upon next progress.;\r\n            this._state = Animation.STATES.STOPPING;\r\n            this.emit('stop');\r\n        } else {\r\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\r\n                this._stopP = 0;\r\n            }\r\n\r\n            this._state = Animation.STATES.STOPPING;\r\n            this.emit('stop');\r\n        }\r\n\r\n        this.checkActive();\r\n    }\r\n\r\n    stopNow() {\r\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\r\n            this._state = Animation.STATES.STOPPING;\r\n            this._p = 0;\r\n            this.emit('stop');\r\n            this.reset();\r\n            this._state = Animation.STATES.STOPPED;\r\n            this.emit('stopFinish');\r\n        }\r\n    }\r\n\r\n    isPaused() {\r\n        return this._state === Animation.STATES.PAUSED;\r\n    }\r\n\r\n    isPlaying() {\r\n        return this._state === Animation.STATES.PLAYING;\r\n    }\r\n\r\n    isStopping() {\r\n        return this._state === Animation.STATES.STOPPING;\r\n    }\r\n\r\n    isFinished() {\r\n        return this._state === Animation.STATES.FINISHED;\r\n    }\r\n\r\n    checkActive() {\r\n        if (this.isActive()) {\r\n            this.manager.addActive(this);\r\n        }\r\n    }\r\n\r\n    isActive() {\r\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\r\n    }\r\n\r\n    progress(dt) {\r\n        if (!this._element) return;\r\n        this._progress(dt);\r\n        this.apply();\r\n    }\r\n\r\n    _progress(dt) {\r\n        if (this._state == Animation.STATES.STOPPING) {\r\n            this._stopProgress(dt);\r\n            return;\r\n        }\r\n\r\n        if (this._state != Animation.STATES.PLAYING) {\r\n            return;\r\n        }\r\n\r\n        if (this._delayLeft > 0) {\r\n            this._delayLeft -= dt;\r\n\r\n            if (this._delayLeft < 0) {\r\n                dt = -this._delayLeft;\r\n                this._delayLeft = 0;\r\n\r\n                this.emit('delayEnd');\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.settings.duration === 0) {\r\n            this._p = 1;\r\n        } else if (this.settings.duration > 0) {\r\n            this._p += dt / this.settings.duration;\r\n        }\r\n        if (this._p >= 1) {\r\n            // Finished!;\r\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\r\n                if (this._repeatsLeft > 0) {\r\n                    this._repeatsLeft--;\r\n                }\r\n                this._p = this.settings.repeatOffset;\r\n                this.emit('progress', this._p);\r\n                \r\n                if (this.settings.repeatDelay) {\r\n                    this._delayLeft = this.settings.repeatDelay;\r\n                }\r\n\r\n                this.emit('repeat', this._repeatsLeft);\r\n            } else {\r\n                this._p = 1;\r\n                this.emit('progress', this._p);\r\n                \r\n                this._state = Animation.STATES.FINISHED;\r\n                this.emit('finish');\r\n                if (this.settings.autostop) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        } else {\r\n            this.emit('progress', this._p);\r\n        }\r\n    }\r\n    \r\n    _stopProgress(dt) {\r\n        let duration = this._getStopDuration();\r\n\r\n        if (this._stopDelayLeft > 0) {\r\n            this._stopDelayLeft -= dt;\r\n\r\n            if (this._stopDelayLeft < 0) {\r\n                dt = -this._stopDelayLeft;\r\n                this._stopDelayLeft = 0;\r\n\r\n                this.emit('stopDelayEnd');\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\r\n            this._state = Animation.STATES.STOPPED;\r\n            this.emit('stopFinish');\r\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\r\n            if (duration === 0) {\r\n                this._p = 0;\r\n            } else if (duration > 0) {\r\n                this._p -= dt / duration;\r\n            }\r\n\r\n            if (this._p <= 0) {\r\n                this._p = 0;\r\n                this._state = Animation.STATES.STOPPED;\r\n                this.emit('stopFinish');\r\n            }\r\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\r\n            this._progressStopTransition(dt);\r\n            if (this._stopP >= 1) {\r\n                this._p = 0;\r\n                this._state = Animation.STATES.STOPPED;\r\n                this.emit('stopFinish');\r\n            }\r\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\r\n            if (this._p < 2) {\r\n                if (duration === 0) {\r\n                    this._p = 2;\r\n                } else if (duration > 0) {\r\n                    if (this._p < 1) {\r\n                        this._p += dt / this.settings.duration;\r\n                    } else {\r\n                        this._p += dt / duration;\r\n                    }\r\n                }\r\n                if (this._p >= 2) {\r\n                    this._p = 2;\r\n                    this._state = Animation.STATES.STOPPED;\r\n                    this.emit('stopFinish');\r\n                } else {\r\n                    this.emit('progress', this._p);\r\n                }\r\n            }\r\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\r\n            if (this._p < 1) {\r\n                if (this.settings.duration == 0) {\r\n                    this._p = 1;\r\n                } else {\r\n                    this._p += dt / this.settings.duration;\r\n                }\r\n                if (this._p >= 1) {\r\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\r\n                        this._p = 1;\r\n                        this._state = Animation.STATES.STOPPED;\r\n                        this.emit('stopFinish');\r\n                    } else {\r\n                        if (this._repeatsLeft > 0) {\r\n                            this._repeatsLeft--;\r\n                            this._p = 0;\r\n                            this.emit('repeat', this._repeatsLeft);\r\n                        } else {\r\n                            this._p = 1;\r\n                            this._state = Animation.STATES.STOPPED;\r\n                            this.emit('stopFinish');\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.emit('progress', this._p);\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    _progressStopTransition(dt) {\r\n        if (this._stopP < 1) {\r\n            if (this._stopDelayLeft > 0) {\r\n                this._stopDelayLeft -= dt;\r\n\r\n                if (this._stopDelayLeft < 0) {\r\n                    dt = -this._stopDelayLeft;\r\n                    this._stopDelayLeft = 0;\r\n\r\n                    this.emit('delayEnd');\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            const duration = this._getStopDuration();\r\n\r\n            if (duration == 0) {\r\n                this._stopP = 1;\r\n            } else {\r\n                this._stopP += dt / duration;\r\n            }\r\n            if (this._stopP >= 1) {\r\n                // Finished!;\r\n                this._stopP = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    _getStopDuration() {\r\n        return this.settings.stopDuration || this.settings.duration;\r\n    }\r\n\r\n    apply() {\r\n        if (this._state === Animation.STATES.STOPPED) {\r\n            this.reset();\r\n        } else {\r\n            let factor = 1;\r\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\r\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\r\n            }\r\n            this._settings.apply(this._element, this._p, factor);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this._settings.reset(this._element);\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    get p() {\r\n        return this._p;\r\n    }\r\n\r\n    get delayLeft() {\r\n        return this._delayLeft;\r\n    }\r\n\r\n    get element() {\r\n        return this._element;\r\n    }\r\n\r\n    get frame() {\r\n        return Math.round(this._p * this._settings.duration * 60);\r\n    }\r\n\r\n    get settings() {\r\n        return this._settings;\r\n    }\r\n\r\n}\r\n\r\nAnimation.STATES = {\r\n    IDLE: 0,\r\n    PLAYING: 1,\r\n    STOPPING: 2,\r\n    STOPPED: 3,\r\n    FINISHED: 4,\r\n    PAUSED: 5\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport default class AnimationManager {\r\n\r\n    constructor(stage) {\r\n        this.stage = stage;\r\n\r\n        this.stage.on('frameStart', () => this.progress());\r\n\r\n        /**\r\n         * All running animations on attached subjects.\r\n         * @type {Set<Animation>}\r\n         */\r\n        this.active = new Set();\r\n    }\r\n\r\n    progress() {\r\n        if (this.active.size) {\r\n            let dt = this.stage.dt;\r\n\r\n            let filter = false;\r\n            this.active.forEach(function(a) {\r\n                if (a.isActive()) {\r\n                    a.progress(dt);\r\n                } else {\r\n                    filter = true;\r\n                }\r\n            });\r\n\r\n            if (filter) {\r\n                this.active = new Set([...this.active].filter(t => t.isActive()));\r\n            }\r\n        }\r\n    }\r\n\r\n    createAnimation(element, settings) {\r\n        if (Utils.isObjectLiteral(settings)) {\r\n            // Convert plain object to proper settings object.\r\n            settings = this.createSettings(settings);\r\n        }\r\n\r\n        return new Animation(\r\n            this,\r\n            settings,\r\n            element\r\n        );\r\n    }\r\n\r\n    createSettings(settings) {\r\n        const animationSettings = new AnimationSettings();\r\n        Base.patchObject(animationSettings, settings);\r\n        return animationSettings;\r\n    }\r\n\r\n    addActive(transition) {\r\n        this.active.add(transition);\r\n    }\r\n}\r\n\r\nimport Base from \"../tree/Base.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport AnimationSettings from \"./AnimationSettings.mjs\";\r\nimport Animation from \"./Animation.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class RectangleTexture extends Texture {\r\n\r\n    _getLookupId() {\r\n        return '__whitepix';\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        return function(cb) {\r\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\r\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\r\n        }\r\n    }\r\n\r\n    isAutosizeTexture() {\r\n        return false;\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Application render tree.\r\n */\r\n\r\nimport EventEmitter from \"../EventEmitter.mjs\";\r\nimport Utils from \"./Utils.mjs\";\r\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\r\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\r\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\r\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\r\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\r\nimport Shader from \"./Shader.mjs\";\r\n\r\nexport default class Stage extends EventEmitter {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n        this._setOptions(options);\r\n\r\n        this._usedMemory = 0;\r\n        this._lastGcFrame = 0;\r\n\r\n        // attempt to track VRAM usage more accurately by accounting for different color channels\r\n        this._usedVramAlpha = 0;\r\n        this._usedVramNonAlpha = 0;\r\n\r\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\r\n        this.platform = new platformType();\r\n\r\n        if (this.platform.init) {\r\n            this.platform.init(this);\r\n        }\r\n\r\n        this.gl = null;\r\n        this.c2d = null;\r\n\r\n        const context = this.getOption('context');\r\n        if (context) {\r\n            if (context.useProgram) {\r\n                this.gl = context;\r\n            } else {\r\n                this.c2d = context;\r\n            }\r\n        } else {\r\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\r\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\r\n            } else {\r\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\r\n            }\r\n        }\r\n\r\n        if (this.gl) {\r\n            // Wrap in WebGLStateManager.\r\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\r\n            // Context switching is necessary when reusing the same context for Three.js.\r\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\r\n            //  when manually passing over a canvas or context in the options.\r\n            WebGLStateManager.enable(this.gl, \"lightning\")\r\n        }\r\n\r\n        this._mode = this.gl ? 0 : 1;\r\n\r\n        // Override width and height.\r\n        if (this.getCanvas()) {\r\n            if (this.getOption('devicePixelRatio') !== 1) {\r\n                const ratio = this.getOption('devicePixelRatio');\r\n                // set correct display sie\r\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\r\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\r\n            }\r\n\r\n            // set display buffer size\r\n            this._options.w = this.getCanvas().width;\r\n            this._options.h = this.getCanvas().height;\r\n        }\r\n\r\n        if (this._mode === 0) {\r\n            if (Utils.isSpark) {\r\n                this._renderer = new SparkRenderer(this);\r\n            } else {\r\n                this._renderer = new WebGLRenderer(this);\r\n            }\r\n        } else {\r\n            this._renderer = new C2dRenderer(this);\r\n        }\r\n\r\n        this.setClearColor(this.getOption('clearColor'));\r\n\r\n        this.frameCounter = 0;\r\n\r\n        this.transitions = new TransitionManager(this);\r\n        this.animations = new AnimationManager(this);\r\n\r\n        this.textureManager = new TextureManager(this);\r\n        this.textureThrottler = new TextureThrottler(this);\r\n\r\n        this.startTime = 0;\r\n        this.currentTime = 0;\r\n        this.dt = 0;\r\n\r\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\r\n        this.rectangleTexture = new RectangleTexture(this);\r\n        this.rectangleTexture.load();\r\n\r\n        // Never clean up because we use it all the time.\r\n        this.rectangleTexture.source.permanent = true;\r\n\r\n        this.ctx = new CoreContext(this);\r\n\r\n        this._updateSourceTextures = new Set();\r\n    }\r\n\r\n    get renderer() {\r\n        return this._renderer;\r\n    }\r\n\r\n    static isWebglSupported() {\r\n        if (Utils.isNode) {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            return !!window.WebGLRenderingContext;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the rendering mode.\r\n     * @returns {number}\r\n     *  0: WebGL\r\n     *  1: Canvas2d\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    isWebgl() {\r\n        return this.mode === 0;\r\n    }\r\n\r\n    isC2d() {\r\n        return this.mode === 1;\r\n    }\r\n\r\n    getOption(name) {\r\n        return this._options[name];\r\n    }\r\n\r\n    _setOptions(o) {\r\n        this._options = {};\r\n\r\n        let opt = (name, def) => {\r\n            let value = o[name];\r\n\r\n            if (value === undefined) {\r\n                this._options[name] = def;\r\n            } else {\r\n                this._options[name] = value;\r\n            }\r\n        }\r\n\r\n        opt('canvas', null);\r\n        opt('context', null);\r\n        opt('w', 1920);\r\n        opt('h', 1080);\r\n        opt('srcBasePath', null);\r\n        opt('memoryPressure', 24e6);\r\n        opt('bufferMemory', 2e6);\r\n        opt('textRenderIssueMargin', 0);\r\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\r\n        opt('clearColor', [0, 0, 0, 0]);\r\n        opt('defaultFontFace', 'sans-serif');\r\n        opt('fixedDt', 0);\r\n        opt('useImageWorker', true);\r\n        opt('autostart', true);\r\n        opt('precision', 1);\r\n        opt('canvas2d', false);\r\n        opt('platform', null);\r\n        opt('readPixelsBeforeDraw', false);\r\n        opt('devicePixelRatio', 1)       \r\n        opt('readPixelsAfterDraw', false);\r\n        opt('readPixelsAfterDrawThreshold', 0);\r\n        opt('debugFrame', false);\r\n        opt('forceTxCanvasSource', false);\r\n        opt('pauseRafLoopOnIdle', false);\r\n        opt('RTL', false);\r\n\r\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\r\n            this._options['precision'] *= o['devicePixelRatio']\r\n            this._options['w'] *= o['devicePixelRatio']\r\n            this._options['h'] *= o['devicePixelRatio']\r\n        }\r\n    }\r\n\r\n    setApplication(app) {\r\n        this.application = app;\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\r\n            console.log('[Lightning] Using image worker!');\r\n        }\r\n\r\n        if (this.application.getOption('debug') && this.c2d) {\r\n            console.log('[Lightning] Using canvas2d renderer');\r\n        }\r\n\r\n        this.application.setAsRoot();\r\n        if (this.getOption('autostart')) {\r\n            this.platform.startLoop();\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.platform.stopLoop();\r\n        this.platform.destroy();\r\n        this.ctx.destroy();\r\n        this.textureManager.destroy();\r\n        this._renderer.destroy();\r\n\r\n        // clear last rendered frame\r\n        if (this.gl) {\r\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        } else if (this.c2d) {\r\n            this.c2d.clearRect(\r\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\r\n            );\r\n        }\r\n\r\n        this.gl = null;\r\n        this.c2d = null;\r\n        this.ctx = null;\r\n        this._options = null;\r\n        this.platform = null;\r\n        this.textureManager = null;\r\n        this._renderer = null;\r\n\r\n        delete this.gl;\r\n        delete this.c2d;\r\n        delete this.ctx;\r\n        delete this._options;\r\n        delete this.platform;\r\n        delete this.textureManager;\r\n        delete this._renderer;\r\n    }\r\n\r\n    stop() {\r\n        this.platform.stopLoop();\r\n    }\r\n\r\n    resume() {\r\n        this.platform.startLoop();\r\n    }\r\n\r\n    get root() {\r\n        return this.application;\r\n    }\r\n\r\n    getCanvas() {\r\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\r\n    }\r\n\r\n    getRenderPrecision() {\r\n        return this._options.precision;\r\n    }\r\n\r\n    /**\r\n     * Marks a texture for updating it's source upon the next drawFrame.\r\n     * @param texture\r\n     */\r\n    addUpdateSourceTexture(texture) {\r\n        if (this._updatingFrame) {\r\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\r\n            texture._performUpdateSource();\r\n        } else {\r\n            this._updateSourceTextures.add(texture);\r\n        }\r\n    }\r\n\r\n    removeUpdateSourceTexture(texture) {\r\n        if (this._updateSourceTextures) {\r\n            this._updateSourceTextures.delete(texture);\r\n        }\r\n    }\r\n\r\n    hasUpdateSourceTexture(texture) {\r\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\r\n    }\r\n\r\n\r\n    _performUpdateSource() {\r\n        if (this._updateSourceTextures.size) {\r\n            this._updateSourceTextures.forEach(texture => {\r\n                texture._performUpdateSource();\r\n            });\r\n            this._updateSourceTextures = new Set();\r\n        }\r\n    }\r\n\r\n    _calculateDt() {\r\n        this.startTime = this.currentTime;\r\n        this.currentTime = this.platform.getHrTime();\r\n\r\n        if (this._options.fixedDt) {\r\n            this.dt = this._options.fixedDt;\r\n        } else {\r\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\r\n        }\r\n    }\r\n\r\n    updateFrame() {\r\n        this._calculateDt();\r\n        this.emit('frameStart');\r\n        this._performUpdateSource();\r\n        this.emit('update');\r\n    }\r\n\r\n    idleFrame() {\r\n        this.textureThrottler.processSome();\r\n        this.emit('frameEnd');\r\n        this.frameCounter++;\r\n    }\r\n\r\n    renderFrame() {\r\n        const changes = this.ctx.hasRenderUpdates();\r\n\r\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\r\n        // during the current frame already.\r\n        this.textureThrottler.processSome();\r\n\r\n        if (changes) {\r\n            this._updatingFrame = true;\r\n            this.ctx.update();\r\n            this.ctx.render();\r\n            this._updatingFrame = false;\r\n        }\r\n\r\n        this.platform.nextFrame(changes);\r\n\r\n        this.emit('frameEnd');\r\n\r\n        this.frameCounter++;\r\n    }\r\n\r\n    isUpdatingFrame() {\r\n        return this._updatingFrame;\r\n    }\r\n\r\n    drawFrame() {\r\n        // Maintain original functionality of `drawFrame()` while retaining the\r\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\r\n        // The full functionality of this method is relied directly by our own unit tests and\r\n        // the unit tests of third party users\r\n        this.updateFrame();\r\n        this.renderFrame();\r\n    }\r\n\r\n    forceRenderUpdate() {\r\n        // Enforce re-rendering.\r\n        if (this.root) {\r\n            this.root.core._parent.setHasRenderUpdates(1);\r\n        }\r\n    }\r\n\r\n    setClearColor(clearColor) {\r\n        this.forceRenderUpdate();\r\n        if (clearColor === null) {\r\n            // Do not clear.\r\n            this._clearColor = null;\r\n        } else if (Array.isArray(clearColor)) {\r\n            this._clearColor = clearColor;\r\n        } else {\r\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\r\n        }\r\n    }\r\n\r\n    getClearColor() {\r\n        return this._clearColor;\r\n    }\r\n\r\n    createElement(settings) {\r\n        if (settings) {\r\n            return this.element(settings);\r\n        } else {\r\n            return new Element(this);\r\n        }\r\n    }\r\n\r\n    createShader(settings) {\r\n        return Shader.create(this, settings);\r\n    }\r\n\r\n    element(settings) {\r\n        if (settings.isElement) return settings;\r\n\r\n        let element;\r\n        if (settings.type) {\r\n            element = new settings.type(this);\r\n        } else {\r\n            element = new Element(this);\r\n        }\r\n\r\n        element.patch(settings);\r\n\r\n        return element;\r\n    }\r\n\r\n    c(settings) {\r\n        return this.element(settings);\r\n    }\r\n\r\n    get w() {\r\n        return this._options.w;\r\n    }\r\n\r\n    get h() {\r\n        return this._options.h;\r\n    }\r\n\r\n    get coordsWidth() {\r\n        return this.w / this._options.precision;\r\n    }\r\n\r\n    get coordsHeight() {\r\n        return this.h / this._options.precision;\r\n    }\r\n\r\n    addMemoryUsage(delta) {\r\n        this._usedMemory += delta;\r\n        if (this._lastGcFrame !== this.frameCounter) {\r\n            if (this._usedMemory > this.getOption('memoryPressure')) {\r\n                this.gc(false);\r\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\r\n                    // Too few released. Aggressive cleanup.\r\n                    this.gc(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get usedMemory() {\r\n        return this._usedMemory;\r\n    }\r\n\r\n    addVramUsage(delta, alpha) {\r\n        if (alpha) {\r\n            this._usedVramAlpha += delta;\r\n        }\r\n        else {\r\n            this._usedVramNonAlpha += delta;\r\n        }\r\n    }\r\n\r\n    get usedVramAlpha() {\r\n        return this._usedVramAlpha;\r\n    }\r\n\r\n    get usedVramNonAlpha() {\r\n        return this._usedVramNonAlpha;\r\n    }\r\n\r\n    get usedVram() {\r\n        return this._usedVramAlpha + this._usedVramNonAlpha;\r\n    }\r\n\r\n    gc(aggressive) {\r\n        if (this._lastGcFrame !== this.frameCounter) {\r\n            this._lastGcFrame = this.frameCounter;\r\n            const memoryUsageBefore = this._usedMemory;\r\n            this.gcTextureMemory(aggressive);\r\n            this.gcRenderTextureMemory(aggressive);\r\n            this.renderer.gc(aggressive);\r\n\r\n            if (this.application.getOption('debug')) {\r\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\r\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\r\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\r\n            }\r\n        }\r\n    }\r\n\r\n    gcTextureMemory(aggressive = false) {\r\n        if (aggressive && this.ctx.root.visible) {\r\n            // Make sure that ALL textures are cleaned;\r\n            this.ctx.root.visible = false;\r\n            this.textureManager.gc();\r\n            this.ctx.root.visible = true;\r\n        } else {\r\n            this.textureManager.gc();\r\n        }\r\n    }\r\n\r\n    gcRenderTextureMemory(aggressive = false) {\r\n        if (aggressive && this.root.visible) {\r\n            // Make sure that ALL render textures are cleaned;\r\n            this.root.visible = false;\r\n            this.ctx.freeUnusedRenderTextures(0);\r\n            this.root.visible = true;\r\n        } else {\r\n            this.ctx.freeUnusedRenderTextures(0);\r\n        }\r\n    }\r\n\r\n    getDrawingCanvas() {\r\n        return this.platform.getDrawingCanvas();\r\n    }\r\n\r\n    update() {\r\n        this.ctx.update()\r\n    }\r\n\r\n    addServiceProvider(serviceprovider) {\r\n        if (Utils.isSpark) {\r\n            this.platform.addServiceProvider(serviceprovider);\r\n        }\r\n    }\r\n\r\n    getChildrenByPosition(x, y) {\r\n        const children = [];\r\n        this.root.core.update();\r\n        this.root.core.collectAtCoord(x, y, children);\r\n\r\n        return children;\r\n    }\r\n}\r\n\r\nimport Element from \"./Element.mjs\";\r\nimport StageUtils from \"./StageUtils.mjs\";\r\nimport TextureManager from \"./TextureManager.mjs\";\r\nimport TextureThrottler from \"./TextureThrottler.mjs\";\r\nimport CoreContext from \"./core/CoreContext.mjs\";\r\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\r\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\r\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"./Component.mjs\";\r\nimport Utils from \"../tree/Utils.mjs\";\r\n\r\nexport default class Application extends Component {\r\n\r\n    constructor(options = {}, properties) {\r\n        // Save options temporarily to avoid having to pass it through the constructor.\r\n        Application._temp_options = options;\r\n\r\n        // Booting flag is used to postpone updateFocusSettings;\r\n        Application.booting = true;\r\n        const stage = new Stage(options.stage);\r\n        super(stage, properties);\r\n        Application.booting = false;\r\n\r\n        this.__updateFocusCounter = 0;\r\n        this.__keypressTimers = new Map();\r\n        this.__hoveredChild = null;\r\n\r\n        // We must construct while the application is not yet attached.\r\n        // That's why we 'init' the stage later (which actually emits the attach event).\r\n        this.stage.init();\r\n\r\n        // Initially, the focus settings are updated after both the stage and application are constructed.\r\n        this.updateFocusSettings();\r\n\r\n        this.__keymap = this.getOption('keys');\r\n\r\n        if (this.__keymap) {\r\n            this.stage.platform.registerKeydownHandler((e) => {\r\n                this._receiveKeydown(e);\r\n            });\r\n\r\n            this.stage.platform.registerKeyupHandler((e) => {\r\n                this._receiveKeyup(e);\r\n            });\r\n        }\r\n\r\n        if (this.getOption(\"enablePointer\")) {\r\n            this.stage.platform.registerClickHandler((e) => {\r\n                this._receiveClick(e);\r\n            });\r\n\r\n            this.stage.platform.registerHoverHandler((e) => {\r\n                this._receiveHover(e);\r\n            });\r\n\r\n            this.stage.platform.registerScrollWheelHandler((e) => {\r\n                this._recieveScrollWheel(e);\r\n            });\r\n\r\n            this.cursor = 'default';\r\n        }\r\n    }\r\n\r\n    getOption(name) {\r\n        return this.__options[name];\r\n    }\r\n\r\n    _setOptions(o) {\r\n        this.__options = {};\r\n\r\n        let opt = (name, def) => {\r\n            let value = o[name];\r\n\r\n            if (value === undefined) {\r\n                this.__options[name] = def;\r\n            } else {\r\n                this.__options[name] = value;\r\n            }\r\n        }\r\n\r\n        opt('debug', false);\r\n        opt('keys', {\r\n            38: \"Up\",\r\n            40: \"Down\",\r\n            37: \"Left\",\r\n            39: \"Right\",\r\n            13: \"Enter\",\r\n            8: \"Back\",\r\n            27: \"Exit\"\r\n        });\r\n        opt('enablePointer', false);\r\n    }\r\n\r\n    __construct() {\r\n        this.stage.setApplication(this);\r\n\r\n        this._setOptions(Application._temp_options);\r\n        delete Application._temp_options;\r\n\r\n        super.__construct();\r\n    }\r\n\r\n    __init() {\r\n        super.__init();\r\n        this.__updateFocus();\r\n    }\r\n\r\n    updateFocusPath() {\r\n        this.__updateFocus();\r\n    }\r\n\r\n    __updateFocus() {\r\n        const notOverridden = this.__updateFocusRec();\r\n\r\n        if (!Application.booting && notOverridden) {\r\n            this.updateFocusSettings();\r\n        }\r\n    }\r\n\r\n    __updateFocusRec() {\r\n        const updateFocusId = ++this.__updateFocusCounter;\r\n        this.__updateFocusId = updateFocusId;\r\n\r\n        const newFocusPath = this.__getFocusPath();\r\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\r\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\r\n\r\n        if (!prevFocusedComponent) {\r\n            // Focus events.\r\n            this._focusPath = [];\r\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\r\n                this._focusPath.push(newFocusPath[i]);\r\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\r\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\r\n                if (focusOverridden) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\r\n            let index;\r\n            for (index = 0; index < m; index++) {\r\n                if (this._focusPath[index] !== newFocusPath[index]) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\r\n\r\n                if (this.getOption('debug')) {\r\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\r\n                }\r\n\r\n                // Unfocus events.\r\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\r\n                    const unfocusedElement = this._focusPath.pop();\r\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\r\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\r\n                    if (focusOverridden) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Focus events.\r\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\r\n                    this._focusPath.push(newFocusPath[i]);\r\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\r\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\r\n                    if (focusOverridden) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Focus changed events.\r\n                for (let i = 0; i < index; i++) {\r\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    updateFocusSettings() {\r\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\r\n\r\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\r\n        // focus directly (such as the application background).\r\n        const focusSettings = {};\r\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\r\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\r\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\r\n                this._focusPath[i]._setFocusSettings(focusSettings);\r\n            }\r\n        }\r\n\r\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\r\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\r\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\r\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\r\n            }\r\n        }\r\n\r\n        this.__prevFocusSettings = focusSettings;\r\n    }\r\n\r\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\r\n        // Override to handle focus-based settings.\r\n    }\r\n\r\n    __getFocusPath() {\r\n        const path = [this];\r\n        let current = this;\r\n        do {\r\n            const nextFocus = current._getFocused();\r\n            if (!nextFocus || (nextFocus === current)) {\r\n                // Found!;\r\n                break;\r\n            }\r\n\r\n\r\n            let ptr = nextFocus.cparent;\r\n            if (ptr === current) {\r\n                path.push(nextFocus);\r\n            } else {\r\n                // Not an immediate child: include full path to descendant.\r\n                const newParts = [nextFocus];\r\n                do {\r\n                    if (!ptr) {\r\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\r\n                    }\r\n                    newParts.push(ptr);\r\n                    ptr = ptr.cparent;\r\n                } while (ptr !== current);\r\n\r\n                // Add them reversed.\r\n                for (let i = 0, n = newParts.length; i < n; i++) {\r\n                    path.push(newParts[n - i - 1]);\r\n                }\r\n            }\r\n\r\n            current = nextFocus;\r\n        } while (true);\r\n\r\n        return path;\r\n    }\r\n\r\n    get focusPath() {\r\n        return this._focusPath;\r\n    }\r\n\r\n    /**\r\n     * Injects an event in the state machines, top-down from application to focused component.\r\n     */\r\n    focusTopDownEvent(events, ...args) {\r\n        const path = this.focusPath;\r\n        const n = path.length;\r\n\r\n        // Multiple events.\r\n        for (let i = 0; i < n; i++) {\r\n            const event = path[i]._getMostSpecificHandledMember(events);\r\n            if (event !== undefined) {\r\n                const returnValue = path[i][event](...args);\r\n                if (returnValue !== false) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Injects an event in the state machines, bottom-up from focused component to application.\r\n     */\r\n    focusBottomUpEvent(events, ...args) {\r\n        const path = this.focusPath;\r\n        const n = path.length;\r\n\r\n        // Multiple events.\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            const event = path[i]._getMostSpecificHandledMember(events);\r\n            if (event !== undefined) {\r\n                const returnValue = path[i][event](...args);\r\n                if (returnValue !== false) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _receiveKeydown(e) {\r\n        const obj = e;\r\n        const key = this.__keymap[e.keyCode];\r\n        const path = this.focusPath;\r\n\r\n        let keys;\r\n        if (key) {\r\n            keys = Array.isArray(key) ? key : [key];\r\n        }\r\n\r\n        if (keys) {\r\n            for (let i = 0, n = keys.length; i < n; i++) {\r\n                const hasTimer = this.__keypressTimers.has(keys[i]);\r\n                // prevent event from getting fired when the timeout is still active\r\n                if (path[path.length - 1].longpress && hasTimer) {\r\n                    return;\r\n                }\r\n\r\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\r\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\r\n                }\r\n            }\r\n        } else {\r\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\r\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\r\n            }\r\n        }\r\n\r\n        this.updateFocusPath();\r\n\r\n        const consumer = path[path.length - 1];\r\n\r\n        if (keys && consumer.longpress) {\r\n            for (let i = 0, n = keys.length; i < n; i++) {\r\n                this._startLongpressTimer(keys[i], consumer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Keyup listener\r\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\r\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\r\n     *\r\n     * @param e\r\n     * @private\r\n     */\r\n    _receiveKeyup(e) {\r\n        const obj = e;\r\n        const key = this.__keymap[e.keyCode];\r\n\r\n        let keys;\r\n        if (key) {\r\n            keys = Array.isArray(key) ? key : [key];\r\n        }\r\n\r\n        if (keys) {\r\n            for (let i = 0, n = keys.length; i < n; i++) {\r\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\r\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\r\n                }\r\n            }\r\n        } else {\r\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\r\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\r\n            }\r\n        }\r\n\r\n        this.updateFocusPath();\r\n\r\n        if (keys) {\r\n            for (let i = 0, n = keys.length; i < n; i++) {\r\n                if (this.__keypressTimers.has(keys[i])) {\r\n                    // keyup has fired before end of timeout so we clear it\r\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\r\n                    // delete so we can register it again\r\n                    this.__keypressTimers.delete(keys[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\r\n     * before the timer goes off.\r\n     *\r\n     * If key is not release (keyup) the longpress handler will be fired.\r\n     * Configuration can be via the Components template:\r\n     *\r\n     * static _template() {\r\n     *     return {\r\n     *         w:100, h:100,\r\n     *         longpress:{up:700, down:500}\r\n     *     }\r\n     * }     *\r\n     * // this will get called when up has been pressed for 700ms\r\n     * _handleUpLong() {\r\n     *\r\n     * }\r\n     *\r\n     * @param key\r\n     * @param element\r\n     * @private\r\n     */\r\n    _startLongpressTimer(key, element) {\r\n        const config = element.longpress;\r\n        const lookup = key.toLowerCase();\r\n\r\n        if (config[lookup]) {\r\n            const timeout = config[lookup];\r\n            if (!Utils.isNumber(timeout)) {\r\n                element._throwError(\"config value for longpress must be a number\");\r\n            } else {\r\n                this.__keypressTimers.set(key, setTimeout(() => {\r\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\r\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\r\n                    }\r\n\r\n                    this.__keypressTimers.delete(key);\r\n                }, timeout || 500 /* prevent 0ms */));\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    _recieveScrollWheel(e) {\r\n        const obj = e;\r\n        const { clientX, clientY } = obj;\r\n\r\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\r\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\r\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\r\n            }\r\n        }\r\n    }\r\n\r\n    fireTopDownScrollWheelHandler(event, obj) {\r\n        let children = this.stage.application.children;\r\n        let affected = this._findChildren([], children).reverse();\r\n        let n = affected.length;\r\n\r\n        while (n--) {\r\n            const child = affected[n];\r\n            if (child && child[event]) {\r\n                child._captureScroll(obj);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    fireBottomUpScrollWheelHandler(event, obj) {\r\n        const { clientX, clientY } = obj;\r\n        const target = this._getTargetChild(clientX, clientY);\r\n        let child = target;\r\n\r\n        // Search tree bottom up for a handler\r\n        while (child !== null) {\r\n            if (child && child[event]) {\r\n                child._handleScroll(obj);\r\n                return true;\r\n            }\r\n            child = child.parent;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _receiveClick(e) {\r\n        const obj = e;\r\n        const { clientX, clientY } = obj;\r\n\r\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\r\n            this.stage.application.fireBottomUpClickHandler(obj);\r\n        }\r\n    }\r\n\r\n    fireBottomUpClickHandler(obj) {\r\n        const { clientX, clientY } = obj;\r\n        const target = this._getTargetChild(clientX, clientY);\r\n        const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\r\n        let child = target;\r\n\r\n        // Search tree bottom up for a handler\r\n        while (child !== null) {\r\n            if (child && child[\"_handleClick\"]) {\r\n                const { px, py } = child.core._worldContext;\r\n                const cx = px * precision;\r\n                const cy = py * precision;\r\n\r\n                const localCoords = {\r\n                    x: clientX - cx,\r\n                    y: clientY - cy\r\n                }\r\n\r\n                const returnValue = child._handleClick(target, localCoords);\r\n                if (returnValue !== false) {\r\n                    break;\r\n                }\r\n            }\r\n            child = child.parent;\r\n        }\r\n    }\r\n\r\n    _receiveHover(e) {\r\n        const obj = e;\r\n        const { clientX, clientY } = obj;\r\n\r\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\r\n            this.stage.application.fireBottomUpHoverHandler(obj);\r\n        }\r\n    }\r\n\r\n    fireBottomUpHoverHandler(obj) {\r\n        const { clientX, clientY } = obj;\r\n        const target = this._getTargetChild(clientX, clientY);\r\n\r\n        // Only fire handlers when pointer target changes\r\n        if (target !== this.__hoveredChild) {\r\n\r\n            let hoveredBranch = new Set();\r\n            let newHoveredBranch = new Set();\r\n\r\n            if (target) {\r\n                newHoveredBranch = new Set(target.getAncestors());\r\n            }\r\n\r\n            if (this.__hoveredChild) {\r\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\r\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\r\n                    const c = Component.getComponent(elem);\r\n                    if (c[\"_handleUnhover\"]) {\r\n                        c._handleUnhover(elem);\r\n                    }\r\n                    if (elem.parent && elem.parent.cursor) {\r\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.__hoveredChild = target;\r\n\r\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\r\n            for (const elem of diffBranch) {\r\n                const c = Component.getComponent(elem);\r\n                if (c[\"_handleHover\"]) {\r\n                    c._handleHover(elem);\r\n                }\r\n            }\r\n\r\n            // New element hover cursor\r\n            const lastElement = diffBranch[0];\r\n            if (lastElement && lastElement.cursor) {\r\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\r\n            }\r\n\r\n            // Rerun _handleHover for target element in case it's been hovered\r\n            // back from its child\r\n            if (diffBranch.length === 0 && target) {\r\n                const c = Component.getComponent(target);\r\n                if (c[\"_handleHover\"]) {\r\n                    c._handleHover(target);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _getTargetChild(clientX, clientY) {\r\n        let children = this.stage.application.children;\r\n        let affected = this._findChildren([], children);\r\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\r\n\r\n        hoverableChildren.sort((a, b) => {\r\n            // Sort by zIndex and then id\r\n            if (a.zIndex > b.zIndex) {\r\n                return 1;\r\n            } else if (a.zIndex < b.zIndex) {\r\n                return -1;\r\n            } else {\r\n                return a.id > b.id ? 1 : -1;\r\n            }\r\n        });\r\n\r\n        if (hoverableChildren.length) {\r\n            // Assume target has highest zIndex (id when zIndex equal)\r\n            return hoverableChildren.slice(-1)[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _findChildren(bucket, children) {\r\n        let n = children.length;\r\n        while (n--) {\r\n            const child = children[n];\r\n            // only add active children\r\n            if (child.__active && child.collision) {\r\n                if (child.collision === true) {\r\n                    bucket.push(child);\r\n                }\r\n                if (child.hasChildren()) {\r\n                    this._findChildren(bucket, child.children);\r\n                }\r\n            }\r\n        }\r\n        return bucket;\r\n    }\r\n\r\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\r\n        let n = affectedChildren.length;\r\n        const candidates = [];\r\n\r\n        // loop through affected children\r\n        // and perform collision detection\r\n        while (n--) {\r\n            const child = affectedChildren[n];\r\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\r\n            const ctx = child.core._worldContext;\r\n\r\n            const cx = ctx.px * precision;\r\n            const cy = ctx.py * precision;\r\n            const cw = child.finalW * ctx.ta * precision;\r\n            const ch = child.finalH * ctx.td * precision;\r\n\r\n            if (cx > this.stage.w || cy > this.stage.h) {\r\n                continue;\r\n            }\r\n\r\n            if (child.parent.core._scissor) {\r\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\r\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\r\n                    continue\r\n            }\r\n\r\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\r\n                candidates.push(child);\r\n            }\r\n        }\r\n        return candidates;\r\n    }\r\n\r\n    _testCollision(px, py, cx, cy, cw, ch) {\r\n        if (px >= cx &&\r\n            px <= cx + cw &&\r\n            py >= cy &&\r\n            py <= cy + ch) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    destroy() {\r\n        if (!this._destroyed) {\r\n            this._destroy();\r\n            this.stage.destroy();\r\n            this._destroyed = true;\r\n        }\r\n    }\r\n\r\n    _destroy() {\r\n        // This forces the _detach, _disabled and _active events to be called.\r\n        this.stage.setApplication(undefined);\r\n        this._updateAttachedFlag();\r\n        this._updateEnabledFlag();\r\n\r\n        if (this.__keypressTimers.size) {\r\n            for (const timer of this.__keypressTimers.values()) {\r\n                clearTimeout(timer);\r\n            }\r\n\r\n            this.__keypressTimers.clear();\r\n        }\r\n    }\r\n\r\n    getCanvas() {\r\n        return this.stage.getCanvas();\r\n    }\r\n\r\n}\r\n\r\nimport Stage from \"../tree/Stage.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class StaticCanvasTexture extends Texture {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this._factory = undefined;\r\n        this._lookupId = undefined;\r\n    }\r\n\r\n    set content({factory, lookupId = undefined}) {\r\n        this._factory = factory;\r\n        this._lookupId = lookupId;\r\n        this._changed();\r\n    }\r\n\r\n    _getIsValid() {\r\n        return !!this._factory;\r\n    }\r\n\r\n    _getLookupId() {\r\n        return this._lookupId;\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        const f = this._factory;\r\n        return (cb) => {\r\n            return f((err, canvas) => {\r\n                if (err) {\r\n                    return cb(err);\r\n                }\r\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\r\n            }, this.stage);\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../tree/Utils.mjs\";\r\nimport StageUtils from \"../tree/StageUtils.mjs\";\r\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\r\n\r\nexport default class Tools {\r\n\r\n    static getCanvasTexture(canvasFactory, lookupId) {\r\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\r\n    }\r\n\r\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\r\n        if (!Array.isArray(radius)){\r\n            // upper-left, upper-right, bottom-right, bottom-left.\r\n            radius = [radius, radius, radius, radius];\r\n        }\r\n\r\n        let factory = (cb, stage) => {\r\n            if (Utils.isSpark) {\r\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\r\n            } else {\r\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\r\n            }\r\n        };\r\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\r\n        return Tools.getCanvasTexture(factory, id);\r\n    }\r\n\r\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\r\n        if (fill === undefined) fill = true;\r\n        if (strokeWidth === undefined) strokeWidth = 0;\r\n\r\n        let canvas = stage.platform.getDrawingCanvas();\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.imageSmoothingEnabled = true;\r\n\r\n        canvas.width = w + strokeWidth + 2;\r\n        canvas.height = h + strokeWidth + 2;\r\n\r\n        ctx.beginPath();\r\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\r\n\r\n        ctx.moveTo(x + radius[0], y);\r\n        ctx.lineTo(x + w - radius[1], y);\r\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\r\n        ctx.lineTo(x + w, y + h - radius[2]);\r\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\r\n        ctx.lineTo(x + radius[3], y + h);\r\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\r\n        ctx.lineTo(x, y + radius[0]);\r\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\r\n        ctx.closePath();\r\n\r\n        if (fill) {\r\n            if (Utils.isNumber(fillColor)) {\r\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\r\n            } else {\r\n                ctx.fillStyle = \"white\";\r\n            }\r\n            ctx.fill();\r\n        }\r\n\r\n        if (strokeWidth) {\r\n            if (Utils.isNumber(strokeColor)) {\r\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\r\n            } else {\r\n                ctx.strokeStyle = \"white\";\r\n            }\r\n            ctx.lineWidth = strokeWidth;\r\n            ctx.stroke();\r\n        }\r\n\r\n        return canvas;\r\n    }\r\n\r\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\r\n        if (!Array.isArray(radius)){\r\n            // upper-left, upper-right, bottom-right, bottom-left.\r\n            radius = [radius, radius, radius, radius];\r\n        }\r\n\r\n        let factory = (cb, stage) => {\r\n            if (Utils.isSpark) {\r\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\r\n            } else {\r\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\r\n            }\r\n        };\r\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\r\n        return Tools.getCanvasTexture(factory, id);\r\n    }\r\n\r\n    static createShadowRect(stage, w, h, radius, blur, margin) {\r\n        let canvas = stage.platform.getDrawingCanvas();\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.imageSmoothingEnabled = true;\r\n\r\n        canvas.width = w + margin * 2;\r\n        canvas.height = h + margin * 2;\r\n\r\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\r\n        ctx.globalAlpha = 0.01;\r\n        ctx.fillRect(0, 0, 0.01, 0.01);\r\n        ctx.globalAlpha = 1.0;\r\n\r\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\r\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\r\n        ctx.shadowBlur = blur;\r\n        ctx.shadowOffsetX = (w + 10) + margin;\r\n        ctx.shadowOffsetY = margin;\r\n\r\n        ctx.beginPath();\r\n        const x = -(w + 10);\r\n        const y = 0;\r\n\r\n        ctx.moveTo(x + radius[0], y);\r\n        ctx.lineTo(x + w - radius[1], y);\r\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\r\n        ctx.lineTo(x + w, y + h - radius[2]);\r\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\r\n        ctx.lineTo(x + radius[3], y + h);\r\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\r\n        ctx.lineTo(x, y + radius[0]);\r\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        return canvas;\r\n    }\r\n\r\n    static getSvgTexture(url, w, h) {\r\n        let factory = (cb, stage) => {\r\n            if (Utils.isSpark) {\r\n                stage.platform.createSvg(cb, stage, url, w, h);\r\n            } else {\r\n                this.createSvg(cb, stage, url, w, h);\r\n            }\r\n        };\r\n        let id = 'svg' + [w, h, url].join(\",\");\r\n        return Tools.getCanvasTexture(factory, id);\r\n    }\r\n\r\n    static createSvg(cb, stage, url, w, h) {\r\n        let canvas = stage.platform.getDrawingCanvas();\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.imageSmoothingEnabled = true;\r\n\r\n        let img = new Image();\r\n        img.onload = () => {\r\n            canvas.width = w;\r\n            canvas.height = h;\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            cb(null, canvas);\r\n        }\r\n        img.onerror = (err) => {\r\n            cb(err);\r\n        }\r\n\r\n        // On the PS4 platform setting the `crossOrigin` attribute on images\r\n        // can cause CORS failures.\r\n        if (!Utils.isPS4) {\r\n            img.crossOrigin = \"Anonymous\";\r\n        }\r\n\r\n        img.src = url;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../tree/Utils.mjs\";\r\n\r\nexport default class ObjMerger {\r\n\r\n    static isMf(f) {\r\n        return Utils.isFunction(f) && f.__mf;\r\n    }\r\n\r\n    static mf(f) {\r\n        // Set as merge function.\r\n        f.__mf = true;\r\n        return f;\r\n    }\r\n\r\n    static merge(a, b) {\r\n        const aks = Object.keys(a);\r\n        const bks = Object.keys(b);\r\n\r\n        if (!bks.length) {\r\n            return a;\r\n        }\r\n\r\n        // Create index array for all elements.\r\n        const ai = {};\r\n        const bi = {};\r\n        for (let i = 0, n = bks.length; i < n; i++) {\r\n            const key = bks[i];\r\n            ai[key] = -1;\r\n            bi[key] = i;\r\n        }\r\n        for (let i = 0, n = aks.length; i < n; i++) {\r\n            const key = aks[i];\r\n            ai[key] = i;\r\n            if (bi[key] === undefined) {\r\n                bi[key] = -1;\r\n            }\r\n        }\r\n\r\n        const aksl = aks.length;\r\n\r\n        const result = {};\r\n        for (let i = 0, n = bks.length; i < n; i++) {\r\n            const key = bks[i];\r\n\r\n            // Prepend all items in a that are not in b - before the now added b attribute.\r\n            const aIndex = ai[key];\r\n            let curIndex = aIndex;\r\n            while(--curIndex >= 0) {\r\n                const akey = aks[curIndex];\r\n                if (bi[akey] !== -1) {\r\n                    // Already found? Stop processing.\r\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\r\n                    break;\r\n                }\r\n            }\r\n            while(++curIndex < aIndex) {\r\n                const akey = aks[curIndex];\r\n                result[akey] = a[akey];\r\n            }\r\n\r\n            const bv = b[key];\r\n            const av = a[key];\r\n            let r;\r\n            if (this.isMf(bv)) {\r\n                r = bv(av);\r\n            } else {\r\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\r\n                    r = bv;\r\n                } else {\r\n                    r = ObjMerger.merge(av, bv);\r\n                }\r\n            }\r\n\r\n            // When marked as undefined, property is deleted.\r\n            if (r !== undefined) {\r\n                result[key] = r;\r\n            }\r\n        }\r\n\r\n        // Append remaining final items in a.\r\n        let curIndex = aksl;\r\n        while(--curIndex >= 0) {\r\n            const akey = aks[curIndex];\r\n            if (bi[akey] !== -1) {\r\n                break;\r\n            }\r\n        }\r\n        while(++curIndex < aksl) {\r\n            const akey = aks[curIndex];\r\n            result[akey] = a[akey];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Manages the list of children for an element.\r\n */\r\n\r\nimport ObjectList from \"../tree/ObjectList.mjs\";\r\n\r\nexport default class ObjectListProxy extends ObjectList {\r\n\r\n    constructor(target) {\r\n        super();\r\n        this._target = target;\r\n    }\r\n\r\n    onAdd(item, index) {\r\n        this._target.addAt(item, index);\r\n    }\r\n\r\n    onRemove(item, index) {\r\n        this._target.removeAt(index);\r\n    }\r\n\r\n    onSync(removed, added, order) {\r\n        this._target._setByArray(order);\r\n    }\r\n\r\n    onSet(item, index) {\r\n        this._target.setAt(item, index);\r\n    }\r\n\r\n    onMove(item, fromIndex, toIndex) {\r\n        this._target.setAt(item, toIndex);\r\n    }\r\n\r\n    createItem(object) {\r\n        return this._target.createItem(object);\r\n    }\r\n\r\n    isItem(object) {\r\n        return this._target.isItem(object);\r\n    }\r\n\r\n}\r\n\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Manages the list of children for an element.\r\n */\r\n\r\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\r\n\r\nexport default class ObjectListWrapper extends ObjectListProxy {\r\n\r\n    constructor(target, wrap) {\r\n        super(target);\r\n        this._wrap = wrap;\r\n    }\r\n\r\n    wrap(item) {\r\n        let wrapper = this._wrap(item);\r\n        item._wrapper = wrapper;\r\n        return wrapper;\r\n    }\r\n\r\n    onAdd(item, index) {\r\n        item = this.wrap(item);\r\n        super.onAdd(item, index);\r\n    }\r\n\r\n    onRemove(item, index) {\r\n        super.onRemove(item, index);\r\n    }\r\n\r\n    onSync(removed, added, order) {\r\n        added.forEach(a => this.wrap(a));\r\n        order = order.map(a => a._wrapper);\r\n        super.onSync(removed, added, order);\r\n    }\r\n\r\n    onSet(item, index) {\r\n        item = this.wrap(item);\r\n        super.onSet(item, index);\r\n    }\r\n\r\n    onMove(item, fromIndex, toIndex) {\r\n        super.onMove(item, fromIndex, toIndex);\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class NoiseTexture extends Texture {\r\n\r\n    _getLookupId() {\r\n        return '__noise';\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        const gl = this.stage.gl;\r\n        return function(cb) {\r\n            const noise = new Uint8Array(128 * 128 * 4);\r\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\r\n                const v = Math.floor(Math.random() * 256);\r\n                noise[i] = v;\r\n                noise[i+1] = v;\r\n                noise[i+2] = v;\r\n                noise[i+3] = 255;\r\n            }\r\n            const texParams = {}\r\n\r\n            if (gl) {\r\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\r\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\r\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\r\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\r\n            }\r\n\r\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class HtmlTexture extends Texture {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this._htmlElement = undefined;\r\n        this._scale = 1;\r\n    }\r\n\r\n    set htmlElement(v) {\r\n        this._htmlElement = v;\r\n        this._changed();\r\n    }\r\n\r\n    get htmlElement() {\r\n        return this._htmlElement;\r\n    }\r\n\r\n    set scale(v) {\r\n        this._scale = v;\r\n        this._changed();\r\n    }\r\n\r\n    get scale() {\r\n        return this._scale;\r\n    }\r\n\r\n    set html(v) {\r\n        if (!v) {\r\n            this.htmlElement = undefined;\r\n        } else {\r\n            const d = document.createElement('div');\r\n            d.innerHTML = \"<div>\" + v + \"</div>\";\r\n            this.htmlElement = d.firstElementChild;\r\n        }\r\n    }\r\n\r\n    get html() {\r\n        return this._htmlElement.innerHTML;\r\n    }\r\n\r\n    _getIsValid() {\r\n        return this.htmlElement;\r\n    }\r\n\r\n    _getLookupId() {\r\n        return this._scale + \":\" + this._htmlElement.innerHTML;\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        const htmlElement = this._htmlElement;\r\n        const scale = this._scale;\r\n        return function(cb) {\r\n            if (!window.html2canvas) {\r\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\r\n            }\r\n\r\n            const area = HtmlTexture.getPreloadArea();\r\n            area.appendChild(htmlElement);\r\n\r\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\r\n                area.removeChild(htmlElement);\r\n                if (canvas.height === 0) {\r\n                    return cb(new Error(\"Canvas height is 0\"));\r\n                }\r\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\r\n            }).catch(e => {\r\n                console.error('[Lightning]', e);\r\n            });\r\n        }\r\n    }\r\n\r\n    static getPreloadArea() {\r\n        if (!this._preloadArea) {\r\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\r\n            this._preloadArea = document.createElement('div');\r\n            if (this._preloadArea.attachShadow) {\r\n                // Use a shadow DOM if possible to prevent styling from interfering.\r\n                this._preloadArea.attachShadow({mode: 'closed'});\r\n            }\r\n            this._preloadArea.style.opacity = 0;\r\n            this._preloadArea.style.pointerEvents = 'none';\r\n            this._preloadArea.style.position = 'fixed';\r\n            this._preloadArea.style.display = 'block';\r\n            this._preloadArea.style.top = '100vh';\r\n            this._preloadArea.style.overflow = 'hidden';\r\n            document.body.appendChild(this._preloadArea);\r\n        }\r\n        return this._preloadArea;\r\n    }\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Texture from \"../tree/Texture.mjs\";\r\n\r\nexport default class StaticTexture extends Texture {\r\n\r\n    constructor(stage, options) {\r\n        super(stage);\r\n\r\n        this._options = options;\r\n    }\r\n\r\n    set options(v) {\r\n        if (this._options !== v) {\r\n            this._options = v;\r\n            this._changed();\r\n        }\r\n    }\r\n\r\n    get options() {\r\n        return this._options;\r\n    }\r\n\r\n    _getIsValid() {\r\n        return !!this._options;\r\n    }\r\n\r\n    _getSourceLoader() {\r\n        return (cb) => {\r\n            cb(null, this._options);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"../application/Component.mjs\";\r\n\r\nexport default class ListComponent extends Component {\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this._wrapper = super._children.a({});\r\n\r\n        this._reloadVisibleElements = false;\r\n\r\n        this._visibleItems = new Set();\r\n\r\n        this._index = 0;\r\n\r\n        this._started = false;\r\n\r\n        /**\r\n         * The transition definition that is being used when scrolling the items.\r\n         * @type TransitionSettings\r\n         */\r\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\r\n\r\n        /**\r\n         * The scroll area size in pixels per item.\r\n         */\r\n        this._itemSize = 100;\r\n\r\n        this._viewportScrollOffset = 0;\r\n\r\n        this._itemScrollOffset = 0;\r\n\r\n        /**\r\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\r\n         */\r\n        this._roll = false;\r\n\r\n        /**\r\n         * Allows restricting the start scroll position.\r\n         */\r\n        this._rollMin = 0;\r\n\r\n        /**\r\n         * Allows restricting the end scroll position.\r\n         */\r\n        this._rollMax = 0;\r\n\r\n        /**\r\n         * Definition for a custom animation that is applied when an item is (partially) selected.\r\n         * @type AnimationSettings\r\n         */\r\n        this._progressAnimation = null;\r\n\r\n        /**\r\n         * Inverts the scrolling direction.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._invertDirection = false;\r\n\r\n        /**\r\n         * Layout the items horizontally or vertically?\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._horizontal = true;\r\n\r\n        this.itemList = new ListItems(this);\r\n    }\r\n\r\n    _allowChildrenAccess() {\r\n        return false;\r\n    }\r\n\r\n    get items() {\r\n        return this.itemList.get();\r\n    }\r\n\r\n    set items(children) {\r\n        this.itemList.patch(children);\r\n    }\r\n\r\n    start() {\r\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\r\n        this._scrollTransition = this._wrapper.transition(this.property);\r\n        this._scrollTransition.on('progress', p => this.update());\r\n\r\n        this.setIndex(0, true, true);\r\n\r\n        this._started = true;\r\n\r\n        this.update();\r\n    }\r\n\r\n    setIndex(index, immediate = false, closest = false) {\r\n        let nElements = this.length;\r\n        if (!nElements) return;\r\n\r\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\r\n\r\n        if (closest) {\r\n            // Scroll to same offset closest to the index.\r\n            let offset = Utils.getModuloIndex(index, nElements);\r\n            let o = Utils.getModuloIndex(this.index, nElements);\r\n            let diff = offset - o;\r\n            if (diff > 0.5 * nElements) {\r\n                diff -= nElements;\r\n            } else if (diff < -0.5 * nElements) {\r\n                diff += nElements;\r\n            }\r\n            this._index += diff;\r\n        } else {\r\n            this._index = index;\r\n        }\r\n\r\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\r\n            this._index = Utils.getModuloIndex(this._index, nElements);\r\n        }\r\n\r\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\r\n        let value = direction * this._index * this._itemSize;\r\n\r\n        if (this._roll) {\r\n            let min, max, scrollDelta;\r\n            if (direction == 1) {\r\n                max = (nElements - 1) * this._itemSize;\r\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\r\n\r\n                max -= scrollDelta;\r\n\r\n                min = this.viewportSize - (this._itemSize + scrollDelta);\r\n\r\n                if (this._rollMin) min -= this._rollMin;\r\n                if (this._rollMax) max += this._rollMax;\r\n\r\n                value = Math.max(Math.min(value, max), min);\r\n            } else {\r\n                max = (nElements * this._itemSize - this.viewportSize);\r\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\r\n\r\n                max += scrollDelta;\r\n\r\n                let min = scrollDelta;\r\n\r\n                if (this._rollMin) min -= this._rollMin;\r\n                if (this._rollMax) max += this._rollMax;\r\n\r\n                value = Math.min(Math.max(-max, value), -min);\r\n            }\r\n        }\r\n\r\n        this._scrollTransition.start(value);\r\n\r\n        if (immediate) {\r\n            this._scrollTransition.finish();\r\n        }\r\n\r\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\r\n    }\r\n\r\n    getAxisPosition() {\r\n        let target = -this._scrollTransition._targetValue;\r\n\r\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\r\n        let value = -direction * this._index * this._itemSize;\r\n\r\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\r\n    }\r\n\r\n    update() {\r\n        if (!this._started) return;\r\n\r\n        let nElements = this.length;\r\n        if (!nElements) return;\r\n\r\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\r\n\r\n        // Map position to index value.\r\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\r\n\r\n        let viewportSize = this.viewportSize;\r\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\r\n        v += scrollDelta;\r\n\r\n        let s, e, ps, pe;\r\n        if (direction == -1) {\r\n            s = Math.floor(-v / this._itemSize);\r\n            ps = 1 - ((-v / this._itemSize) - s);\r\n            e = Math.floor((viewportSize - v) / this._itemSize);\r\n            pe = (((viewportSize - v) / this._itemSize) - e);\r\n        } else {\r\n            s = Math.ceil(v / this._itemSize);\r\n            ps = 1 + (v / this._itemSize) - s;\r\n            e = Math.ceil((v - viewportSize) / this._itemSize);\r\n            pe = e - ((v - viewportSize) / this._itemSize);\r\n        }\r\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\r\n            // Don't show additional items.\r\n            if (e >= nElements) {\r\n                e = nElements - 1;\r\n                pe = 1;\r\n            }\r\n            if (s >= nElements) {\r\n                s = nElements - 1;\r\n                ps = 1;\r\n            }\r\n            if (e <= -1) {\r\n                e = 0;\r\n                pe = 1;\r\n            }\r\n            if (s <= -1) {\r\n                s = 0;\r\n                ps = 1;\r\n            }\r\n        }\r\n\r\n        let offset = -direction * s * this._itemSize;\r\n\r\n        let item;\r\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\r\n            let realIndex = Utils.getModuloIndex(index, nElements);\r\n\r\n            let element = this.getElement(realIndex);\r\n            item = element.parent;\r\n            this._visibleItems.delete(item);\r\n            if (this._horizontal) {\r\n                item.x = offset + scrollDelta;\r\n            } else {\r\n                item.y = offset + scrollDelta;\r\n            }\r\n\r\n            let wasVisible = item.visible;\r\n            item.visible = true;\r\n\r\n            if (!wasVisible || this._reloadVisibleElements) {\r\n                // Turned visible.\r\n                this.emit('visible', index, realIndex);\r\n            }\r\n\r\n\r\n\r\n            if (this._progressAnimation) {\r\n                let p = 1;\r\n                if (index == s) {\r\n                    p = ps;\r\n                } else if (index == e) {\r\n                    p = pe;\r\n                }\r\n\r\n                // Use animation to progress.\r\n                this._progressAnimation.apply(element, p);\r\n            }\r\n\r\n            offset += this._itemSize;\r\n        }\r\n\r\n        // Handle item visibility.\r\n        let self = this;\r\n        this._visibleItems.forEach(function(invisibleItem) {\r\n            invisibleItem.visible = false;\r\n            self._visibleItems.delete(invisibleItem);\r\n        });\r\n\r\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\r\n            let realIndex = Utils.getModuloIndex(index, nElements);\r\n            this._visibleItems.add(this.getWrapper(realIndex));\r\n        }\r\n\r\n        this._reloadVisibleElements = false;\r\n    }\r\n\r\n    setPrevious() {\r\n        this.setIndex(this._index - 1);\r\n    }\r\n\r\n    setNext() {\r\n        this.setIndex(this._index + 1);\r\n    }\r\n\r\n    getWrapper(index) {\r\n        return this._wrapper.children[index];\r\n    }\r\n\r\n    getElement(index) {\r\n        let e = this._wrapper.children[index];\r\n        return e ? e.children[0] : null;\r\n    }\r\n\r\n    reload() {\r\n        this._reloadVisibleElements = true;\r\n        this.update();\r\n    }\r\n\r\n    get element() {\r\n        let e = this._wrapper.children[this.realIndex];\r\n        return e ? e.children[0] : null;\r\n    }\r\n\r\n    get length() {\r\n        return this._wrapper.children.length;\r\n    }\r\n\r\n    get property() {\r\n        return this._horizontal ? 'x' : 'y';\r\n    }\r\n\r\n    get viewportSize() {\r\n        return this._horizontal ? this.w : this.h;\r\n    }\r\n\r\n    get index() {\r\n        return this._index;\r\n    }\r\n\r\n    get realIndex() {\r\n        return Utils.getModuloIndex(this._index, this.length);\r\n    }\r\n\r\n    get itemSize() {\r\n        return this._itemSize;\r\n    }\r\n\r\n    set itemSize(v) {\r\n        this._itemSize = v;\r\n        this.update();\r\n    }\r\n\r\n    get viewportScrollOffset() {\r\n        return this._viewportScrollOffset;\r\n    }\r\n\r\n    set viewportScrollOffset(v) {\r\n        this._viewportScrollOffset = v;\r\n        this.update();\r\n    }\r\n\r\n    get itemScrollOffset() {\r\n        return this._itemScrollOffset;\r\n    }\r\n\r\n    set itemScrollOffset(v) {\r\n        this._itemScrollOffset = v;\r\n        this.update();\r\n    }\r\n\r\n    get scrollTransitionSettings() {\r\n        return this._scrollTransitionSettings;\r\n    }\r\n\r\n    set scrollTransitionSettings(v) {\r\n        this._scrollTransitionSettings.patch(v);\r\n    }\r\n\r\n    set scrollTransition(v) {\r\n        this._scrollTransitionSettings.patch(v);\r\n    }\r\n\r\n    get scrollTransition() {\r\n        return this._scrollTransition;\r\n    }\r\n\r\n    get progressAnimation() {\r\n        return this._progressAnimation;\r\n    }\r\n\r\n    set progressAnimation(v) {\r\n        if (Utils.isObjectLiteral(v)) {\r\n            this._progressAnimation = this.stage.animations.createSettings(v);\r\n        } else {\r\n            this._progressAnimation = v;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    get roll() {\r\n        return this._roll;\r\n    }\r\n\r\n    set roll(v) {\r\n        this._roll = v;\r\n        this.update();\r\n    }\r\n\r\n    get rollMin() {\r\n        return this._rollMin;\r\n    }\r\n\r\n    set rollMin(v) {\r\n        this._rollMin = v;\r\n        this.update();\r\n    }\r\n\r\n    get rollMax() {\r\n        return this._rollMax;\r\n    }\r\n\r\n    set rollMax(v) {\r\n        this._rollMax = v;\r\n        this.update();\r\n    }\r\n\r\n    get invertDirection() {\r\n        return this._invertDirection;\r\n    }\r\n\r\n    set invertDirection(v) {\r\n        if (!this._started) {\r\n            this._invertDirection = v;\r\n        }\r\n    }\r\n\r\n    get horizontal() {\r\n        return this._horizontal;\r\n    }\r\n\r\n    set horizontal(v) {\r\n        if (v !== this._horizontal) {\r\n            if (!this._started) {\r\n                this._horizontal = v;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\r\nclass ListItems extends ObjectListWrapper {\r\n    constructor(list) {\r\n        let wrap = (item => {\r\n            let parent = item.stage.createElement();\r\n            parent.add(item);\r\n            parent.visible = false;\r\n            return parent;\r\n        })\r\n\r\n        super(list._wrapper._children, wrap);\r\n        this.list = list;\r\n    }\r\n\r\n    onAdd(item, index) {\r\n        super.onAdd(item, index);\r\n        this.checkStarted(index);\r\n    }\r\n\r\n    checkStarted(index) {\r\n        this.list._reloadVisibleElements = true;\r\n        if (!this.list._started) {\r\n            this.list.start();\r\n        } else {\r\n            if (this.list.length === 1) {\r\n                this.list.setIndex(0, true, true);\r\n            } else {\r\n                if (this.list._index >= this.list.length) {\r\n                    this.list.setIndex(0);\r\n                }\r\n            }\r\n            this.list.update();\r\n        }\r\n    }\r\n\r\n    onRemove(item, index) {\r\n        super.onRemove(item, index);\r\n        let ri = this.list.realIndex;\r\n        if (ri === index) {\r\n            if (ri === this.list.length) {\r\n                ri--;\r\n            }\r\n            if (ri >= 0) {\r\n                this.list.setIndex(ri);\r\n            }\r\n        } else if (ri > index) {\r\n            this.list.setIndex(ri - 1);\r\n        }\r\n\r\n        this.list._reloadVisibleElements = true;\r\n    }\r\n\r\n    onSet(item, index) {\r\n        super.onSet(item, index);\r\n        this.checkStarted(index);\r\n    }\r\n\r\n    onSync(removed, added, order) {\r\n        super.onSync(removed, added, order);\r\n        this.checkStarted(0);\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nimport Utils from \"../tree/Utils.mjs\";\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class LinearBlurShader extends DefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n\r\n        this._direction = new Float32Array([1, 0]);\r\n        this._kernelRadius = 1;\r\n    }\r\n\r\n    get x() {\r\n        return this._direction[0];\r\n    }\r\n\r\n    set x(v) {\r\n        this._direction[0] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get y() {\r\n        return this._direction[1];\r\n    }\r\n\r\n    set y(v) {\r\n        this._direction[1] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get kernelRadius() {\r\n        return this._kernelRadius;\r\n    }\r\n\r\n    set kernelRadius(v) {\r\n        this._kernelRadius = v;\r\n        this.redraw();\r\n    }\r\n\r\n\r\n    useDefault() {\r\n        return (this._kernelRadius === 0);\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\r\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\r\n\r\n        const w = operation.getRenderWidth();\r\n        const h = operation.getRenderHeight();\r\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\r\n    }\r\n}\r\n\r\nLinearBlurShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    uniform vec2 resolution;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform vec2 direction;\r\n    uniform int kernelRadius;\r\n    \r\n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\r\n        vec4 color = vec4(0.0);\r\n        vec2 off1 = vec2(1.3333333333333333) * direction;\r\n        color += texture2D(image, uv) * 0.29411764705882354;\r\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\r\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\r\n        return color; \r\n    }\r\n    \r\n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\r\n        vec4 color = vec4(0.0);\r\n        vec2 off1 = vec2(1.3846153846) * direction;\r\n        vec2 off2 = vec2(3.2307692308) * direction;\r\n        color += texture2D(image, uv) * 0.2270270270;\r\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\r\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\r\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\r\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\r\n        return color;\r\n    }\r\n    \r\n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\r\n        vec4 color = vec4(0.0);\r\n        vec2 off1 = vec2(1.411764705882353) * direction;\r\n        vec2 off2 = vec2(3.2941176470588234) * direction;\r\n        vec2 off3 = vec2(5.176470588235294) * direction;\r\n        color += texture2D(image, uv) * 0.1964825501511404;\r\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\r\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\r\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\r\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\r\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\r\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\r\n        return color;\r\n    }    \r\n\r\n    void main(void){\r\n        if (kernelRadius == 1) {\r\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\r\n        } else if (kernelRadius == 2) {\r\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\r\n        } else {\r\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\r\n        }\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\n/**\r\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\r\n */\r\nexport default class BoxBlurShader extends DefaultShader {\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const dx = 1.0 / operation.getTextureWidth(0);\r\n        const dy = 1.0 / operation.getTextureHeight(0);\r\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\r\n    }\r\n\r\n}\r\n\r\nBoxBlurShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    uniform vec2 stepTextureCoord;\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec4 vColor;\r\n    varying vec2 vTextureCoordUl;\r\n    varying vec2 vTextureCoordUr;\r\n    varying vec2 vTextureCoordBl;\r\n    varying vec2 vTextureCoordBr;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\r\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\r\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\r\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nBoxBlurShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoordUl;\r\n    varying vec2 vTextureCoordUr;\r\n    varying vec2 vTextureCoordBl;\r\n    varying vec2 vTextureCoordBr;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    void main(void){\r\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\r\n        gl_FragColor = color * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class BlurShader extends DefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._kernelRadius = 1;\r\n    }\r\n\r\n    get kernelRadius() {\r\n        return this._kernelRadius;\r\n    }\r\n\r\n    set kernelRadius(v) {\r\n        this._kernelRadius = v;\r\n        this.redraw();\r\n    }\r\n\r\n    useDefault() {\r\n        return this._amount === 0;\r\n    }\r\n\r\n    _beforeDrawEl({target}) {\r\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\r\n    }\r\n\r\n    _afterDrawEl({target}) {\r\n        target.ctx.filter = \"none\";\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"../application/Component.mjs\";\r\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\r\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\r\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\r\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\r\nimport Shader from \"../tree/Shader.mjs\";\r\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\r\n\r\nexport default class FastBlurComponent extends Component {\r\n    static _template() {\r\n        return {}\r\n    }\r\n\r\n    get wrap() {\r\n        return this.tag(\"Wrap\");\r\n    }\r\n\r\n    set content(v) {\r\n        return this.wrap.content = v;\r\n    }\r\n\r\n    get content() {\r\n        return this.wrap.content;\r\n    }\r\n\r\n    set padding(v) {\r\n        this.wrap._paddingX = v;\r\n        this.wrap._paddingY = v;\r\n        this.wrap._updateBlurSize();\r\n    }\r\n\r\n    set paddingX(v) {\r\n        this.wrap._paddingX = v;\r\n        this.wrap._updateBlurSize();\r\n    }\r\n\r\n    set paddingY(v) {\r\n        this.wrap._paddingY = v;\r\n        this.wrap._updateBlurSize();\r\n    }\r\n\r\n    set amount(v) {\r\n        return this.wrap.amount = v;\r\n    }\r\n\r\n    get amount() {\r\n        return this.wrap.amount;\r\n    }\r\n\r\n    _onResize() {\r\n        this.wrap.w = this.renderWidth;\r\n        this.wrap.h = this.renderHeight;\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n    _build() {\r\n        this.patch({\r\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nclass C2dFastBlurComponent extends Component {\r\n\r\n    static _template() {\r\n        return {\r\n            forceZIndexContext: true,\r\n            rtt: true,\r\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\r\n        }\r\n    }\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this._textwrap = this.sel(\"Textwrap\");\r\n        this._wrapper = this.sel(\"Textwrap>Content\");\r\n\r\n        this._amount = 0;\r\n        this._paddingX = 0;\r\n        this._paddingY = 0;\r\n\r\n    }\r\n\r\n    static getSpline() {\r\n        if (!this._multiSpline) {\r\n            this._multiSpline = new MultiSpline();\r\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\r\n        }\r\n        return this._multiSpline;\r\n    }\r\n\r\n    get content() {\r\n        return this.sel('Textwrap>Content');\r\n    }\r\n\r\n    set content(v) {\r\n        this.sel('Textwrap>Content').patch(v, true);\r\n    }\r\n\r\n    set padding(v) {\r\n        this._paddingX = v;\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingX(v) {\r\n        this._paddingX = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingY(v) {\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    _updateBlurSize() {\r\n        let w = this.renderWidth;\r\n        let h = this.renderHeight;\r\n\r\n        let paddingX = this._paddingX;\r\n        let paddingY = this._paddingY;\r\n\r\n        this._wrapper.x = paddingX;\r\n        this._textwrap.x = -paddingX;\r\n\r\n        this._wrapper.y = paddingY;\r\n        this._textwrap.y = -paddingY;\r\n\r\n        this._textwrap.w = w + paddingX * 2;\r\n        this._textwrap.h = h + paddingY * 2;\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    /**\r\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\r\n     * Best results for non-fractional values.\r\n     * @param v;\r\n     */\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\r\n    }\r\n\r\n    static _amountToKernelRadius(v) {\r\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nclass WebGLFastBlurComponent extends Component {\r\n\r\n    static _template() {\r\n        const onUpdate = function(element, elementCore) {\r\n            if ((elementCore._recalc & (2 + 128))) {\r\n                const w = elementCore.w;\r\n                const h = elementCore.h;\r\n                let cur = elementCore;\r\n                do {\r\n                    cur = cur._children[0];\r\n                    cur._element.w = w;\r\n                    cur._element.h = h;\r\n                } while(cur._children);\r\n            }\r\n        };\r\n\r\n        return {\r\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\r\n            Layers: {\r\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\r\n            },\r\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\r\n        }\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this._textwrap = this.sel(\"Textwrap\");\r\n        this._wrapper = this.sel(\"Textwrap>Content\");\r\n        this._layers = this.sel(\"Layers\");\r\n        this._output = this.sel(\"Result\");\r\n\r\n        this._amount = 0;\r\n        this._paddingX = 0;\r\n        this._paddingY = 0;\r\n    }\r\n\r\n    _buildLayers() {\r\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\r\n        const filterShaders = filterShaderSettings.map(s => {\r\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\r\n            return shader;\r\n        });\r\n\r\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\r\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\r\n\r\n        // Notice that 1.5 filters should be applied before 1.0 filters.\r\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\r\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\r\n    }\r\n\r\n    _setLayerTexture(element, texture, steps) {\r\n        if (!steps.length) {\r\n            element.texture = texture;\r\n        } else {\r\n            const step = steps.pop();\r\n            const child = element.stage.c({rtt: true, shader: step});\r\n\r\n            // Recurse.\r\n            this._setLayerTexture(child, texture, steps);\r\n\r\n            element.childList.add(child);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    get content() {\r\n        return this.sel('Textwrap>Content');\r\n    }\r\n\r\n    set content(v) {\r\n        this.sel('Textwrap>Content').patch(v, true);\r\n    }\r\n\r\n    set padding(v) {\r\n        this._paddingX = v;\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingX(v) {\r\n        this._paddingX = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingY(v) {\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    getLayer(i) {\r\n        return this._layers.sel(\"L\" + i);\r\n    }\r\n\r\n    getLayerContents(i) {\r\n        return this.getLayer(i).sel(\"Content\");\r\n    }\r\n\r\n    _onResize() {\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    _updateBlurSize() {\r\n        let w = this.renderWidth;\r\n        let h = this.renderHeight;\r\n\r\n        let paddingX = this._paddingX;\r\n        let paddingY = this._paddingY;\r\n\r\n        let fw = w + paddingX * 2;\r\n        let fh = h + paddingY * 2;\r\n        this._textwrap.w = fw;\r\n        this._wrapper.x = paddingX;\r\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\r\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\r\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\r\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\r\n        this._output.x = -paddingX;\r\n        this._textwrap.x = -paddingX;\r\n        this._output.w = fw;\r\n\r\n        this._textwrap.h = fh;\r\n        this._wrapper.y = paddingY;\r\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\r\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\r\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\r\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\r\n        this._output.y = -paddingY;\r\n        this._textwrap.y = -paddingY;\r\n        this._output.h = fh;\r\n\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    /**\r\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\r\n     * Best results for non-fractional values.\r\n     * @param v;\r\n     */\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this._update();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    _update() {\r\n        let v = Math.min(4, Math.max(0, this._amount));\r\n        if (v === 0) {\r\n            this._textwrap.renderToTexture = false;\r\n            this._output.shader.otherTextureSource = null;\r\n            this._output.visible = false;\r\n        } else {\r\n            this._textwrap.renderToTexture = true;\r\n            this._output.visible = true;\r\n\r\n            this.getLayer(0).visible = (v > 0);\r\n            this.getLayer(1).visible = (v > 1);\r\n            this.getLayer(2).visible = (v > 2);\r\n            this.getLayer(3).visible = (v > 3);\r\n\r\n            if (v <= 1) {\r\n                this._output.texture = this._textwrap.getTexture();\r\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\r\n                this._output.shader.a = v;\r\n            } else if (v <= 2) {\r\n                this._output.texture = this.getLayer(0).getTexture();\r\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\r\n                this._output.shader.a = v - 1;\r\n            } else if (v <= 3) {\r\n                this._output.texture = this.getLayer(1).getTexture();\r\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\r\n                this._output.shader.a = v - 2;\r\n            } else if (v <= 4) {\r\n                this._output.texture = this.getLayer(2).getTexture();\r\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\r\n                this._output.shader.a = v - 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    set shader(s) {\r\n        super.shader = s;\r\n        if (!this.renderToTexture) {\r\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\r\n        }\r\n    }\r\n\r\n    _firstActive() {\r\n        this._buildLayers();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Shader that combines two textures into one output.\r\n */\r\nclass FastBlurOutputShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._a = 0;\r\n        this._otherTextureSource = null;\r\n    }\r\n\r\n    get a() {\r\n        return this._a;\r\n    }\r\n\r\n    set a(v) {\r\n        this._a = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set otherTextureSource(v) {\r\n        this._otherTextureSource = v;\r\n        this.redraw();\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\r\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\r\n\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n        gl.activeTexture(gl.TEXTURE0);\r\n    }\r\n}\r\n\r\nFastBlurOutputShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform sampler2D uSampler2;\r\n    uniform float a;\r\n    void main(void){\r\n        if (a == 1.0) {\r\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\r\n        } else {\r\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\r\n        }\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"../application/Component.mjs\";\r\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\r\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\r\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\r\n\r\nexport default class BloomComponent extends Component {\r\n\r\n    static _template() {\r\n        const onUpdate = function(element, elementCore) {\r\n            if ((elementCore._recalc & (2 + 128))) {\r\n                const w = elementCore.w;\r\n                const h = elementCore.h;\r\n                let cur = elementCore;\r\n                do {\r\n                    cur = cur._children[0];\r\n                    cur._element.w = w;\r\n                    cur._element.h = h;\r\n                } while(cur._children);\r\n            }\r\n        };\r\n\r\n        return {\r\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\r\n                BloomBase: {shader: {type: BloomBaseShader},\r\n                    Content: {}\r\n                }\r\n            },\r\n            Layers: {\r\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\r\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\r\n            }\r\n        }\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n        this._textwrap = this.sel(\"Textwrap\");\r\n        this._wrapper = this.sel(\"Textwrap.Content\");\r\n        this._layers = this.sel(\"Layers\");\r\n\r\n        this._amount = 0;\r\n        this._paddingX = 0;\r\n        this._paddingY = 0;\r\n    }\r\n\r\n    _build() {\r\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\r\n        const filterShaders = filterShaderSettings.map(s => {\r\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\r\n            return shader;\r\n        });\r\n\r\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\r\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\r\n\r\n        // Notice that 1.5 filters should be applied before 1.0 filters.\r\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\r\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\r\n    }\r\n\r\n    _setLayerTexture(element, texture, steps) {\r\n        if (!steps.length) {\r\n            element.texture = texture;\r\n        } else {\r\n            const step = steps.pop();\r\n            const child = element.stage.c({rtt: true, shader: step});\r\n\r\n            // Recurse.\r\n            this._setLayerTexture(child, texture, steps);\r\n\r\n            element.childList.add(child);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    get content() {\r\n        return this.sel('Textwrap.Content');\r\n    }\r\n\r\n    set content(v) {\r\n        this.sel('Textwrap.Content').patch(v);\r\n    }\r\n\r\n    set padding(v) {\r\n        this._paddingX = v;\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingX(v) {\r\n        this._paddingX = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    set paddingY(v) {\r\n        this._paddingY = v;\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    getLayer(i) {\r\n        return this._layers.sel(\"L\" + i);\r\n    }\r\n\r\n    getLayerContents(i) {\r\n        return this.getLayer(i).sel(\"Content\");\r\n    }\r\n\r\n    _onResize() {\r\n        this._updateBlurSize();\r\n    }\r\n\r\n    _updateBlurSize() {\r\n        let w = this.renderWidth;\r\n        let h = this.renderHeight;\r\n\r\n        let paddingX = this._paddingX;\r\n        let paddingY = this._paddingY;\r\n\r\n        let fw = w + paddingX * 2;\r\n        let fh = h + paddingY * 2;\r\n        this._textwrap.w = fw;\r\n        this._wrapper.x = paddingX;\r\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\r\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\r\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\r\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\r\n        this._textwrap.x = -paddingX;\r\n\r\n        this._textwrap.h = fh;\r\n        this._wrapper.y = paddingY;\r\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\r\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\r\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\r\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\r\n        this._textwrap.y = -paddingY;\r\n\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    /**\r\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\r\n     * Best results for non-fractional values.\r\n     * @param v;\r\n     */\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this._update();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    _update() {\r\n        let v = Math.min(4, Math.max(0, this._amount));\r\n        if (v > 0) {\r\n            this.getLayer(0).visible = (v > 0);\r\n            this.getLayer(1).visible = (v > 1);\r\n            this.getLayer(2).visible = (v > 2);\r\n            this.getLayer(3).visible = (v > 3);\r\n        }\r\n    }\r\n\r\n    set shader(s) {\r\n        super.shader = s;\r\n        if (!this.renderToTexture) {\r\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\r\n        }\r\n    }\r\n\r\n    _firstActive() {\r\n        this._build();\r\n    }\r\n\r\n}\r\n\r\nclass BloomBaseShader extends DefaultShader {\r\n}\r\n\r\nBloomBaseShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    void main(void){\r\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\r\n        float m = max(max(color.r, color.g), color.b);\r\n        float c = max(0.0, (m - 0.80)) * 5.0;\r\n        color = color * c;\r\n        gl_FragColor = color;\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"../application/Component.mjs\";\r\n\r\nexport default class SmoothScaleComponent extends Component {\r\n\r\n    static _template() {\r\n        return {\r\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\r\n                Content: {}\r\n            },\r\n            Scale: {visible: false}\r\n        }\r\n    }\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this._smoothScale = 1;\r\n        this._iterations = 0;\r\n    }\r\n\r\n    get content() {\r\n        return this.tag('Content');\r\n    }\r\n\r\n    set content(v) {\r\n        this.tag('Content').patch(v, true);\r\n    }\r\n\r\n    get smoothScale() {\r\n        return this._smoothScale;\r\n    }\r\n\r\n    set smoothScale(v) {\r\n        if (this._smoothScale !== v) {\r\n            let its = 0;\r\n            while(v < 0.5 && its < 12) {\r\n                its++;\r\n                v = v * 2;\r\n            }\r\n\r\n            this.scale = v;\r\n            this._setIterations(its);\r\n\r\n            this._smoothScale = v;\r\n        }\r\n    }\r\n\r\n    _setIterations(its) {\r\n        if (this._iterations !== its) {\r\n            const scalers = this.sel(\"Scale\").childList;\r\n            const content = this.sel(\"ContentWrap\");\r\n            while (scalers.length < its) {\r\n                const first = scalers.length === 0;\r\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\r\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\r\n            }\r\n\r\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\r\n\r\n            const useScalers = (its > 0);\r\n            this.patch({\r\n                ContentWrap: {renderToTexture: useScalers},\r\n                Scale: {visible: useScalers}\r\n            });\r\n\r\n            for (let i = 0, n = scalers.length; i < n; i++) {\r\n                scalers.getAt(i).patch({\r\n                    visible: i < its,\r\n                    renderOffscreen: i !== its - 1\r\n                });\r\n            }\r\n            this._iterations = its;\r\n        }\r\n    }\r\n\r\n    static _updateDimensions(contentWrap, force) {\r\n        const content = contentWrap.children[0];\r\n        let w = content.renderWidth;\r\n        let h = content.renderHeight;\r\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\r\n            contentWrap.w = w;\r\n            contentWrap.h = h;\r\n\r\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\r\n            for (let i = 0, n = scalers.length; i < n; i++) {\r\n                w = w * 0.5;\r\n                h = h * 0.5;\r\n                scalers[i].w = w;\r\n                scalers[i].h = h;\r\n            }\r\n        }\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Component from \"../application/Component.mjs\";\r\n\r\nexport default class BorderComponent extends Component {\r\n\r\n    static _template() {\r\n        return {\r\n            Content: {},\r\n            Borders: {\r\n                Top: {rect: true, visible: false, mountY: 1},\r\n                Right: {rect: true, visible: false},\r\n                Bottom: {rect: true, visible: false},\r\n                Left: {rect: true, visible: false, mountX: 1}\r\n            }\r\n        };\r\n    }\r\n\r\n    get _signalProxy() {\r\n        return true;\r\n    }\r\n\r\n    constructor(stage) {\r\n        super(stage);\r\n\r\n        this._borderTop = this.tag(\"Top\");\r\n        this._borderRight = this.tag(\"Right\");\r\n        this._borderBottom = this.tag(\"Bottom\");\r\n        this._borderLeft = this.tag(\"Left\");\r\n\r\n        this.onAfterUpdate = function (element) {\r\n            const content = element.childList.first;\r\n            let w = element.core.w || content.renderWidth;\r\n            let h = element.core.h || content.renderHeight;\r\n            element._borderTop.w = w;\r\n            element._borderBottom.y = h;\r\n            element._borderBottom.w = w;\r\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\r\n            element._borderLeft.y = -element._borderTop.h;\r\n            element._borderRight.x = w;\r\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\r\n            element._borderRight.y = -element._borderTop.h;\r\n        };\r\n\r\n        this.borderWidth = 1;\r\n    }\r\n\r\n    get content() {\r\n        return this.sel('Content');\r\n    }\r\n\r\n    set content(v) {\r\n        this.sel('Content').patch(v, true);\r\n    }\r\n\r\n    get borderWidth() {\r\n        return this.borderWidthTop;\r\n    }\r\n\r\n    get borderWidthTop() {\r\n        return this._borderTop.h;\r\n    }\r\n\r\n    get borderWidthRight() {\r\n        return this._borderRight.w;\r\n    }\r\n\r\n    get borderWidthBottom() {\r\n        return this._borderBottom.h;\r\n    }\r\n\r\n    get borderWidthLeft() {\r\n        return this._borderLeft.w;\r\n    }\r\n\r\n    set borderWidth(v) {\r\n        this.borderWidthTop = v;\r\n        this.borderWidthRight = v;\r\n        this.borderWidthBottom = v;\r\n        this.borderWidthLeft = v;\r\n    }\r\n\r\n    set borderWidthTop(v) {\r\n        this._borderTop.h = v;\r\n        this._borderTop.visible = (v > 0);\r\n    }\r\n\r\n    set borderWidthRight(v) {\r\n        this._borderRight.w = v;\r\n        this._borderRight.visible = (v > 0);\r\n    }\r\n\r\n    set borderWidthBottom(v) {\r\n        this._borderBottom.h = v;\r\n        this._borderBottom.visible = (v > 0);\r\n    }\r\n\r\n    set borderWidthLeft(v) {\r\n        this._borderLeft.w = v;\r\n        this._borderLeft.visible = (v > 0);\r\n    }\r\n\r\n    get colorBorder() {\r\n        return this.colorBorderTop;\r\n    }\r\n\r\n    get colorBorderTop() {\r\n        return this._borderTop.color;\r\n    }\r\n\r\n    get colorBorderRight() {\r\n        return this._borderRight.color;\r\n    }\r\n\r\n    get colorBorderBottom() {\r\n        return this._borderBottom.color;\r\n    }\r\n\r\n    get colorBorderLeft() {\r\n        return this._borderLeft.color;\r\n    }\r\n\r\n    set colorBorder(v) {\r\n        this.colorBorderTop = v;\r\n        this.colorBorderRight = v;\r\n        this.colorBorderBottom = v;\r\n        this.colorBorderLeft = v;\r\n    }\r\n\r\n    set colorBorderTop(v) {\r\n        this._borderTop.color = v;\r\n    }\r\n\r\n    set colorBorderRight(v) {\r\n        this._borderRight.color = v;\r\n    }\r\n\r\n    set colorBorderBottom(v) {\r\n        this._borderBottom.color = v;\r\n    }\r\n\r\n    set colorBorderLeft(v) {\r\n        this._borderLeft.color = v;\r\n    }\r\n\r\n    get borderTop() {\r\n        return this._borderTop;\r\n    }\r\n\r\n    set borderTop(settings) {\r\n        this.borderTop.patch(settings);\r\n    }\r\n\r\n    get borderRight() {\r\n        return this._borderRight;\r\n    }\r\n\r\n    set borderRight(settings) {\r\n        this.borderRight.patch(settings);\r\n    }\r\n\r\n    get borderBottom() {\r\n        return this._borderBottom;\r\n    }\r\n\r\n    set borderBottom(settings) {\r\n        this.borderBottom.patch(settings);\r\n    }\r\n\r\n    get borderLeft() {\r\n        return this._borderLeft;\r\n    }\r\n\r\n    set borderLeft(settings) {\r\n        this.borderLeft.patch(settings);\r\n    }\r\n\r\n    set borders(settings) {\r\n        this.borderTop = settings;\r\n        this.borderLeft = settings;\r\n        this.borderBottom = settings;\r\n        this.borderRight = settings;\r\n    }\r\n\r\n}\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\r\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\r\n\r\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._amount = 1;\r\n    }\r\n\r\n    static getC2d() {\r\n        return C2dGrayscaleShader;\r\n    }\r\n\r\n\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    useDefault() {\r\n        return this._amount === 0;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\r\n    }\r\n\r\n}\r\n\r\nWebGLGrayscaleShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform float amount;\r\n    void main(void){\r\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\r\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\r\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\r\n    }\r\n`;\r\n\r\nexport class C2dGrayscaleShader extends C2dDefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._amount = 1;\r\n    }\r\n\r\n    static getWebGL() {\r\n        return WebGLGrayscaleShader;\r\n    }\r\n\r\n\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    useDefault() {\r\n        return this._amount === 0;\r\n    }\r\n\r\n    _beforeDrawEl({target}) {\r\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\r\n    }\r\n\r\n    _afterDrawEl({target}) {\r\n        target.ctx.filter = \"none\";\r\n    }\r\n\r\n}\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\n/**\r\n * This shader can be used to fix a problem that is known as 'gradient banding'.\r\n */\r\nexport default class DitheringShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._noiseTexture = new NoiseTexture(ctx.stage);\r\n\r\n        this._graining = 1/256;\r\n\r\n        this._random = false;\r\n    }\r\n\r\n    set graining(v) {\r\n        this._graining = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set random(v) {\r\n        this._random = v;\r\n        this.redraw();\r\n    }\r\n\r\n    setExtraAttribsInBuffer(operation) {\r\n        // Make sure that the noise texture is uploaded to the GPU.\r\n        this._noiseTexture.load();\r\n\r\n        let offset = operation.extraAttribsDataByteOffset / 4;\r\n        let floats = operation.quads.floats;\r\n\r\n        let length = operation.length;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n\r\n            // Calculate noise texture coordinates so that it spans the full element.\r\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\r\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\r\n\r\n            let ulx = 0;\r\n            let uly = 0;\r\n            if (this._random) {\r\n                ulx = Math.random();\r\n                uly = Math.random();\r\n\r\n                brx += ulx;\r\n                bry += uly;\r\n\r\n                if (Math.random() < 0.5) {\r\n                    // Flip for more randomness.\r\n                    const t = ulx;\r\n                    ulx = brx;\r\n                    brx = t;\r\n                }\r\n\r\n                if (Math.random() < 0.5) {\r\n                    // Flip for more randomness.\r\n                    const t = uly;\r\n                    uly = bry;\r\n                    bry = t;\r\n                }\r\n            }\r\n\r\n            // Specify all corner points.\r\n            floats[offset] = ulx;\r\n            floats[offset + 1] = uly;\r\n\r\n            floats[offset + 2] = brx;\r\n            floats[offset + 3] = uly;\r\n\r\n            floats[offset + 4] = brx;\r\n            floats[offset + 5] = bry;\r\n\r\n            floats[offset + 6] = ulx;\r\n            floats[offset + 7] = bry;\r\n\r\n            offset += 8;\r\n        }\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n        let gl = this.gl;\r\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\r\n\r\n        let glTexture = this._noiseTexture.source.nativeTexture;\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n        gl.activeTexture(gl.TEXTURE0);\r\n    }\r\n\r\n    getExtraAttribBytesPerVertex() {\r\n        return 8;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\r\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\r\n    }\r\n\r\n    enableAttribs() {\r\n        super.enableAttribs();\r\n        let gl = this.gl;\r\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\r\n    }\r\n\r\n    disableAttribs() {\r\n        super.disableAttribs();\r\n        let gl = this.gl;\r\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\r\n    }\r\n\r\n    useDefault() {\r\n        return this._graining === 0;\r\n    }\r\n\r\n    afterDraw(operation) {\r\n        if (this._random) {\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nDitheringShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec2 aNoiseTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec2 vNoiseTextureCoord;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vNoiseTextureCoord = aNoiseTextureCoord;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nDitheringShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec2 vNoiseTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform sampler2D uNoiseSampler;\r\n    uniform float graining;\r\n    void main(void){\r\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\r\n        vec4 color = texture2D(uSampler, vTextureCoord);\r\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Utils from \"../../../tree/Utils.mjs\";\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class CircularPushShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._inputValue = 0;\r\n\r\n        this._maxDerivative = 0.01;\r\n\r\n        this._normalizedValue = 0;\r\n\r\n        // The offset between buckets. A value between 0 and 1.\r\n        this._offset = 0;\r\n\r\n        this._amount = 0.1;\r\n\r\n        this._aspectRatio = 1;\r\n\r\n        this._offsetX = 0;\r\n\r\n        this._offsetY = 0;\r\n\r\n        this.buckets = 100;\r\n    }\r\n\r\n    get aspectRatio() {\r\n        return this._aspectRatio;\r\n    }\r\n\r\n    set aspectRatio(v) {\r\n        this._aspectRatio = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get offsetX() {\r\n        return this._offsetX;\r\n    }\r\n\r\n    set offsetX(v) {\r\n        this._offsetX = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get offsetY() {\r\n        return this._offsetY;\r\n    }\r\n\r\n    set offsetY(v) {\r\n        this._offsetY = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    set inputValue(v) {\r\n        this._inputValue = v;\r\n    }\r\n\r\n    get inputValue() {\r\n        return this._inputValue;\r\n    }\r\n\r\n    set maxDerivative(v) {\r\n        this._maxDerivative = v;\r\n    }\r\n\r\n    get maxDerivative() {\r\n        return this._maxDerivative;\r\n    }\r\n\r\n    set buckets(v) {\r\n        if (v > 100) {\r\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\r\n            v = 100;\r\n        }\r\n\r\n        // This should be set before starting.\r\n        this._buckets = v;\r\n\r\n        // Init values array in the correct length.\r\n        this._values = new Uint8Array(this._getValues(v));\r\n\r\n        this.redraw();\r\n    }\r\n\r\n    get buckets() {\r\n        return this._buckets;\r\n    }\r\n\r\n    _getValues(n) {\r\n        const v = [];\r\n        for (let i = 0; i < n; i++) {\r\n            v.push(this._inputValue);\r\n        }\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * Progresses the shader with the specified (fractional) number of buckets.\r\n     * @param {number} o;\r\n     *   A number from 0 to 1 (1 = all buckets).\r\n     */\r\n    progress(o) {\r\n        this._offset += o * this._buckets;\r\n        const full = Math.floor(this._offset);\r\n        this._offset -= full;\r\n        this._shiftBuckets(full);\r\n        this.redraw();\r\n    }\r\n\r\n    _shiftBuckets(n) {\r\n        for (let i = this._buckets - 1; i >= 0; i--) {\r\n            const targetIndex = i - n;\r\n            if (targetIndex < 0) {\r\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\r\n                this._values[i] = 255 * this._normalizedValue;\r\n            } else {\r\n                this._values[i] = this._values[targetIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    set offset(v) {\r\n        this._offset = v;\r\n        this.redraw();\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\r\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\r\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\r\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\r\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\r\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\r\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\r\n    }\r\n\r\n    useDefault() {\r\n        return this._amount === 0;\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n        const gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        if (!this._valuesTexture) {\r\n            this._valuesTexture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            if (Utils.isNode) {\r\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\r\n            }\r\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        } else {\r\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\r\n        }\r\n\r\n        // Upload new values.\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\r\n        gl.activeTexture(gl.TEXTURE0);\r\n    }\r\n\r\n    cleanup() {\r\n        if (this._valuesTexture) {\r\n            this.gl.deleteTexture(this._valuesTexture);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nCircularPushShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    uniform float offsetX;\r\n    uniform float offsetY;\r\n    uniform float aspectRatio;\r\n    varying vec2 vTextureCoord;\r\n    varying vec2 vPos;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vPos = vTextureCoord * 2.0 - 1.0;\r\n        vPos.y = vPos.y * aspectRatio;\r\n        vPos.y = vPos.y + offsetY;\r\n        vPos.x = vPos.x + offsetX;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nCircularPushShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    varying vec2 vPos;\r\n    uniform float amount;\r\n    uniform float offset;\r\n    uniform float values[100];\r\n    uniform float buckets;\r\n    uniform sampler2D uSampler;\r\n    uniform sampler2D uValueSampler;\r\n    void main(void){\r\n        float l = length(vPos);\r\n        float m = (l * buckets * 0.678 - offset) / buckets;\r\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\r\n        vec2 unit = vPos / l;\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\r\n    }\r\n`;\r\n\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class InversionShader extends DefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._amount = 1;\r\n    }\r\n\r\n    set amount(v) {\r\n        this._amount = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get amount() {\r\n        return this._amount;\r\n    }\r\n\r\n    useDefault() {\r\n        return this._amount === 0;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\r\n    }\r\n\r\n}\r\n\r\nInversionShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform float amount;\r\n    void main(void){\r\n        vec4 color = texture2D(uSampler, vTextureCoord);\r\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \r\n        gl_FragColor = color * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class OutlineShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this._width = 5;\r\n        this._col = 0xFFFFFFFF;\r\n        this._color = [1,1,1,1];\r\n    }\r\n\r\n    set width(v) {\r\n        this._width = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get color() {\r\n        return this._col;\r\n    }\r\n\r\n    set color(v) {\r\n        if (this._col !== v) {\r\n            const col = StageUtils.getRgbaComponentsNormalized(v);\r\n            col[0] = col[0] * col[3];\r\n            col[1] = col[1] * col[3];\r\n            col[2] = col[2] * col[3];\r\n\r\n            this._color = col;\r\n\r\n            this.redraw();\r\n\r\n            this._col = v;\r\n        }\r\n    }\r\n\r\n    useDefault() {\r\n        return (this._width === 0 || this._col[3] === 0);\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        let gl = this.gl;\r\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\r\n    }\r\n\r\n    enableAttribs() {\r\n        super.enableAttribs();\r\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\r\n    }\r\n\r\n    disableAttribs() {\r\n        super.disableAttribs();\r\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\r\n    }\r\n\r\n    setExtraAttribsInBuffer(operation) {\r\n        let offset = operation.extraAttribsDataByteOffset / 4;\r\n        let floats = operation.quads.floats;\r\n\r\n        let length = operation.length;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n\r\n            const elementCore = operation.getElementCore(i);\r\n\r\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\r\n            const ddw = this._width / elementCore.w;\r\n            const dw = ddw / (1 - 2 * ddw);\r\n            const ddh = this._width / elementCore.h;\r\n            const dh = ddh / (1 - 2 * ddh);\r\n\r\n            // Specify all corner points.\r\n            floats[offset] = -dw;\r\n            floats[offset + 1] = -dh;\r\n\r\n            floats[offset + 2] = 1 + dw;\r\n            floats[offset + 3] = -dh;\r\n\r\n            floats[offset + 4] = 1 + dw;\r\n            floats[offset + 5] = 1 + dh;\r\n\r\n            floats[offset + 6] = -dw;\r\n            floats[offset + 7] = 1 + dh;\r\n\r\n            offset += 8;\r\n        }\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n        let gl = this.gl;\r\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\r\n    }\r\n\r\n    getExtraAttribBytesPerVertex() {\r\n        return 8;\r\n    }\r\n\r\n}\r\n\r\nOutlineShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    attribute vec2 aCorner;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec2 vCorner;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vCorner = aCorner;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nOutlineShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    varying vec2 vCorner;\r\n    uniform vec4 color;\r\n    uniform sampler2D uSampler;\r\n    void main(void){\r\n        vec2 m = min(vCorner, 1.0 - vCorner);\r\n        float value = step(0.0, min(m.x, m.y));\r\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\n/**\r\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\r\n */\r\nexport default class PixelateShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._size = new Float32Array([4, 4]);\r\n    }\r\n\r\n    get x() {\r\n        return this._size[0];\r\n    }\r\n\r\n    set x(v) {\r\n        this._size[0] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get y() {\r\n        return this._size[1];\r\n    }\r\n\r\n    set y(v) {\r\n        this._size[1] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get size() {\r\n        return this._size[0];\r\n    }\r\n\r\n    set size(v) {\r\n        this._size[0] = v;\r\n        this._size[1] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    useDefault() {\r\n        return ((this._size[0] === 0) && (this._size[1] === 0));\r\n    }\r\n\r\n    static getWebGLImpl() {\r\n        return WebGLPixelateShaderImpl;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        let gl = this.gl;\r\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\r\n    }\r\n\r\n    getExtraAttribBytesPerVertex() {\r\n        return 8;\r\n    }\r\n\r\n    enableAttribs() {\r\n        super.enableAttribs();\r\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\r\n    }\r\n\r\n    disableAttribs() {\r\n        super.disableAttribs();\r\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\r\n    }\r\n\r\n    setExtraAttribsInBuffer(operation) {\r\n        let offset = operation.extraAttribsDataByteOffset / 4;\r\n        let floats = operation.quads.floats;\r\n\r\n        let length = operation.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let w = operation.quads.getTextureWidth(operation.index + i);\r\n            let h = operation.quads.getTextureHeight(operation.index + i);\r\n\r\n            floats[offset] = w;\r\n            floats[offset + 1] = h;\r\n            floats[offset + 2] = w;\r\n            floats[offset + 3] = h;\r\n            floats[offset + 4] = w;\r\n            floats[offset + 5] = h;\r\n            floats[offset + 6] = w;\r\n            floats[offset + 7] = h;\r\n\r\n            offset += 8;\r\n        }\r\n    }\r\n\r\n    beforeDraw(operation) {\r\n        let gl = this.gl;\r\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\r\n    }\r\n}\r\n\r\nPixelateShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    attribute vec2 aTextureRes;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    varying vec2 vTextureRes;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        vTextureRes = aTextureRes;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nPixelateShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    varying vec2 vTextureRes;\r\n\r\n    uniform vec2 size;\r\n    uniform sampler2D uSampler;\r\n    \r\n    vec2 mapCoord( vec2 coord )\r\n    {\r\n        coord *= vTextureRes.xy;\r\n        return coord;\r\n    }\r\n    \r\n    vec2 unmapCoord( vec2 coord )\r\n    {\r\n        coord /= vTextureRes.xy;\r\n        return coord;\r\n    }\r\n    \r\n    vec2 pixelate(vec2 coord, vec2 size)\r\n    {\r\n        return floor( coord / size ) * size;\r\n    }\r\n    \r\n    void main(void)\r\n    {\r\n        vec2 coord = mapCoord(vTextureCoord);\r\n        coord = pixelate(coord, size);\r\n        coord = unmapCoord(coord);\r\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class RadialFilterShader extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._radius = 0;\r\n        this._cutoff = 1;\r\n    }\r\n\r\n    set radius(v) {\r\n        this._radius = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get radius() {\r\n        return this._radius;\r\n    }\r\n\r\n    set cutoff(v) {\r\n        this._cutoff = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get cutoff() {\r\n        return this._cutoff;\r\n    }\r\n    \r\n    useDefault() {\r\n        return this._radius === 0;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        // We substract half a pixel to get a better cutoff effect.\r\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\r\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\r\n    }\r\n\r\n}\r\n\r\nRadialFilterShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 pos;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n        pos = gl_Position.xy;\r\n    }\r\n`;\r\n\r\nRadialFilterShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec2 pos;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform float radius;\r\n    uniform float cutoff;\r\n    void main(void){\r\n        vec4 color = texture2D(uSampler, vTextureCoord);\r\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\r\n\r\nexport default class RoundedRectangleShader extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._blend = 0;\r\n        this._radius = [1, 1, 1, 1];\r\n        this._stroke = 0;\r\n        this._fc = 0x00ffffff;\r\n        this._fillColor = this._getNormalizedColor(0xffffffff);\r\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\r\n    }\r\n\r\n    set blend(p) {\r\n        this._blend = Math.min(Math.max(p, 0), 1);\r\n    }\r\n\r\n    set radius(v) {\r\n        if(Array.isArray(v)) {\r\n            if(v.length === 2) {\r\n                this._radius = [v[0], v[1], v[0], v[1]];\r\n            }\r\n            else if(v.length === 3) {\r\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\r\n            }\r\n            else if (v.length === 4) {\r\n                this._radius = v;\r\n            }\r\n            else {\r\n                this._radius = [v[0], v[0], v[0], v[0]];\r\n            }\r\n        }\r\n        else {\r\n            this._radius = [v, v, v, v];\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    get radius() {\r\n        return this._radius;\r\n    }\r\n\r\n    set topLeft(num) {\r\n        this._radius[0] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get topLeft() {\r\n        return this._radius[0];\r\n    }\r\n\r\n    set topRight(num) {\r\n        this._radius[1] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get topRight() {\r\n        return this._radius[1];\r\n    }\r\n\r\n    set bottomRight(num) {\r\n        this._radius[2] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get bottomRight() {\r\n        return this._radius[2];\r\n    }\r\n\r\n    set bottomLeft(num) {\r\n        this._radius[3] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get bottomLeft() {\r\n        return this._radius[4];\r\n    }\r\n\r\n    set strokeColor(argb) {\r\n        this._sc = argb;\r\n        this._strokeColor = this._getNormalizedColor(argb);\r\n        this.redraw();\r\n    }\r\n\r\n    get strokeColor() {\r\n        return this._sc;\r\n    }\r\n\r\n    set fillColor(argb) {\r\n        this._fc = argb;\r\n        this._fillColor = this._getNormalizedColor(argb);\r\n        this.redraw();\r\n    }\r\n\r\n    get fillColor() {\r\n        return this._fc;\r\n    }\r\n\r\n    set stroke(num) {\r\n        this._stroke = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get stroke() {\r\n        return this._stroke;\r\n    }\r\n\r\n    _getNormalizedColor(color) {\r\n        const col = StageUtils.getRgbaComponentsNormalized(color);\r\n        col[0] *= col[3];\r\n        col[1] *= col[3];\r\n        col[2] *= col[3];\r\n        return new Float32Array(col);\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const owner = operation.shaderOwner;\r\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\r\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\r\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\r\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\r\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\r\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\r\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\r\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\r\n    }\r\n}\r\n\r\nRoundedRectangleShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n\r\n    void main(void){\r\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nRoundedRectangleShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n\r\n    #define PI 3.14159265359\r\n\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n\r\n    uniform sampler2D uSampler;\r\n    uniform vec2 resolution;\r\n    uniform vec4 radius;\r\n    uniform float stroke;\r\n    uniform vec4 strokeColor;\r\n    uniform vec4 fillColor;\r\n    uniform float alpha;\r\n    uniform float fill;\r\n    uniform float blend;\r\n    \r\n    float boxDist(vec2 p, vec2 size, float radius){\r\n        size -= vec2(radius);\r\n        vec2 d = abs(p) - size;\r\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\r\n    }\r\n    \r\n    float fillMask(float dist){\r\n        return clamp(-dist, 0.0, 1.0);\r\n    }\r\n    \r\n    float innerBorderMask(float dist, float width){\r\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\r\n        float alpha2 = clamp(dist, 0.0, 1.0);\r\n        return alpha1 - alpha2;\r\n    }\r\n\r\n    void main() {\r\n        vec2 halfRes = 0.5 * resolution.xy;\r\n        float r = 0.0;\r\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\r\n            r = radius[0];\r\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\r\n            r = radius[1];\r\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\r\n            r = radius[2];\r\n        } else {\r\n            r = radius[3];\r\n        }\r\n        \r\n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\r\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\r\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \r\n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\r\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from './DefaultShader.mjs';\r\n\r\nexport default class FadeOutShader extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._fade = [0, 0, 0, 0];\r\n    }\r\n\r\n    set top(num) {\r\n        this._fade[0] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get top() {\r\n        return this._fade[0];\r\n    }\r\n\r\n    set right(num) {\r\n        this._fade[1] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get right() {\r\n        return this._fade[1];\r\n    }\r\n\r\n    set bottom(num) {\r\n        this._fade[2] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get bottom() {\r\n        return this._fade[2];\r\n    }\r\n\r\n    set left(num) {\r\n        this._fade[3] = num;\r\n        this.redraw();\r\n    }\r\n\r\n    get left() {\r\n        return this._fade[3];\r\n    }\r\n\r\n    set fade(v) {\r\n        if(Array.isArray(v)) {\r\n            if(v.length === 2) {\r\n                this._fade = [v[0], v[1], v[0], v[1]];\r\n            }\r\n            else if(v.length === 3) {\r\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\r\n            }\r\n            else if (v.length === 4) {\r\n                this._fade = v;\r\n            }\r\n            else {\r\n                this._fade = [v[0], v[0], v[0], v[0]];\r\n            }\r\n        }\r\n        else {\r\n            this._fade = [v, v, v, v];\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    get fade() {\r\n        return this._fade;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const owner = operation.shaderOwner;\r\n\r\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\r\n        const fade = this._fade.map((f) => f * renderPrecision);\r\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\r\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\r\n    }\r\n}\r\n\r\nFadeOutShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform vec2 resolution;\r\n    uniform vec4 fade;\r\n    \r\n    void main() {\r\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\r\n        vec2 halfRes = 0.5 * resolution.xy;\r\n        vec2 point = vTextureCoord.xy * resolution.xy;\r\n        \r\n        vec2 pos1;\r\n        vec2 pos2;\r\n        vec2 d;\r\n        float c;\r\n        float t = 0.0;\r\n             \r\n        if(fade[0] > 0.0) {\r\n            pos1 = vec2(point.x, point.y);\r\n            pos2 = vec2(point.x, point.y + fade[0]);\r\n            d = pos2 - pos1;\r\n            c = dot(pos1, d) / dot(d, d);\r\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\r\n            color = mix(vec4(0.0), color, t);\r\n        }\r\n        \r\n        if(fade[1] > 0.0) {\r\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\r\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\r\n            d = pos1 - pos2;\r\n            c = dot(pos2, d) / dot(d, d);\r\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\r\n            color = mix(vec4(0.0), color, t);\r\n        }\r\n        \r\n        if(fade[2] > 0.0) {\r\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\r\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\r\n            d = pos1 - pos2;\r\n            c = dot(pos2, d) / dot(d, d);\r\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\r\n            color = mix(vec4(0.0), color, t);\r\n        }\r\n        \r\n        if(fade[3] > 0.0) {\r\n            pos1 = vec2(point.x, point.y);\r\n            pos2 = vec2(point.x + fade[3], point.y);\r\n            d = pos2 - pos1;\r\n            c = dot(pos1, d) / dot(d, d);\r\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\r\n            color = mix(vec4(0.0), color, t);\r\n        }\r\n        \r\n        gl_FragColor = color;\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class VignetteShader extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._magnitude = 1.3;\r\n        this._intensity = 0.7;\r\n        this._pivot = [0.5, 0.5];\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n\r\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\r\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\r\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\r\n        this.redraw()\r\n    }\r\n\r\n    set pivot(v) {\r\n        if(Array.isArray(v)) {\r\n            this._pivot = v;\r\n        }\r\n        else {\r\n            this._pivot = [v, v];\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotX() {\r\n        return this._pivot[0];\r\n    }\r\n\r\n    set pivotX(v) {\r\n        this._pivot[0] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotY() {\r\n        return this._pivot[1];\r\n    }\r\n\r\n    set pivotY(v) {\r\n        this._pivot[1] = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get intensity() {\r\n        return this._intensity;\r\n    }\r\n\r\n    set intensity(v) {\r\n        this._intensity = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get magnitude() {\r\n        return this._magnitude;\r\n\r\n    }\r\n\r\n    set magnitude(v) {\r\n        this._magnitude = v;\r\n        this.redraw();\r\n    }\r\n}\r\n\r\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\r\n\r\nVignetteShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n\r\n    uniform float magnitude;\r\n    uniform float intensity;\r\n    uniform vec2 pivot;\r\n\r\n    void main() {\r\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\r\n        uv.x = clamp(uv.x, 0.0, 1.0);\r\n        uv.y = clamp(uv.y, 0.0, 1.0);\r\n   \r\n        uv *=  1.00 - uv.yx;\r\n        float vig = uv.x * uv.y * 25.0 * intensity;\r\n        vig = pow(vig, 0.45 * magnitude);\r\n        vec4 fragColor = vec4(vig) * vColor;\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\r\n\r\n    }\r\n`\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\nimport StageUtils from '../../../tree/StageUtils.mjs'\r\n\r\nexport default class SpinnerShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this._radius = 100;\r\n        this._width = 50;\r\n        this._period = 1;\r\n        this._angle = 0.5;\r\n        this._smooth = 0.005;\r\n        this._color = 0xffffffff;\r\n        this._backgroundColor = 0xff000000;\r\n        this._time = Date.now();\r\n    }\r\n\r\n    set radius(v) {\r\n        this._radius = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set width(v) {\r\n        this._width = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set period(v) {\r\n        this._period = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set angle(v) {\r\n        this._angle = v\r\n        this.redraw();\r\n    }\r\n\r\n    set smooth(v) {\r\n        this._smooth = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set color(v) {\r\n        this._color = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set backgroundColor(v) {\r\n        this._backgroundColor = v;\r\n        this.redraw();\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const owner = operation.shaderOwner\r\n\r\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\r\n\r\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\r\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform('period', this._period, this.gl.uniform1f);\r\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\r\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\r\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\r\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\r\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\r\n\r\n        this.redraw()\r\n    }\r\n}\r\n\r\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\r\n\r\nSpinnerShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n\r\n    uniform float iTime;\r\n    uniform float radius;\r\n    uniform float width;\r\n    uniform float period;\r\n    uniform float angle;\r\n    uniform float smooth;\r\n    uniform vec2 resolution;\r\n\r\n    uniform vec4 color;\r\n    uniform vec4 backgroundColor;\r\n\r\n    float ratio = resolution.y / resolution.x;\r\n\r\n    vec2 transpose_pos(vec2 pos) {\r\n        if (ratio < 1.) {\r\n            float diff = 0.5 - pos.x;\r\n            pos.x = 0.5 - diff / ratio;\r\n        } else {\r\n            float diff = 0.5 - pos.y;\r\n            pos.y = 0.5 - diff * ratio;\r\n        }\r\n        return pos;\r\n    }\r\n\r\n    float get_angle(vec2 pos) {\r\n        pos = transpose_pos(pos);\r\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\r\n        a = (1.0+a/3.14159)/2.0;\r\n        \r\n        return a;\r\n    }\r\n\r\n    float dist(vec2 pos1, vec2 pos2) {\r\n        pos1 = transpose_pos(pos1);\r\n        return distance(pos1, pos2);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec2 fragCoord = vTextureCoord;\r\n        vec4 fragColor = vColor;\r\n        \r\n        vec2 st = vTextureCoord;\r\n        float pct = dist(st, vec2(0.5));\r\n\r\n        float a = get_angle(st);\r\n        float t = iTime / 1000.0 / period;\r\n\r\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\r\n        float outer = max(radius / resolution.x, radius / resolution.y);\r\n\r\n        float x1 = mod(t, 1.0);\r\n        float x2 = mod(t + angle, 1.0);\r\n\r\n        if (x1 < x2) {\r\n            if (a > x1 && a < x2) {\r\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\r\n                fragColor = mix(backgroundColor, color, val);\r\n            } else {\r\n                fragColor = backgroundColor;\r\n            }\r\n        } else {\r\n            if (a < x2) {\r\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\r\n                fragColor = mix(backgroundColor, color, val);\r\n            } else if (a > x1) {\r\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\r\n                fragColor = mix(backgroundColor, color, val);\r\n            } else {\r\n                fragColor = backgroundColor;\r\n            }\r\n        }\r\n\r\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\r\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class HoleShader extends DefaultShader {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._w = 0;\r\n        this._h = 0;\r\n        this._radius = 0;\r\n    }\r\n\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    set x(v) {\r\n        this._x = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    set y(v) {\r\n        this._y = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get w() {\r\n        return this._w;\r\n    }\r\n\r\n    set w(v) {\r\n        this._w = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get h() {\r\n        return this._h;\r\n    }\r\n\r\n    set h(v) {\r\n        this._h = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get radius() {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(v) {\r\n        this._radius = v;\r\n        this.redraw();\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n\r\n        const owner = operation.shaderOwner;\r\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\r\n\r\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\r\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\r\n    }\r\n\r\n    useDefault() {\r\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\r\n    }\r\n}\r\n\r\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\r\n\r\nHoleShader.fragmentShaderSource = `\r\n   #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform float x;\r\n    uniform float y;\r\n    uniform float w;\r\n    uniform float h;\r\n    uniform vec2 resolution;\r\n    uniform float radius;\r\n\r\n    float roundBox(vec2 p, vec2 b, float r) {\r\n        float d = length(max(abs(p)-b+r, 0.1))-r;\r\n        return smoothstep(1.0, 0.0, d);\r\n    }\r\n\r\n    void main(void){\r\n        vec4 color = texture2D(uSampler, vTextureCoord);\r\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\r\n        vec2 size = vec2(w, h) / 2.0;\r\n        float b = roundBox(pos, size, radius);\r\n        gl_FragColor = mix(color, vec4(0.0), b) * vColor;\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\r\n\r\nexport default class RadialGradientShader extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._pivot = [0, 0];\r\n        this._ic = 0xffffffff;\r\n        this._normalizedIC = this._getNormalizedColor(this._ic);\r\n        this._oc = 0x00ffffff;\r\n        this._normalizedOC = this._getNormalizedColor(this._oc);\r\n        this._radius = 0;\r\n    }\r\n\r\n    set radiusX(v) {\r\n        this.radius = v;\r\n    }\r\n\r\n    get radiusX() {\r\n        return this._radius;\r\n    }\r\n\r\n    set radiusY(v) {\r\n        this._radiusY = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get radiusY() {\r\n        return this._radiusY;\r\n    }\r\n\r\n    set radius(v) {\r\n        this._radius = v;\r\n        this.redraw();\r\n    }\r\n\r\n    set innerColor(argb) {\r\n        this._ic = argb;\r\n        this._normalizedIC = this._getNormalizedColor(argb);\r\n        this.redraw();\r\n    }\r\n\r\n    get innerColor() {\r\n        return this._ic;\r\n    }\r\n\r\n    set outerColor(argb) {\r\n        this._oc = argb;\r\n        this._normalizedOC = this._getNormalizedColor(argb);\r\n        this.redraw();\r\n    }\r\n\r\n    set color(argb) {\r\n        this.innerColor = argb;\r\n    }\r\n\r\n    get color() {\r\n        return this.innerColor;\r\n    }\r\n\r\n    get outerColor() {\r\n        return this._ic;\r\n    }\r\n\r\n    set x(f) {\r\n        this._x = f;\r\n        this.redraw();\r\n    }\r\n\r\n    set y(f) {\r\n        this._y = f;\r\n        this.redraw();\r\n    }\r\n\r\n    set pivot(v) {\r\n        if(Array.isArray(v) && v.length === 2) {\r\n            this._pivot = v;\r\n        }\r\n        else if(Array.isArray(v)) {\r\n            this._pivot = [v[0], v[1] || v[0]];\r\n        }\r\n        else {\r\n            this._pivot = [v, v];\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    get pivot() {\r\n        return this._pivot[0];\r\n    }\r\n\r\n    set pivotY(f) {\r\n        this._pivot[1] = f;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotY() {\r\n        return this._pivot[1];\r\n    }\r\n\r\n    set pivotX(f) {\r\n        this._pivot[0] = f;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotX() {\r\n        return this._pivot[0];\r\n    }\r\n\r\n    _getNormalizedColor(color) {\r\n        const col = StageUtils.getRgbaComponentsNormalized(color);\r\n        col[0] *= col[3];\r\n        col[1] *= col[3];\r\n        col[2] *= col[3];\r\n        return new Float32Array(col);\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const owner = operation.shaderOwner;\r\n\r\n        if(this._x) {\r\n            this._pivot[0] = this._x / owner.w;\r\n        }\r\n        if(this._y) {\r\n            this._pivot[1] = this._y / owner.h;\r\n        }\r\n\r\n        if(this._radius === 0) {\r\n            this._radius = owner.w * 0.5;\r\n        }\r\n\r\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\r\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\r\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\r\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\r\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\r\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\r\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\r\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\r\n    }\r\n}\r\n\r\nRadialGradientShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    \r\n    #define PI 3.14159265359\r\n    \r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n    uniform vec2 resolution;\r\n    uniform vec2 pivot;\r\n    uniform vec4 innerColor;\r\n    uniform vec4 outerColor;\r\n    uniform float radius;\r\n    uniform float radiusY;\r\n    uniform float alpha;\r\n    uniform float fill;\r\n    uniform float aspectRatio;\r\n    \r\n    void main() {\r\n        vec2 point = vTextureCoord.xy * resolution;\r\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\r\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\r\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\r\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class Light3dShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._strength = 0.5;\r\n        this._ambient = 0.5;\r\n        this._fudge = 0.4;\r\n\r\n        this._rx = 0;\r\n        this._ry = 0;\r\n\r\n        this._z = 0;\r\n        this._pivotX = NaN;\r\n        this._pivotY = NaN;\r\n        this._pivotZ = 0;\r\n\r\n        this._lightY = 0;\r\n        this._lightZ = 0;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n\r\n        let vr = operation.shaderOwner;\r\n        let element = vr.element;\r\n\r\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\r\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\r\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\r\n\r\n        // Counter normal rotation.\r\n\r\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\r\n\r\n        let gl = this.gl;\r\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\r\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\r\n\r\n        this._setUniform(\"z\", this._z, gl.uniform1f);\r\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\r\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\r\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\r\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\r\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\r\n    }\r\n\r\n    set strength(v) {\r\n        this._strength = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get strength() {\r\n        return this._strength;\r\n    }\r\n\r\n    set ambient(v) {\r\n        this._ambient = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get ambient() {\r\n        return this._ambient;\r\n    }\r\n\r\n    set fudge(v) {\r\n        this._fudge = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get fudge() {\r\n        return this._fudge;\r\n    }\r\n\r\n    get rx() {\r\n        return this._rx;\r\n    }\r\n\r\n    set rx(v) {\r\n        this._rx = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get ry() {\r\n        return this._ry;\r\n    }\r\n\r\n    set ry(v) {\r\n        this._ry = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get z() {\r\n        return this._z;\r\n    }\r\n\r\n    set z(v) {\r\n        this._z = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotX() {\r\n        return this._pivotX;\r\n    }\r\n\r\n    set pivotX(v) {\r\n        this._pivotX = v + 1;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotY() {\r\n        return this._pivotY;\r\n    }\r\n\r\n    set pivotY(v) {\r\n        this._pivotY = v + 1;\r\n        this.redraw();\r\n    }\r\n\r\n    get lightY() {\r\n        return this._lightY;\r\n    }\r\n\r\n    set lightY(v) {\r\n        this._lightY = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get pivotZ() {\r\n        return this._pivotZ;\r\n    }\r\n\r\n    set pivotZ(v) {\r\n        this._pivotZ = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get lightZ() {\r\n        return this._lightZ;\r\n    }\r\n\r\n    set lightZ(v) {\r\n        this._lightZ = v;\r\n        this.redraw();\r\n    }\r\n\r\n    useDefault() {\r\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\r\n    }\r\n\r\n}\r\n\r\nLight3dShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n\r\n    uniform float fudge;\r\n    uniform float strength;\r\n    uniform float ambient;\r\n    uniform float z;\r\n    uniform float lightY;\r\n    uniform float lightZ;\r\n    uniform vec3 pivot;\r\n    uniform vec3 rot;\r\n    varying vec3 pos;\r\n\r\n    void main(void) {\r\n        pos = vec3(aVertexPosition.xy, z);\r\n        \r\n        pos -= pivot;\r\n        \r\n        // Undo XY rotation\r\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \r\n                           -sin(rot.z), cos(rot.z));\r\n        pos.xy = iRotXy * pos.xy;\r\n        \r\n        // Perform 3d rotations\r\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\r\n        gl_Position.y = pos.y;\r\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\r\n        \r\n        pos.x = gl_Position.x;\r\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\r\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\r\n        \r\n        // Redo XY rotation\r\n        iRotXy[0][1] = -iRotXy[0][1];\r\n        iRotXy[1][0] = -iRotXy[1][0];\r\n        pos.xy = iRotXy * pos.xy; \r\n\r\n        // Undo translate to pivot position\r\n        pos.xyz += pivot;\r\n\r\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\r\n        \r\n        // Set depth perspective\r\n        float perspective = 1.0 + fudge * pos.z;\r\n\r\n        pos.z += lightZ * projection.x;\r\n\r\n        // Map coords to gl coordinate space.\r\n        // Set z to 0 because we don't want to perform z-clipping\r\n        gl_Position = vec4(pos.xy, 0.0, perspective);\r\n\r\n        // Correct light source position.\r\n        pos.y += lightY * abs(projection.y);\r\n\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        \r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nLight3dShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    varying vec3 pos;\r\n    uniform sampler2D uSampler;\r\n    uniform float ambient;\r\n    uniform float strength;\r\n    void main(void){\r\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\r\n        float d = length(pos);\r\n        float n = 1.0 / max(0.1, d);\r\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\r\n        gl_FragColor = rgba * vColor;\r\n    }\r\n`;\r\n\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class PerspectiveShader extends DefaultShader {\r\n\r\n    constructor(ctx) {\r\n        super(ctx);\r\n\r\n        this._fudge = 0.2;\r\n        this._rx = 0;\r\n        this._ry = 0;\r\n        this._z = 1.0;\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n\r\n        const vr = operation.shaderOwner;\r\n        const element = vr.element;\r\n\r\n        const pivotX = element.pivotX * vr.w;\r\n        const pivotY = element.pivotY * vr.h;\r\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\r\n\r\n        // Counter normal rotation.\r\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\r\n\r\n        const gl = this.gl;\r\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\r\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\r\n        this._setUniform(\"z\", this._z, gl.uniform1f);\r\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\r\n    }\r\n\r\n    set fudge(v) {\r\n        this._fudge = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get fudge() {\r\n        return this._fudge;\r\n    }\r\n\r\n    get rx() {\r\n        return this._rx;\r\n    }\r\n\r\n    set rx(v) {\r\n        this._rx = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get ry() {\r\n        return this._ry;\r\n    }\r\n\r\n    set ry(v) {\r\n        this._ry = v;\r\n        this.redraw();\r\n    }\r\n\r\n    get z() {\r\n        return this._z;\r\n    }\r\n\r\n    set z(v) {\r\n        this._z = v;\r\n        this.redraw();\r\n    }\r\n\r\n    useDefault() {\r\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\r\n    }\r\n\r\n}\r\n\r\nPerspectiveShader.vertexShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    attribute vec2 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    attribute vec4 aColor;\r\n    uniform vec2 projection;\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n\r\n    uniform float z;\r\n    uniform vec3 pivot;\r\n    uniform vec3 rot;\r\n    varying vec3 pos;\r\n\r\n    void main(void) {\r\n        pos = vec3(aVertexPosition.xy, z);\r\n        \r\n        pos -= pivot;\r\n        \r\n        // Undo XY rotation\r\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \r\n                           -sin(rot.z), cos(rot.z));\r\n        pos.xy = iRotXy * pos.xy;\r\n        \r\n        // Perform 3d rotations\r\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\r\n        gl_Position.y = pos.y;\r\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\r\n        \r\n        pos.x = gl_Position.x;\r\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\r\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\r\n        \r\n        // Redo XY rotation\r\n        iRotXy[0][1] = -iRotXy[0][1];\r\n        iRotXy[1][0] = -iRotXy[1][0];\r\n        pos.xy = iRotXy * pos.xy; \r\n\r\n        // Undo translate to pivot position\r\n        pos.xyz += pivot;\r\n\r\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\r\n        \r\n        // Map coords to gl coordinate space.\r\n        // Set z to 0 because we don't want to perform z-clipping\r\n        gl_Position = vec4(pos.xy, 0.0, z);\r\n\r\n        vTextureCoord = aTextureCoord;\r\n        vColor = aColor;\r\n        \r\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\r\n    }\r\n`;\r\n\r\nPerspectiveShader.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    uniform sampler2D uSampler;\r\n\r\n    uniform vec3 rot;\r\n    uniform float fudge;\r\n\r\n    void main(void) {\r\n        vec2 coords = vTextureCoord;\r\n\r\n        coords.xy -= vec2(0.5);\r\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\r\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\r\n        coords.xy += vec2(0.5);\r\n\r\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\r\n            gl_FragColor = vec4(0.0);\r\n        } else {\r\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\r\n        }\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\n\r\nexport default class MagnifierShader extends DefaultShader {\r\n\tconstructor(context) {\r\n\t  super(context);\r\n\t  this._x = 0;\r\n\t  this._y = 0;\r\n\t  this._w = 0;\r\n\t  this._h = 0;\r\n\t  this._radius = 0;\r\n\t  this._magnification = 0.6;\r\n\t}\r\n  \r\n\tget x() {\r\n\t  return this._x;\r\n\t}\r\n  \r\n\tset x(v) {\r\n\t  this._x = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tget y() {\r\n\t  return this._y;\r\n\t}\r\n  \r\n\tset y(v) {\r\n\t  this._y = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tget w() {\r\n\t  return this._w;\r\n\t}\r\n  \r\n\tset w(v) {\r\n\t  this._w = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tget h() {\r\n\t  return this._h;\r\n\t}\r\n  \r\n\tset h(v) {\r\n\t  this._h = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tget magnification() {\r\n\t  return this._magnification;\r\n\t}\r\n  \r\n\tset magnification(v) {\r\n\t  this._magnification = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tget radius() {\r\n\t  return this._radius;\r\n\t}\r\n  \r\n\tset radius(v) {\r\n\t  this._radius = v;\r\n\t  this.redraw();\r\n\t}\r\n  \r\n\tsetupUniforms(operation) {\r\n\t  super.setupUniforms(operation);\r\n  \r\n\t  const owner = operation.shaderOwner;\r\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\r\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\r\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\r\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\r\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\r\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\r\n\t  this._setUniform(\r\n\t\t'radius',\r\n\t\t(this._radius + 0.5) * renderPrecision,\r\n\t\tthis.gl.uniform1f\r\n\t  );\r\n\t  this._setUniform(\r\n\t\t'resolution',\r\n\t\tnew Float32Array([\r\n\t\t  owner._w * renderPrecision,\r\n\t\t  owner._h * renderPrecision\r\n\t\t]),\r\n\t\tthis.gl.uniform2fv\r\n\t  );\r\n\t}\r\n \r\n\tuseDefault() {\r\n\t  return this._w === 0 && this._h === 0;\r\n\t}\r\n  }\r\n  \r\n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\r\n  \r\n  MagnifierShader.fragmentShaderSource = `\r\n\t  #ifdef GL_ES\r\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\t\tprecision highp float;\r\n\t\t# else\r\n\t\tprecision lowp float;\r\n\t\t# endif\r\n\t  #endif\r\n\r\n\t  varying vec2 vTextureCoord;\r\n\t  varying vec4 vColor;\r\n\t  uniform sampler2D uSampler;\r\n\t  uniform float x;\r\n\t  uniform float y;\r\n\t  uniform float w;\r\n\t  uniform float h;\r\n\t  uniform vec2 resolution;\r\n\t  uniform float radius;\r\n\t  uniform float magnification;\r\n  \r\n\t  float roundBox(vec2 p, vec2 b, float r) {\r\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\r\n\t\t  return smoothstep(1.0, 0.0, d);\r\n\t  }\r\n\r\n\t  float inside(vec2 v) {\r\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\r\n\t\treturn s.x * s.y;   \r\n      }\r\n  \r\n\t  void main(void) {\r\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\r\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\r\n\t\tvec2 size = vec2(w, h) / 2.0;\r\n\t\tfloat b = roundBox(pos, size, radius);\r\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\r\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\r\n\t  }\r\n  `;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DefaultShader from \"./DefaultShader.mjs\";\r\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\r\n\r\nexport default class SpinnerShader2 extends DefaultShader {\r\n    constructor(context) {\r\n        super(context);\r\n        this._period = 1;\r\n        this._stroke = 0;\r\n        this._showDot = true;\r\n        this._clockwise = true;\r\n        this._bc = 0xff000000;\r\n        this._normalizedBC = this._getNormalizedColor(this._bc);\r\n        this._c = 0xffffffff;\r\n        this._normalizedC = this._getNormalizedColor(this._c);\r\n    }\r\n\r\n    set radius(v) {\r\n        if(v === 0) {\r\n            v = 1;\r\n        }\r\n        this._radius = v;\r\n    }\r\n\r\n    set stroke(value) {\r\n        this._stroke = Math.abs(value);\r\n    }\r\n\r\n    get stroke() {\r\n        return this._stroke;\r\n    }\r\n\r\n    set color(argb) {\r\n        this._c = argb;\r\n        this._normalizedC = this._getNormalizedColor(argb);\r\n    }\r\n\r\n    get color() {\r\n        return this._c;\r\n    }\r\n\r\n    set backgroundColor(argb) {\r\n        this._bc = argb;\r\n        this._normalizedBC = this._getNormalizedColor(argb);\r\n    }\r\n\r\n    get backgroundColor() {\r\n        return this._sc;\r\n    }\r\n\r\n    set showDot(bool) {\r\n        this._showDot = bool;\r\n    }\r\n\r\n    get showDot() {\r\n        return this._showDot;\r\n    }\r\n\r\n    set clockwise(bool) {\r\n        this._clockwise = bool;\r\n    }\r\n\r\n    get clockwise() {\r\n        return this._clockwise;\r\n    }\r\n\r\n    set period(v) {\r\n        this._period = v;\r\n    }\r\n\r\n    get period() {\r\n        return this._period;\r\n    }\r\n\r\n    _getNormalizedColor(color) {\r\n        const col = StageUtils.getRgbaComponentsNormalized(color);\r\n        col[0] *= col[3];\r\n        col[1] *= col[3];\r\n        col[2] *= col[3];\r\n        return new Float32Array(col);\r\n    }\r\n\r\n    setupUniforms(operation) {\r\n        super.setupUniforms(operation);\r\n        const owner = operation.shaderOwner;\r\n        const radius = this._radius || (owner._w / 2);\r\n\r\n        if(this._stroke === 0) {\r\n            this._stroke = radius * 0.33;\r\n        }\r\n\r\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\r\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\r\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\r\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\r\n        this._setUniform('radius',  radius, this.gl.uniform1f);\r\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\r\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\r\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\r\n        this._setUniform('period', this._period, this.gl.uniform1f);\r\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\r\n\r\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\r\n            this.redraw();\r\n        }\r\n    }\r\n}\r\n\r\nSpinnerShader2.spinSync = Date.now();\r\n\r\nSpinnerShader2.fragmentShaderSource = `\r\n    #ifdef GL_ES\r\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    # else\r\n    precision lowp float;\r\n    # endif\r\n    #endif\r\n    \r\n    #define PI 3.14159265359\r\n    \r\n    varying vec2 vTextureCoord;\r\n    varying vec4 vColor;\r\n    \r\n    uniform sampler2D uSampler;\r\n    uniform vec2 resolution;\r\n    uniform vec4 color;\r\n    uniform vec4 backgroundColor;\r\n    uniform float direction;\r\n    uniform float radius;\r\n    uniform float time;\r\n    uniform float stroke;\r\n    uniform float showDot;\r\n    uniform float period;\r\n    uniform float alpha;\r\n    \r\n    float circleDist(vec2 p, float radius){\r\n        return length(p) - radius;\r\n    }\r\n    \r\n    float fillMask(float dist){\r\n        return clamp(-dist, 0.0, 1.0);\r\n    }\r\n    \r\n    void main() {\r\n        vec2 halfRes = 0.5 * resolution.xy;\r\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\r\n        \r\n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\r\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\r\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\r\n        \r\n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\r\n        \r\n        float strokeRad = stroke * 0.5;\r\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\r\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\r\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\r\n    }\r\n`;\r\n","/*\r\n * If not stated otherwise in this file or this component's LICENSE file the\r\n * following copyright and licenses apply:\r\n *\r\n * Copyright 2020 Metrological\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the License);\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Application from \"./application/Application.mjs\";\r\nimport Component from \"./application/Component.mjs\";\r\nimport Base from \"./tree/Base.mjs\";\r\nimport Utils from \"./tree/Utils.mjs\";\r\nimport StageUtils from \"./tree/StageUtils.mjs\";\r\nimport Element from \"./tree/Element.mjs\";\r\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\r\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\r\nimport Texture from \"./tree/Texture.mjs\";\r\n\r\nimport Tools from \"./tools/Tools.mjs\";\r\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\r\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\r\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\r\n\r\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\r\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\r\nimport TextTexture from \"./textures/TextTexture.mjs\";\r\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\r\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\r\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\r\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\r\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\r\n\r\nimport ListComponent from \"./components/ListComponent.mjs\";\r\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\r\nimport BloomComponent from \"./components/BloomComponent.mjs\";\r\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\r\nimport BorderComponent from \"./components/BorderComponent.mjs\";\r\nimport EventEmitter from \"./EventEmitter.mjs\";\r\n\r\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\r\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\r\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\r\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\r\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\r\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\r\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\r\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\r\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\r\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\r\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\r\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\r\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\r\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\r\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\r\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\r\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\r\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\r\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\r\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\r\n\r\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\r\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\r\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\r\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\r\n\r\nimport Stage from \"./tree/Stage.mjs\";\r\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\r\n\r\nconst lightning = {\r\n    Application,\r\n    Component,\r\n    Base,\r\n    Utils,\r\n    StageUtils,\r\n    Element,\r\n    Tools,\r\n    Stage,\r\n    ElementCore,\r\n    ElementTexturizer,\r\n    Texture,\r\n    EventEmitter,\r\n    shaders: {\r\n        Grayscale: WebGLGrayscaleShader,\r\n        BoxBlur: BoxBlurShader,\r\n        Dithering: DitheringShader,\r\n        CircularPush: CircularPushShader,\r\n        Inversion: InversionShader,\r\n        LinearBlur: LinearBlurShader,\r\n        Outline: OutlineShader,\r\n        Pixelate: PixelateShader,\r\n        RadialFilter: RadialFilterShader,\r\n        RoundedRectangle: RoundedRectangleShader,\r\n        Spinner2: SpinnerShader2,\r\n        FadeOut: FadeOutShader,\r\n        Hole: HoleShader,\r\n        Vignette: VignetteShader,\r\n        Spinner: SpinnerShader,\r\n        RadialGradient: RadialGradientShader,\r\n        Light3d: Light3dShader,\r\n        Perspective: PerspectiveShader,\r\n        Magnifier: MagnifierShader,\r\n        WebGLShader,\r\n        WebGLDefaultShader,\r\n        C2dShader,\r\n        C2dDefaultShader,\r\n        c2d: {\r\n            Grayscale: C2dGrayscaleShader,\r\n            Blur: C2dBlurShader\r\n        }\r\n    },\r\n    textures: {\r\n        RectangleTexture,\r\n        NoiseTexture,\r\n        TextTexture,\r\n        ImageTexture,\r\n        HtmlTexture,\r\n        StaticTexture,\r\n        StaticCanvasTexture,\r\n        SourceTexture\r\n    },\r\n    components: {\r\n        FastBlurComponent,\r\n        BloomComponent,\r\n        SmoothScaleComponent,\r\n        BorderComponent,\r\n        ListComponent\r\n    },\r\n    tools: {\r\n        ObjMerger,\r\n        ObjectListProxy,\r\n        ObjectListWrapper\r\n    }\r\n};\r\n\r\nif (Utils.isWeb) {\r\n    window.lng = lightning;\r\n}\r\n\r\nexport default lightning;\r\n"],"names":["StageUtils","_classCallCheck","_createClass","key","value","mergeNumbers","v1","v2","p","rgb","r","g","b","rgba","a","getRgbString","color","getRgbaString","toFixed","getRgbaStringFromArray","Math","floor","getRgbaComponentsNormalized","argb","getRgbComponentsNormalized","getRgbaComponents","getArgbNumber","max","min","v","mergeColors","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","mergeMultiColors","c","t","n","length","i","mergeMultiColorsEqual","mergeColorAlpha","alpha","rad","deg","PI","getTimingBezier","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","getTimingFunction","str","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","isFunction","isNumber","isInteger","isBoolean","isString","clone","isObjectLiteral","Array","isArray","getDeepClone","cloneObjShallow","obj","keys","Object","merge","obj1","obj2","isObject","type","isPlainObject","constructor","getArrayIndex","index","arr","getModuloIndex","len","ceil","equalValues","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","setToArray","result","forEach","push","iteratorToArray","iterator","iteratorResult","next","done","isUcChar","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","defaultSetter","name","patchObject","settings","error","names","patchObjectProperty","setter","setSetting","charAt","__local","local","func","SpacingCalculator","getSpacing","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","get","_lines","init","_getTotalCrossAxisSize","align","crossAxisSize","_this$_getSpacing","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","getParentAxisSizeWithPadding","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","getRelAxisSize","funcW","_allowRelAxisSizeFunction","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","isZeroAxisSize","getAxisLayoutPos","x","y","setAxisLayoutPos","pos","setAxisLayoutSize","size","getAxisMinSize","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","isShrinkable","flexItem","shrink","resizeAxis","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","getPaddingOffset","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","getMarginOffset","marginLeft","marginTop","getTotalMargin","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","getShrunkSize","SizeGrower","_grownSize","grow","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","getGrownSize","ItemPositioner","lineLayout","position","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","performLayout","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","shrinker","positioner","_calcCrossAxisMaxLayoutSize","getMainAxisMinSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","layoutLines","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","finalize","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","_reversed","_recalc","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","layoutTree","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","mainAxisContentSize","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_changedDimensions","changedDimensions","_changedContents","changedContents","f","direction","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","patch","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","_getCrossAxisLayoutSize","_getMainAxisPadding","_getMainAxisMargin","FlexTarget","_target","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","layoutFlexTree","isChanged","_disableFlex","_enableFlex","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","setParent","from","to","isFlexContainer","_changedChildren","setVisible","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","arguments","changeHeight","_updateRecalc","forceLayout","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","setOriginalXWithoutUpdatingLayout","setOriginalYWithoutUpdatingLayout","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","addTexture","has","add","removeTexture","delete","incActiveTextureCount","becomesUsed","decActiveTextureCount","becomesUnused","forEachEnabledElement","cb","_this","texture","_newArrowCheck","elements","bind","hasEnabledElements","forEachActiveElement","_this2","_this3","element","active","getRenderWidth","getRenderHeight","allowCleanup","isUsed","load","cancel","isLoading","isLoaded","isError","reload","free","_this4","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","_this5","forceRenderUpdate","update","frameCounter","forceUpdateRenderCoords","_updateTextureCoords","clearNativeTexture","replaceNativeTexture","newNativeTexture","_this6","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","_updateDimensions","e","_this7","onTextureSourceLoadError","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","_getTextureSource","textureManager","updateResultTexture","hasResultTexture","resultTextureInUse","resultTexture","getResultTexture","nativeTexture","core","mustRenderToTexture","_hasRenderUpdates","deactivate","release","releaseRenderTexture","reuseTextureAsRenderTexture","hasRenderTexture","getRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_ignoreRTL","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","_updateLocalTranslateDelta","_triggerRecalcTranslate","_disableFuncY","disableFuncW","disableFuncH","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","isRTL","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setZParent","findZContext","disableZContext","enableZContext","_setIgnoreRTL","enableZSort","newShaderOwner","_setShaderOwnerRecursive","ignoreRTL","force","forceZSort","addChildAt","splice","setChildAt","removeChildAt","removeChildren","syncChildren","removed","added","order","moveChild","fromIndex","toIndex","isEstimate","setTextureCoords","ulx","uly","brx","bry","setDisplayedTextureSource","textureSource","setAsRoot","root","coordsWidth","coordsHeight","isAncestorOf","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","_setShaderOwnerChildrenRecursive","_hasRenderContext","texturizer","_enableRenderToTexture","_disableRenderToTexture","_renderAdvanced","isWhite","hasSimpleTexCoords","_stashTexCoords","_stashedTexCoords","_unstashTexCoords","_stashColors","_stashedColors","_unstashColors","isVisible","_applyRelativeDimFuncs","pw","calculatedX","parentW","__parent","getOption","ta","td","tb","tc","pr","updateTreeOrder","useRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","renderToTextureCount","cleared","ignore","cache","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","renderTextureReused","setTexturizer","colorize","ptr","m","j","sort","mergeResult","getCornerPoints","getRenderTextureCoords","relX","relY","getAbsoluteCoords","collectAtCoord","inBound","inScissor","tx","ty","sc","_ensureLayout","EventEmitter","_hasEventListeners","on","listener","_eventFunction","_eventListeners","current","combiner","once","wrapper","arg1","arg2","arg3","off","__originalFunc","listeners","_iterator","_createForOfIteratorHelper","_step","l","map","removeListener","emit","listenerCount","removeAllListeners","object","_i","_arr","_toConsumableArray","addAsMixin","cls","Shader","coreContext","_initialized","_elements","addElement","removeElement","cleanup","redraw","useDefault","addEmpty","create","renderer","createShader","isShader","isValidShaderType","getWebGL","getC2d","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","incActiveCount","decActiveCount","_checkForNewerReusableTextureSource","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","_getLookupId","_getSourceLoader","_getIsValid","_updateSource","addUpdateSourceTexture","getTextureSource","getReusableTextureSource","newSource","oldSource","loadError","_ref","_ref$type","_ref$w","_ref$h","_ref$clipX","clipX","_ref$clipY","clipY","_clearResizeMode","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","enableClipping","disableClipping","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","getNonDefaults","nonDefaults","precision","isAutosizeTexture","isTexture","ImageTexture","_Texture","_inherits","_callSuper","_src","src","fc","charCodeAt","platform","loadSrcTexture","_get","_getPrototypeOf","call","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","getPrecision","setFontProperties","font","getFontSetting","fontFace","fontStyle","fontSize","fontWeight","textBaseline","_load","document","fonts","fontSetting","check","text","catch","then","draw","loadPromise","drawText","_draw","_calculateRenderInfo","offsetY","lineHeight","wordWrapWidth","cutSx","cutEx","cutSy","cutEy","letterSpacing","textIndent","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","wrapText","maxLines","usedLines","otherLines","measureText","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","textAlign","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","drawLine","prevShadowSettings","textColor","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","renderText","word","suffixWidth","wordLen","wordWidth","cutoffIndex","truncWordWidth","substring","indent","space","fillText","textSplit","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","reduce","acc","concat","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","_iterator2","_step2","_iterator3","_step3","firstWord","lastWord","shift","isSpace","pop","_iterator4","_step4","apply","lastLineText","filter","_iterator5","_step5","spl","alignLine","_iterator6","_step6","_iterator7","_step7","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","_iterator8","_step8","_iterator9","_step9","letters","_iterator10","_step10","tokenizeString","tokens","italic","bold","colorStack","colorRegexp","test","matched","exec","o","applyFontStyle","parsed","_iterator11","_step11","_iterator12","_step12","_getBreakIndex","breakIndex","_this$_getBreakIndex","_objectSpread","totalWidth","_iterator13","_step13","initialX","prevWidth","prevX","_iterator14","_step14","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontWeight","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","_set","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","texParams","sharpCfg","sharpen","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","_EventEmitter","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","start","targetValue","isAttached","_updateDrawValue","reset","delay","finish","stop","removeActive","pause","play","addActive","getDrawValue","attached","isRunning","progress","dt","delayLeft","duration","invokeListeners","updateTargetValue","timingFunctionImpl","_timingFunctionImpl","startValue","skipDelay","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","replaceByRef","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","getAt","remove","removeAt","onRemove","clear","onSync","isItem","_getRefs","clearRef","setRef","_setByObject","_setByArray","refs","crefs","cref","idx","_equalsArray","array","same","marker","newItems","_setItems","prevItems","ElementChildList","_ObjectList","_connectParent","prevChildList","childList","_setParent","gc","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","_throwError","removeTag","_addTag","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","getDepth","depth","getAncestor","getAncestors","getAncestorAtDepth","levels","getSharedAncestor","o1","o2","l1","l2","_isAttached","_isEnabled","_isActive","withinBoundsMargin","newAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","_setActiveFlag","_unsetActiveFlag","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","_onInactive","_onResize","_getRenderWidth","_getRenderHeight","textureIsLoaded","loadTexture","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","unknownSize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","tag","parentTreeTags","tags","tagSet","_loop","comp","Map","_loop2","_getByTag","getTags","setTags","removes","adds","hasTag","currentTags","addTag","list","_tag","mtag","values","res","level","resn","stag","sel","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","getLocationString","localTags","getSettings","getPrettyString","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","_collision","collision","_allowChildrenAccess","hasChildren","rectangleTexture","enableTextTexture","onUpdate","onAfterCalcs","onAfterUpdate","forceUpdate","rtt","getTexture","paths","firstCharCode","message","animation","animations","createAnimation","transition","_getTransition","_setTransition","setSmooth","fastForward","_transitions","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","getSmooth","toJSON","tree","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","isColorProperty","toLowerCase","properties","props","getBoolean","StateMachine","setupStateMachine","fire","event","_hasMethod","_len","_key","_getState","_state","__path","_inState","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","_hasMember","member","_setState","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","context","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","_stateIndex","__index","_initStateMachine","_routedType","_getMostSpecificHandledMember","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","StateMachineRouter","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","_this8","_this9","stateMap","_this10","_getStateMemberNames","_this11","_getStateMemberNamesForType","_this12","_isStateLocalMember","_createStateMap","_addState","parentState","_this13","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","_Element","tagRoot","_assertThisInitialized","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","application","updateFocusPath","_refocus","__bindProperty","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","_step$value","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","_focus","newTarget","prevTarget","_unfocus","_focusChange","_getFocused","_setFocusSettings","_handleFocusSettings","hasFinalFocus","_focusPath","hasFocus","seekAncestorByType","cparent","getSharedAncestorComponent","ancestor","isComponent","signal","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","fireAncestors","startsWith","_len2","_key2","_doFireAncestors","bindProp","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","collectSubComponents","subs","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","getElement","getElementCore","getTextureWidth","getTextureHeight","WebGLCoreQuadList","_CoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","getAttribsDataByteOffset","getQuadContents","CoreQuadOperation","shaderOwner","scissor","quads","getElementWidth","renderWidth","getElementHeight","renderHeight","WebGLCoreQuadOperation","_CoreQuadOperation","extraAttribsDataByteOffset","getNormalRenderTextureCoords","coords","getProjection","renderExec","_projection","projection","CoreRenderExecutor","destroy","_reset","_bindRenderTexture","_setScissor","_clearRenderTexture","execute","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_CoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","getScissor","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","compile","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getUniformLocation","location","getAttribLocation","_valueEquals","_valueClone","setUniformValue","glFunction","clonedValue","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","WebGLShader","_Shader","shaderPrograms","glProgram","initialize","_uniform","_attrib","_setUniform","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getVertexAttribPointerOffset","setExtraAttribsInBuffer","_getProjection","getFlipY","DefaultShader","_WebGLShader","vertexAttribPointer","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","copyRenderTexture","WebGLRenderer","_Renderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","getCompressedTextureExtensions","shaderProgram","createCoreRenderExecutor","createCoreRenderState","createRenderTexture","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","freeRenderTexture","deleteFramebuffer","deleteTexture","_getBytesPerPixel","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","bytesPerPixel","mca","cx","cy","extra","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","setRenderContext","setSimpleTc","setWhite","getRenderContext","getSimpleTc","getWhite","C2dCoreQuadOperation","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","globalCompositeOperation","beginPath","rect","closePath","fill","_restoreContext","restore","save","_equalScissorAreas","clip","C2dShader","_C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","_addMemoryUsage","delta","addMemoryUsage","_delete","_hasCache","_getCache","prevMemUsage","memoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","SparkShader","elementPostion","paint","SparkRenderer","_WebGLRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","_ref2","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","startLoop","loop","stopLoop","switchLoop","setInterval","updateFrame","idleFrame","lp","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","handleKtxLoad","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","includes","imageSize","handlePvrLoad","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","Image","crossOrigin","removeAttribute","createWebGLContext","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","createCanvasContext","getHrTime","performance","now","nextFrame","changes","registerKeydownHandler","keyhandler","_keydownListener","registerKeyupHandler","_keyupListener","removeEventListener","registerClickHandler","clickHandler","_clickListener","registerHoverHandler","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","_getDefaultFlag","cap","DITHER","setFlag","def","setBuffer","change","setFramebuffer","setRenderbuffer","setProgram","program","va","equal","setActiveTexture","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","setPixelStorei","pname","param","_getPixelStoreiIndex","migrate","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","_initStateManager","switchState","$useProgram","$bindBuffer","$bindFramebuffer","$bindRenderbuffer","$enable","$disable","$viewport","$scissor","$disableVertexAttribArray","$enableVertexAttribArray","$vertexAttribPointer","normalized","stride","$activeTexture","$bindTexture","$pixelStorei","$stencilFuncSeparate","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","$stencilMaskSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","$stencilOpSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","$blendColor","red","green","blue","_blendColor","$blendEquation","_blendEquation","$blendEquationSeparate","modeRGB","modeAlpha","_blendEquationSeparate","$blendFunc","sfactor","dfactor","_blendFunc","$blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","$clearColor","_clearColor","$clearDepth","_clearDepth","$clearStencil","_clearStencil","$colorMask","_colorMask","$cullFace","_cullFace","$depthFunc","_depthFunc","$depthMask","flag","_depthMask","$depthRange","zNear","zFar","_depthRange","$frontFace","_frontFace","$lineWidth","_lineWidth","$polygonOffset","factor","units","_polygonOffset","$sampleCoverage","invert","_sampleCoverage","$stencilFunc","_stencilFunc","$stencilMask","_stencilMask","$stencilOp","_stencilOp","$vertexAttrib1f","indx","_vertexAttrib1f","$vertexAttrib1fv","_vertexAttrib1fv","$vertexAttrib2f","_vertexAttrib2f","$vertexAttrib2fv","_vertexAttrib2fv","$vertexAttrib3f","z","_vertexAttrib3f","$vertexAttrib3fv","_vertexAttrib3fv","$vertexAttrib4f","_vertexAttrib4f","$vertexAttrib4fv","_vertexAttrib4fv","__proto__","method","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","_cleanupLookupMap","remainingTextureSources","ts","_freeManagedTextureSource","managed","TextureThrottler","_remove","_sources","_data","processSome","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","prec","_createRenderTexture","freeUnusedRenderTextures","maxAge","limit","TransitionSettings","_timingFunction","TransitionManager","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","getValue","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getResetValue","getAnimatedElements","sv","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","replay","STOPPED","stopNow","isPaused","isPlaying","isStopping","isFinished","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","isWebgl","isC2d","opt","setApplication","app","resume","_updatingFrame","_calculateDt","fixedDt","drawFrame","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","addServiceProvider","serviceprovider","getChildrenByPosition","Application","_Component","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","_receiveKeydown","_receiveKeyup","_receiveClick","_receiveHover","_recieveScrollWheel","__options","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","focusOverridden","unfocusedElement","focusedComponent","focusSettings","defaultSetFocusSettings","defaultHandleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","newParts","focusTopDownEvent","events","focusPath","_path$i","returnValue","focusBottomUpEvent","_path$i2","keyCode","hasTimer","longpress","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","_child$core$_worldCon","localCoords","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_ret","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","_ref$lookupId","Tools","getCanvasTexture","canvasFactory","content","getRoundRect","radius","strokeWidth","strokeColor","fillColor","createRoundRect","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","getShadowRect","blur","margin","createShadowRect","getSvgTexture","url","createSvg","img","ObjMerger","isMf","__mf","mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","ObjectListProxy","ObjectListWrapper","_ObjectListProxy","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_thisSuper","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","getAxisPosition","ps","wasVisible","invisibleItem","getWrapper","setPrevious","setNext","_ObjectListWrapper","checkStarted","ri","LinearBlurShader","_DefaultShader","_direction","_kernelRadius","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_Component2","_textwrap","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","getSpline","_multiSpline","_Component3","_layers","_output","_buildLayers","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","_WebGLDefaultShader","C2dGrayscaleShader","WebGLDefaultShader","_C2dDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","getWebGLImpl","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":"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"}